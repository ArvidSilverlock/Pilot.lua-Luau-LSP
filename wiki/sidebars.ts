import type { SidebarsConfig } from "@docusaurus/plugin-content-docs";

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

const fs = require("fs");
const path = require("path");
const matter = require("gray-matter");

const objectsDir = path.join(__dirname, "docs", "objects");

const uncategorised = [];
const programmable = [];
const nonProgrammable = [];

function walk(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      walk(fullPath);
    } else if (entry.isFile() && (entry.name.endsWith(".md") || entry.name.endsWith(".mdx"))) {
      const content = fs.readFileSync(fullPath, "utf-8");
      const { data } = matter(content);

      const id = path
        .relative(path.join(__dirname, "docs"), fullPath)
        .replace(/\\/g, "/")
        .replace(/\.md$/, "")
        .replace(/\.mdx$/, "");

      if (data.sidebar_position != null) {
        uncategorised.push([id, data.sidebar_position]);
      } else if (Array.isArray(data.tags) && data.tags.includes("Programmable")) {
        programmable.push(id);
      } else {
        nonProgrammable.push(id);
      }
    }
  }
}

walk(objectsDir);

uncategorised.sort((a, b) => a[1] - b[1]);

const objectsSidebar = [];

for (let [uncategorisedPage, _] of uncategorised) {
  objectsSidebar.push({ type: "doc", id: uncategorisedPage, label: path.basename(uncategorisedPage) })
}

objectsSidebar.push({
  type: 'category',
  label: 'Programmable Objects',
  collapsed: false,
  items: programmable
})

objectsSidebar.push({
  type: 'category',
  label: 'Other Objects',
  collapsed: true,
  items: nonProgrammable
})

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  objectsSidebar: objectsSidebar,

  typesSidebar: [
    { type: "doc", id: "globals", label: "Globals" },
    { type: "autogenerated", dirName: "types" },
  ],
  moduleSidebar: [
    { type: "autogenerated", dirName: "modules" },
    { type: "link", label: "sift", href: "https://cxmeel.github.io/sift/" },
    {
      type: "link",
      label: "promise",
      href: "https://eryn.io/roblox-lua-promise/",
    },
    { type: "link", label: "repr", href: "https://github.com/Ozzypig/repr/" },
    {
      type: "link",
      label: "nature2d",
      href: "https://jaipack17.github.io/Nature2D/",
    },
    {
      type: "link",
      label: "octotree",
      href: "https://github.com/Sleitnick/rbxts-octo-tree/",
    },
    {
      type: "link",
      label: "signal",
      href: "https://sleitnick.github.io/RbxUtil/api/Signal/",
    },
    {
      type: "link",
      label: "symbol",
      href: "https://sleitnick.github.io/RbxUtil/api/Symbol/",
    },
    {
      type: "link",
      label: "trove",
      href: "https://sleitnick.github.io/RbxUtil/api/Trove/",
    },
    {
      type: "link",
      label: "tableUtil",
      href: "https://sleitnick.github.io/RbxUtil/api/TableUtil/",
    },
  ],
  helpSidebar: [{ type: "autogenerated", dirName: "help" }],

  // But you can create a sidebar manually
  /*
  documentationSidebar: [
    'intro',
    'hello',
    {
      type: 'category',
      label: 'Documentation',
      items: ['documentation-basics/create-a-document'],
    },
  ],
   */
};

export default sidebars;
