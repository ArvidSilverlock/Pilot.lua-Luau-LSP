{
	"classes": {
		"abstractclasses": {
			"ARCamera": {
				"properties": {
					"CFrame": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#CFrame",
						"readonly": true,
						"type": "CFrame"
					},
					"CameraType": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#CameraType",
						"readonly": true,
						"type": "EnumCameraType"
					},
					"DiagonalFieldOfView": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#DiagonalFieldOfView",
						"readonly": true,
						"type": "number"
					},
					"FieldOfView": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#FieldOfView",
						"readonly": true,
						"type": "number"
					},
					"FieldOfViewMode": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#FieldOfViewMode",
						"readonly": true,
						"type": "EnumFieldOfViewMode"
					},
					"Focus": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#Focus",
						"readonly": true,
						"type": "CFrame"
					},
					"HeadScale": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#HeadScale",
						"readonly": true,
						"type": "number"
					},
					"MaxAxisFieldOfView": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#MaxAxisFieldOfView",
						"readonly": true,
						"type": "number"
					},
					"NearPlaneZ": {
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#NearPlaneZ",
						"readonly": true,
						"type": "number"
					},
					"RenderCFrame": {
						"description": "The CFrame the camera is rendered at (for VR)",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#RenderCFrame",
						"readonly": true,
						"type": "CFrame"
					},
					"ViewportSize": {
						"description": "The size of the camera viewport",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Camera#ViewportSize",
						"readonly": true,
						"type": "Vector2"
					},
					"ViewportSizeUI": {
						"description": "The size of the camera viewport (2D UI context)",
						"readonly": true,
						"type": "Vector2"
					}
				}
			},
			"UserInput": {
				"learnmore": "https://discord.com/channels/616089055532417036/823313507167502336/1038620936896790538",
				"properties": {
					"Mouse": {
						"description": "An array of <code>InputObjects</code> corresponding to the mouse buttons currently being currently held down.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetMouseButtonsPressed",
						"type": "{ InputObject }"
					},
					"Keyboard": {
						"description": "An array of <code>InputObjects</code> associated with the keys currently being pressed.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetKeysPressed",
						"type": "{ InputObject }"
					},
					"Gamepad": {
						"description": "An dictionary of <code>Enum.UserInputType.GamepadX</code> keys to an array of <code>InputObjects</code> representing the current state of all available inputs for said gamepad as values.",
						"learnmore": "https://discord.com/channels/616089055532417036/823313507167502336/1038621144397381692",
						"type": "{ [EnumUserInputType]: { InputObject } }"
					},
					"VREnabled": {
						"description": "This property describes whether the user is using a virtual reality (VR) device.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#VREnabled",
						"type": "boolean"
					},
					"KeyboardEnabled": {
						"description": "This property describes whether the user's device has a keyboard available. This property is <code>true</code> when the user's device has an available keyboard, and <code>false</code> when it does not.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#KeyboardEnabled",
						"type": "boolean"
					},
					"TouchEnabled": {
						"description": "This property describes whether the user's current device has a touch screen available.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#TouchEnabled",
						"type": "boolean"
					},
					"GamepadEnabled": {
						"description": "This property describes whether the device being used by a user has an available gamepad. If gamepads are available.",
						"type": "boolean"
					},
					"LastInputType": {
						"description": "The 'Enum.UserInputType` associated with the user's most recent input.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetLastInputType",
						"type": "EnumUserInputType"
					}
				}
			},
			"ARCursor": {
				"properties": {
					"Camera": {
						"description": "The camera of the player associated with the mouse.",
						"readonly": true,
						"type": "ARCamera"
					},
					"Hit": {
						"description": "The <code>CFrame</code> the user's mouse is located at.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Mouse#Hit",
						"readonly": true,
						"type": "CFrame"
					},
					"MouseDelta": {
						"description": "The current delta of the mouse for the frame that was sent.",
						"readonly": true,
						"type": "Vector2"
					},
					"Origin": {
						"description": "A <code>CFrame</code> indicating where the mouse originated from. It is positioned at the camera and oriented toward the mouse's 3D position.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Mouse#Origin",
						"readonly": true,
						"type": "Vector3"
					},
					"Player": {
						"description": "The name of the player the cursor is for.",
						"readonly": true,
						"type": "string"
					},
					"Pressed": {
						"description": "A boolean for whether or not the mouse button is pressed.",
						"readonly": true,
						"type": "boolean"
					},
					"ScreenPosition": {
						"description": "The XY screen position of the mouse cursor.",
						"readonly": true,
						"type": "Vector2"
					},
					"Target": {
						"description": "The PartObject that is being hovered over. You can call methods on this part!",
						"readonly": true,
						"type": "PilotObject"
					},
					"UnitRay": {
						"description": "A <code>Ray</code> directed toward the mouse's position in 3D space. It originates from the <code>CFrame</code> of the camera. Like all unit rays, it has a magnitude of 1.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Mouse#UnitRay",
						"readonly": true,
						"type": "Ray"
					},
					"UserCFrames": {
						"description": "Contains <code>Head</code>, <code>LeftHand</code>, and <code>RightHand</code> for VR.",
						"readonly": true,
						"type": {
							"Head": "CFrame",
							"LeftHand": "CFrame",
							"RightHand": "CFrame"
						}
					},
					"UserId": {
						"description": "The user ID of the player.",
						"readonly": true,
						"type": "number"
					},
					"UserInput": {
						"description": "A table of input data (would suggest printing with repr) - Contains Mouse, Keyboard, Gamepad, VREnabled, KeyboardEnabled, TouchEnabled, GamepadEnabled, and LastInputType.",
						"readonly": true,
						"type": "UserInput"
					},
					"VirtualTarget": {
						"description": "The hovered part in the virtual 3D space.",
						"readonly": true,
						"type": "BasePart"
					},
					"VirtualWorldPosition": {
						"description": "The world position of the mouse cursor in the virtual 3D space.",
						"readonly": true,
						"type": "Vector3"
					},
					"WorldPosition": {
						"description": "The world position of the mouse cursor.",
						"readonly": true,
						"type": "Vector3"
					},
					"X": {
						"description": "The X position of the cursor on the screen.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Mouse#X",
						"readonly": true,
						"type": "number"
					},
					"Y": {
						"description": "The Y position of the cursor on the screen.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/Mouse#Y",
						"readonly": true,
						"type": "number"
					}
				}
			},
			"ComponentObject": {
				"description": "**NOTE**: Component objects do NOT follow the same conventions as part objects and are not backwards compatible with the WoS part APIs. Things like `:GetConfigurables()` are `:ListConfigurables()` instead. Things like `partObject.ConfigName` (setting/getting) are `:SetConfigurable` and `:GetConfigurable` respectively. Additionally, unlike part objects methods that involve the component's information can **never** be called if the component was deleted, with the **sole** exception being `:GetObject()` which returns `nil` when the component is deleted. Trying to call methods on a deleted component will produce warnings and return empty or nil data depending on the method. Components additionally do not utilize GUIDs in any way. Additionally, some events are always valid.",
				"events": {
					"Configured": {
						"description": "Fires when the component is configured (Always valid)."
					},
					"Installed": {
						"description": "Fires when the component is installed onto something (Always valid)."
					},
					"OnClick": {
						"description": "Fires when the object is clicked.",
						"parameters": [
							[
								"userId: number",
								"The <code>UserID</code> of the player who clicked the component."
							]
						]
					},
					"Triggered": {
						"description": "Fires when the object the component is on is triggered."
					},
					"Uninstalled": {
						"description": "Fires when the component is uninstalled from whatever it's installed onto. You can check `:IsDestroyed()` here to see if it was deleted (Always valid)."
					}
				},
				"methods": {
					"Click": {
						"description": "Emulates a click *only* for the component."
					},
					"GetConfigurable": {
						"description": "Retrieves a configuration.",
						"parameters": ["configurableName: string"],
						"returns": ["any"]
					},
					"GetObject": {
						"description": "Retrieves the part object the component is installed on.",
						"returns": ["PilotObject"]
					},
					"IsDestroyed": {
						"description": "Returns whether or not the component is deleted.",
						"returns": ["boolean"]
					},
					"ListConfigurables": {},
					"ListEvents": {},
					"ListMethods": {},
					"SetConfigurable": {
						"description": "Sets a configuration.",
						"parameters": ["configurableName: string", "value: any"]
					},
					"Trigger": {
						"description": "Emulates a trigger signal *only* for the component."
					}
				}
			},
			"ContainerObject": {
				"events": {
					"ContainerChanged": {
						"description": "Fires when the amount of the item in the container changes. Note that <code>resourceType</code> describes the \"state\" (i.e., <code>Power</code> for powercell, <code>Solid</code> for bin, <code>Fluid</code> for tank) of the resource rather than the contents",
						"parameters": [
							"resourceType: \"Solid\" | \"Fluid\" | \"Power\"",
							[
								"resourceAmount: number",
								"The total resource count in the container, not the change in resources. One fluid is considered one fluid rather than ten (which is what would appear on the tank display)"
							]
						]
					}
				},
				"extends": "PilotObject",
				"methods": {
					"GetAmount": {
						"deprecated": "Use `:GetResourceAmount` instead.",
						"returns": ["number"]
					},
					"GetResource": {
						"description": "Gives you the name of the resource it contains, or the string \"nil\" if none (although this is likely a bug and should return actual nil, it just calls tostring on the resource kind)",
						"returns": ["string | \"nil\""]
					},
					"GetResourceAmount": {
						"description": "Gives you the total amount of stuff in the container.",
						"returns": ["number"]
					}
				}
			},
			"PilotObject": {
				"description": "The object that all Waste of Space objects inherit from.",
				"events": {
					"Destroyed": {
						"description": "Fires when the object is destroyed."
					}
				},
				"methods": {
					"CanInstallComponent": {
						"parameters": ["componentName: string"],
						"returns": ["boolean"]
					},
					"CanUninstallComponent": {
						"parameters": ["componentName: string"],
						"returns": ["boolean"]
					},
					"Click": {
						"unknowntype": true
					},
					"GetColor": {
						"deprecated": "Use `.Color` instead.",
						"description": "Gets the color of the object.",
						"returns": [["Color3", "The color of the object."]]
					},
					"GetComponent": {
						"parameters": ["componentName: string"]
					},
					"GetConfigurables": {
						"description": "Gets information about the configurable properties of the object.",
						"returns": ["{ [string]: ConfigurableData }"]
					},
					"GetDurability": {
						"deprecated": "Use `.Durability` instead.",
						"description": "Gets the current durability of the object.",
						"returns": [["number", "The durability of the part."]]
					},
					"GetEvents": {
						"returns": [["{ string }", "An array of event names."]]
					},
					"GetMethods": {
						"description": "Gets information about the methods of the object.",
						"returns": ["{ [string]: MethodData }"]
					},
					"GetNameOfOwnerAsync": {
						"deprecated": "Use `require(\"player\"):GetNameFromUserIdAsync` instead.",
						"returns": ["string"]
					},
					"GetOwnerId": {
						"description": "Returns who locked the part if the part is locked, otherwise returns who created the part.",
						"learnmore": "https://discord.com/channels/616089055532417036/1145165596967850044/1229499376347381780",
						"returns": ["number"]
					},
					"GetShape": {
						"returns": ["string?"]
					},
					"GetSize": {
						"deprecated": "Use `.Size` instead.",
						"description": "Gets the size of the object.",
						"returns": [["Vector3", "The size of the part."]]
					},
					"GetTemperature": {
						"deprecated": "Use `.Temperature` instead.",
						"description": "Gets the temperature of the object.",
						"returns": [["number", "The temperature of the object."]]
					},
					"HasComponent": {
						"parameters": ["componentName: string"],
						"returns": ["boolean"]
					},
					"HasPermission": {
						"description": "Returns a boolean as to whether or not the microcontroller has permission to do the specified action.",
						"parameters": ["permission: Permission"],
						"returns": ["boolean"]
					},
					"IsDestroyed": {
						"description": "Returns a boolean as to whether or not the object is destroyed.",
						"returns": ["boolean"]
					},
					"IsGrounded": {
						"description": "Returns a boolean as to whether or not the object is grounded.",
						"returns": ["boolean"]
					},
					"ListComponents": {
						"returns": ["{ string }"]
					}
				},
				"properties": {
					"Anchored": {
						"description": "Whether or not the object is anchored.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Anchored",
						"readonly": true,
						"type": "boolean"
					},
					"AssemblyCenterOfMass": {
						"description": "The center of mass of the object's assembly.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyCenterOfMass",
						"readonly": true,
						"type": "Vector3"
					},
					"AssemblyLinearVelocity": {
						"description": "The velocity of the object's assembly.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyLinearVelocity",
						"readonly": true,
						"type": "Vector3"
					},
					"AssemblyMass": {
						"description": "The mass of the object's assembly.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyMass",
						"readonly": true,
						"type": "number"
					},
					"CFrame": {
						"description": "The current CFrame of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#CFrame",
						"readonly": true,
						"type": "CFrame"
					},
					"ClassName": {
						"description": "The class name of the object",
						"readonly": true,
						"type": "string"
					},
					"Color": {
						"description": "The current color of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Color",
						"readonly": true,
						"type": "Color3"
					},
					"CreatedBy": {
						"description": "The user ID of the player who created the object.",
						"readonly": true,
						"type": "number"
					},
					"Durability": {
						"description": "The maximum health of the object",
						"readonly": true,
						"type": "number"
					},
					"GUID": {
						"description": "The unique GUID of the object",
						"readonly": true,
						"type": "string"
					},
					"Health": {
						"description": "The current health of the object",
						"readonly": true,
						"type": "number"
					},
					"Heat": {
						"description": "The current heat of the object.",
						"readonly": true,
						"type": "number"
					},
					"Mass": {
						"description": "The current mass of the individual object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Mass",
						"readonly": true,
						"type": "number"
					},
					"Material": {
						"description": "The material of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Material",
						"readonly": true,
						"type": "EnumMaterial"
					},
					"Orientation": {
						"description": "The current orientation of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Orientation",
						"readonly": true,
						"type": "Vector3"
					},
					"PartLocked": {
						"description": "The user ID of the player who locked the object.",
						"readonly": true,
						"type": "number?"
					},
					"Position": {
						"description": "The current position of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Position",
						"readonly": true,
						"type": "Vector3"
					},
					"Size": {
						"description": "The current size of the object.",
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/BasePart#Size",
						"readonly": true,
						"type": "Vector3"
					},
					"Temperature": {
						"description": "The current heat/temperature of the object.",
						"readonly": true,
						"type": "number"
					}
				}
			},
			"Tool": {
				"extends": "PilotObject"
			}
		},
		"components": ["ClickButton", "KeyButton", "Door", "Blade", "Hull"],
		"objects": {
			"100k": {
				"description": "100k visits special item",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"ARController": {
				"events": {
					"Configured": true,
					"CursorMoved": {
						"description": "Fired when a player's cursor updates.",
						"parameters": [["cursor: ARCursor", "The cursor that updated."]]
					},
					"CursorPressed": {
						"description": "Fired when a player left clicks.",
						"parameters": [
							[
								"cursor: ARCursor",
								"The cursor that started pressing left click."
							]
						]
					},
					"CursorReleased": {
						"description": "Fired when a player releases the left click button.",
						"parameters": [
							[
								"cursor: ARCursor",
								"The cursor that stopped pressing left click."
							]
						]
					},
					"KeyPressed": true,
					"OnClick": true,
					"UserInput": true
				},
				"extends": "Screen",
				"methods": {
					"ClearElements3D": {
						"description": "Clears 3D elements."
					},
					"CreateElement3D": {
						"description": "Creates a 3D part instance in the player's viewport.",
						"parameters": [
							[
								"shape: \"Ball\" | \"Block\" | \"Cylinder\" | \"Wedge\" | \"CornerWedge\"",
								"The `Enum.PartType` of the part."
							],
							["properties: { [string]: any }", "The part properties to apply."]
						],
						"returns": [["Part", "The created part instance."]]
					},
					"GetCursor": {
						"description": "Returns the part owner's cursor, or any other player's cursor if the owner does not have a cursor (this is considered the primary user).",
						"returns": [["ARCursor", "The cursor of the primary user."]]
					},
					"GetCursors": {
						"description": "Gets a dictionary of player usernames to their cursors.",
						"returns": [
							[
								"{ [string]: ARCursor }",
								"A dictionary of player usernames to their cursors."
							]
						]
					}
				},
				"properties": {
					"Transparency": {
						"constraints": {
							"default": 0,
							"max": 1,
							"min": 0,
							"step": 0.1
						},
						"description": "The transparency of the AR display.",
						"type": "number"
					}
				}
			},
			"Aerogel": {
				"description": "An incredibly light material that is very fragile."
			},
			"AirSupply": {
				"categories": ["Electrical"],
				"description": "Generates a 300 stud radius oxygen bubble when powered on. Very important part for space ships, as it acts as the oxygen supply for the ship.",
				"events": {
					"Loop": true
				}
			},
			"AlienCore": {
				"categories": ["Resources"],
				"description": "A mysterious piece of technology found within many robotic aliens.\nAlthough its precise function is unknown, it manages to be extremely useful in advanced technologies.\nIt seems to emanate raw power on its own, but only these robotic constructions seem to know .\nGenerally, more powerful aliens will utilize more alien cores."
			},
			"Aluminum": {
				"categories": ["Resources"],
				"description": "A light material useful for air transport. Isn't very durable."
			},
			"Anchor": {
				"description": "When triggered or clicked, it is able to be anchored, a state in which it is immovable by physics, and applies to parts connected to it. ",
				"events": {
					"Configured": true,
					"OnClick": true,
					"Triggered": true
				},
				"properties": {
					"Anchored": {
						"description": "Determines whether the anchor is active or not.",
						"type": "boolean"
					}
				}
			},
			"Antenna": {
				"categories": ["Logic"],
				"description": "A wireless transmitter that can transmit electricity from wires and trigger signals from trigger wires and buttons.",
				"properties": {
					"AntennaID": {
						"constraints": {
							"default": "A1"
						},
						"description": "The ID of this antenna, to transmit to others with the same ID.",
						"type": "string"
					}
				}
			},
			"Apparel": {
				"description": "A piece of clothing that can be worn by other players. Parts can also be attached to the apparel, meaning you can create your own suits with the apprel.\nIt is similar to the prosthetic, except it can be taken off and does not cause damage. However, electricity does not trasmit throughout the apparel unlike prosthetics.\n\nApparel can also holds less parts than the prosthetic. It can only hold 25 parts, while Prosthetics can hold 50.\n\nApparel has another configuration to it called Transparency, which dictates how transparent it will become when worn. Ranges from 0-1 from non-transparent to transparent.\n\t",
				"events": {
					"Configured": true,
					"Loop": true,
					"OnClick": true
				},
				"properties": {
					"Limb": {
						"constraints": {
							"default": "Left Arm"
						},
						"description": "The name of the limb that this Apparel is for.",
						"type": "string"
					},
					"Transparency": {
						"constraints": {
							"default": 1,
							"max": 1,
							"min": 0
						},
						"description": "The transparency of this Apparel.",
						"type": "number"
					}
				}
			},
			"Artillery": {
				"description": "Fires a fast-moving metal shell upon being triggered.\nThis metal shell generates a small explosion upon impact.\nCosts 15 iron per shot.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Asphalt": {
				"description": "A modern material useful for smooth road surfaces.\nIts durability triples when anchored.",
				"events": {
					"Loop": true
				}
			},
			"Assembler": {
				"categories": ["Electrical"],
				"description": "Assembles items as configured when the structure is supplied with the required power and resources.",
				"events": {
					"Configured": true,
					"Loop": true
				},
				"methods": {
					"CalculateCraftingRecipe": {
						"parameters": [
							[
								"items: { string } | { [string]: number }",
								"A list of parts **OR** A dictionary of each part with how many of said part to craft."
							]
						],
						"returns": ["{ Power: number, [string]: number }"]
					},
					"CraftItems": {
						"parameters": ["items: { string } | { [string]: number }"]
					},
					"GetCraftCooldown": {
						"returns": ["number"]
					},
					"GetInventory": {
						"returns": ["{ [string]: number }"]
					}
				},
				"properties": {
					"Assemble": {
						"constraints": {
							"default": ""
						},
						"description": "The name of the object to be assembled.",
						"type": "string"
					}
				}
			},
			"AutomaticLaser": {
				"categories": ["Weapons", "Electrical"],
				"description": "Fires a continous set of lasers when powered. Like most other energy/thermal weapons, it generates heat when powered. It generates up to 65 degrees of heat, meaning you will need atleast 2 or 3 coolers.",
				"events": {
					"Loop": true
				}
			},
			"Ball": {
				"categories": ["Templates"],
				"description": "A ball shaped template object."
			},
			"BallastTank": {
				"description": "Allows for variable ballast to be added to sea vehicles. Also prevents corrosion to attached parts underwater. ",
				"events": {
					"Loop": true
				},
				"properties": {
					"Buoyancy": {
						"constraints": {
							"default": 0,
							"max": 10,
							"min": -10
						},
						"description": "The buoyancy of this BallastTank, 0 being neutral.",
						"type": "number"
					}
				}
			},
			"Balloon": {
				"description": "Levitates parts attached to it to a certain configurable height.\nHowever, it is easily poppable.\nDoes not work in space, or no-atmosphere planets.",
				"events": {
					"Configured": true
				},
				"properties": {
					"Buoyancy": {
						"constraints": {
							"default": 0,
							"max": 10,
							"min": -10
						},
						"description": "The buoyancy of this Balloon, 0 being neutral.",
						"type": "number"
					}
				}
			},
			"Battery": {
				"description": "A light part that contains 400 energy and is prefilled. Can be refilled.",
				"extends": "ContainerObject"
			},
			"Beacon": {
				"categories": ["Electrical"],
				"description": "Creates a small beacon of light when powered. \n\tWhen 'ShowOnMap\\' is enabled, it broadcasts a signal into the universe.\n\t\\'BeaconName\\' changes the name of the beacon shown on the starmap. \n\t30 second cooldown for changing the configurables.",
				"events": {
					"Configured": true
				},
				"properties": {
					"BeaconName": {
						"constraints": {
							"default": ""
						},
						"description": "The name of the beacon.",
						"type": "string"
					},
					"ShowOnMap": {
						"description": "Whether this beacon should be shown on StarMaps.",
						"type": "boolean"
					}
				}
			},
			"Beryllium": {
				"categories": ["Resources"],
				"description": "A lightweight metal only found on Barren planets used for preventing plutonium cores from going supercritical until detonated."
			},
			"Bin": {
				"description": "Stores solid items such as Aluminum, Iron, Faucets, etc. \nCan store up to 1000 items. When destroyed, every item inside will also be destroyed. \nThe value increases as more items are added to it.\n\nBins can also be used as crafting recipes, with the resources inside being used.\nYou can also configure a bin to prevent items from being crafted from it, allowing for bins to be strictly for machine storage.\n\t",
				"events": {
					"OnClick": true
				},
				"extends": "ContainerObject",
				"properties": {
					"CanBeCraftedFrom": {
						"constraints": {
							"default": true
						},
						"description": "Determines whether this bin can be used by nearby players to craft objects.",
						"type": "boolean"
					},
					"Resource": {
						"constraints": {
							"default": ""
						},
						"description": "The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything.",
						"type": "string"
					}
				}
			},
			"BlackBox": {
				"description": "Records all activity in the region using very delicate instruments.\nActivates when locked and anchors to ensure accurate readings.\nONLINE = Listening for event/Sharing event data, DATA = New data the owner hasn't seen.\n\t\t\n",
				"events": {
					"Loop": true,
					"OnClick": true
				},
				"methods": {
					"GetLogs": {
						"returns": ["RegionLog"]
					}
				}
			},
			"Blade": {
				"categories": ["Templates"],
				"description": "A sharp object that can pierce through objects if the material is durable and strong."
			},
			"BlastingCap": {
				"description": "A component used in crafting recipes for more advanced explosive devices."
			},
			"Boiler": {
				"description": "Turns water to steam when fueled with 2 water and 1 coal.",
				"events": {
					"Loop": true
				}
			},
			"Boombox": {
				"categories": ["Electrical"],
				"description": "Must be powered in order to play music. When clicked, it will toggle playing music and will play the song id you give it.",
				"events": {
					"Loop": true,
					"OnClick": true,
					"Triggered": true
				},
				"properties": {
					"Audio": {
						"constraints": {
							"default": 142376088
						},
						"description": "The audio asset ID to be played.",
						"type": "number"
					}
				}
			},
			"Brick": {
				"description": "A cheap material made from baked clay useful for building houses.\nIts durability doubles when anchored on a planet.",
				"events": {
					"Loop": true
				}
			},
			"BurnerGenerator": {
				"categories": ["Electrical"],
				"description": "Creates electricity when fueled with coal.",
				"events": {
					"Loop": true
				}
			},
			"BurstLaser": {
				"categories": ["Weapons"],
				"description": "Fires 5 rapid sets of concentrated laser beams. Each beam does a mediate amount of damage.\nCosts 100 power for each beam fired, meaning the total power cost is 500 power.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Button": {
				"categories": ["Logic"],
				"description": "Sends trigger signals when clicked by a player.\nWhen connected to a seat and the input key is configured/configureed, the player sitting in the seat can activate the button by pressing the corresponding key.\nTriggerMode 0: Trigger on key down\nTriggerMode 1: Trigger on key up\nTriggerMode 2: Trigger on key down and key up"
			},
			"Camera": {
				"categories": ["Logic"],
				"description": "It's a camera.\nWhen a camera has the same ID as a screen, that screen will display the camera view.\nClicking on a screen that is displaying the view of a camera will allow you to directly view what the camera is seeing.\nNo power is necessary.",
				"events": {
					"Configured": true
				},
				"properties": {
					"VideoID": {
						"constraints": {
							"default": 0,
							"max": 10000000000.0,
							"min": 0,
							"step": 1
						},
						"description": "The ID to transmit the camera feed over, received by screens of the same ID.",
						"type": "number"
					}
				}
			},
			"Cannon": {
				"categories": ["Weapons"],
				"description": "Fires a cannon ball when triggered or clicked.\nMust be supplied with an ammo material.\nIron is prioritized, and results in one large cannonball being shot.\nCopper results in grapeshot.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Cement": {
				"description": "A modern material useful for pavement."
			},
			"Chute": {
				"description": "Is able to transfer solid parts between objects such as bins and extractors.\n**Contrary to popular belief, chutes can transfer more than one type of object.**\n**This means you can mix assemblers and extractors into the same system, no need for different chutes for each object. You can just make one long chute and connect your factory to it.**"
			},
			"Cleat": {
				"description": "A textile resource similar to Rubber, except it has a high amount of friction and low bounciness. It can be used in physical machines such as the feet of mechs, etc."
			},
			"CloningBay": {
				"categories": ["Electrical"],
				"description": "Similar to a SpawnPoint, but allows players to respawn at the location from far away even at another region.\nIt is pretty much a cross region spawnpoint. However, you can only have one cloning bay at a time.\nWhen powered, it will appear in your death menu when you die and you can click it to spawn at this location.\nHowever, you should pair the CloningBay with a spawn point next to it to ensure you spawn at the cloning bay."
			},
			"Cloth": {
				"description": "A soft thin fabric that can soak up liquids."
			},
			"Coal": {
				"categories": ["Resources"],
				"description": "A natural resource found abundant in mountains, and is commonly used as a source of generating heat and energy. Can be placed in a BurnerGenerator to generate energy."
			},
			"CombustionTurbine": {
				"categories": ["Electrical"],
				"description": "Creates electricity when fueled by gasoline.",
				"events": {
					"Loop": true
				}
			},
			"Cone": {
				"categories": ["Templates"],
				"description": "A cone shaped template object."
			},
			"Constructor": {
				"description": "Similar to an assembler, but constructs a model when triggered. However, the constructor must be supplied with the correct materials for a model.\nFor example, a car model requiring 50 iron and 3 a bin attached with 50 iron, a bin attached with 30 wires and 100 power.\n\t\t\nYou can find out how many materials you need through the model loader gui.\nHas a 60 second cool down or a minute cooldown to prevent model spamming.",
				"events": {
					"Configured": true,
					"Triggered": true
				},
				"methods": {
					"CalculateModelRecipe": {
						"unknowntype": true
					}
				},
				"properties": {
					"Autolock": {
						"description": "Determines if the created model should be locked by the owner of the Constructor.",
						"type": "boolean"
					},
					"ModelCode": {
						"constraints": {
							"default": ""
						},
						"description": "The model data of the model to be created by the Constructor.",
						"type": "string"
					},
					"RelativeToConstructor": {
						"description": "Determines if the created model should be loaded in relative to the orientation of the Constructor.",
						"type": "boolean"
					}
				}
			},
			"Container": "Stores liquids and gases. When a liquid or gas touches the Container, the container will automatically store it.",
			"Controller": {
				"categories": ["Logic"],
				"description": "Alters the speed of attached Controllable objects which include: Engine, Motor, BallastTank, IonDrive, IonRocket, Thruster, Rocket. Must use a polysilicon between this controller and \n\tan object that emits a trigger signal(like a button) to use the same events as clicking the UI. For example, FlipFlop will set the speed of the Controllable objects to 0, Deactivate will subtract 5 from the current speed, etc.",
				"events": {
					"Loop": true,
					"Triggered": true
				}
			},
			"ConveyorBelt": {
				"categories": ["Electrical"],
				"description": "Moves objects ontop of it towards the front of the conveyor belt. Only moves when powered and anchored or attached to the ground.",
				"properties": {
					"ConveyorBeltSpeed": {
						"constraints": {
							"default": 10,
							"max": 30,
							"min": -30
						},
						"description": "Determines the speed at which the conveyor will move items on top of it.",
						"type": "number"
					}
				}
			},
			"Cooler": {
				"categories": ["Electrical"],
				"description": "Cools down the heat around a space when supplied with power. \nGlows blue while functioning. Can be used to provide a cool environment in hot areas. \nIs also useful for cooling down objects such as iondrives and engines.\nCooling amount is based on size -20 * X * Y * Z / 16"
			},
			"Copper": {
				"categories": ["Resources"],
				"description": "A brown shiny metal, the forefather of electronics."
			},
			"CornerRoundWedge": {
				"categories": ["Templates"],
				"description": "A rounded corner shaped template object."
			},
			"CornerRoundWedge2": {
				"categories": ["Templates"],
				"description": "A corner shaped template object rounded inwards."
			},
			"CornerTetra": {
				"categories": ["Templates"],
				"description": "A template which is a tetrahedron subtracted from a cube."
			},
			"CornerWedge": {
				"categories": ["Templates"],
				"description": "A corner wedge shaped template object."
			},
			"Coupler": {
				"description": "The coupler is a part that allows the coupling/connection of vehicles and objects when powered. Both couplers must be powered in order to couple together.\nWhen the coupler comes in contact with another coupler, the couplers will both connect to eachother, both holes facing eachother. \nTo ensure no weld complications, make sure the couplers' triangles are facing upwards. When the couplers connect, the white triangles will make a square.\nCouplers also only couple to other couples with the same CouplerID.\n",
				"properties": {
					"AutoTrigger": {
						"description": "Whether or not the coupler should emit trigger signals while in range of another valid coupler.",
						"type": "boolean"
					},
					"CouplerID": {
						"constraints": {
							"default": "C1"
						},
						"description": "The ID of this coupler.",
						"type": "string"
					}
				}
			},
			"CrudeWing": {
				"description": "Creates lift from being pushed forward.\nA worse version of a Wing.\nDoes not work in space or in non atmospheric planets.",
				"events": {
					"Loop": true
				}
			},
			"Cylinder": {
				"categories": ["Templates"],
				"description": "A cylinder shaped template object."
			},
			"DarkConverter": {
				"categories": ["Electrical"],
				"description": "Converts attached dark matter bins into energy. 1 unit of dark matter is equal to 1000 watts of power. However, this generates a ton of heat in the process, nearly up to 200 degrees when activated. This means you will need about 10 coolers to avoid combustion.",
				"events": {
					"Loop": true
				}
			},
			"DarkMatter": {
				"categories": ["Resources"],
				"description": "A very valuable material extracted from black holes and a few empty regions in space. \nUsed primarily for weapons, but can also be convertred into energy and for other ingredients via DarkConverter."
			},
			"DarkReactor": {
				"categories": ["Electrical"],
				"description": "Generates Dark Matter when powered and near a black hole.\nThe reactor is very unstable, and if the reactor overheats it will cause a huge explosion.\n\nThe DarkReactor generates up to 500 degrees of temperature, meaing you will need atleast 25 coolers to cool the reactor to make sure it does not overheat.",
				"events": {
					"Loop": true
				}
			},
			"Decoupler": "When triggered, it breaks welds and falls off of anything attached.\nCan be used to separate things.\nThe trigger signals will pass through the decoupler as it is decoupled.",
			"DelayWire": {
				"categories": ["Logic"],
				"description": "Similar to a regular trigger wire, but depending on the configuration will wait x seconds before the trigger signal passes through.",
				"properties": {
					"DelayTime": {
						"constraints": {
							"default": 1,
							"max": 360,
							"min": 0
						},
						"description": "The time in seconds that it takes for signals to pass through this wire.",
						"type": "number"
					}
				}
			},
			"DeleteSwitch": {
				"categories": ["Logic"],
				"description": "An object that deletes itself when triggered.",
				"events": {
					"Triggered": true
				}
			},
			"Diamond": {
				"categories": ["Resources"]
			},
			"Diode": {
				"categories": ["Electrical"],
				"description": "Allows electrical objects to interact with each other when connected by the diode, but only in its direction as depicted by an arrow."
			},
			"Disk": {
				"categories": ["Logic"],
				"description": "",
				"events": {
					"Loop": true
				},
				"methods": {
					"Clear": {
						"unknowntype": true
					},
					"ClearDisk": {
						"unknowntype": true
					},
					"Compress": {
						"unknowntype": true
					},
					"Decompress": {
						"unknowntype": true
					},
					"Read": {
						"parameters": ["key: any"],
						"returns": ["any"]
					},
					"ReadAll": {
						"unknowntype": true
					},
					"ReadEntireDisk": {
						"returns": ["{ [any]: any }"]
					},
					"Write": {
						"parameters": ["key: any", "data: any"]
					},
					"WriteAll": {
						"unknowntype": true
					}
				}
			},
			"Dispenser": {
				"description": "Dispenses items from attached bins, similar to a faucet.\nCan also filter certain items from dispensing. Simply configure it to be a list of names. For example, \"Copper Iron Wire\"",
				"events": {
					"Configured": true,
					"Loop": true,
					"OnClick": true,
					"Triggered": true
				},
				"methods": {
					"Dispense": {
						"description": "Dispenses a single item."
					}
				},
				"properties": {
					"Filter": {
						"constraints": {
							"default": ""
						},
						"description": "Which kinds of resources to drop, separated by commas.",
						"type": "string"
					}
				}
			},
			"Door": {
				"categories": ["Templates"],
				"description": "When triggered, it will open, and if triggered again will close.",
				"properties": {
					"DoorSwitch": {
						"description": "Determines if the door is open.",
						"type": "boolean"
					}
				}
			},
			"DriveBox": {
				"description": "When connected to a motor or engine with a rod, it will spin the same speed the engine or motor is going.\n(You must click the drivebox first when creating a rod.) ",
				"events": {
					"Loop": true
				},
				"properties": {
					"Ratio": {
						"constraints": {
							"default": 100,
							"max": 100,
							"min": 1,
							"step": 1
						},
						"description": "The ratio of speed from 1 (1:100) to 100 (100:100) between this DriveBox and the source motor.",
						"type": "number"
					},
					"Reversal": {
						"description": "Determines whether the output should be reversed.",
						"type": "boolean"
					}
				}
			},
			"ElectricFence": {
				"categories": ["Electrical"],
				"description": "A special version of the fence which damages upon contact.\nRequires power to electrocute.",
				"events": {
					"Loop": true
				}
			},
			"Electromagnet": {
				"categories": ["Logic", "Electrical"],
				"description": "A powerful magnet."
			},
			"EnergyBomb": {
				"categories": ["Weapons"],
				"description": "Causes a powerful explosion when triggered. Often used in space combat as a means of a powerful missile or torpedo.",
				"events": {
					"Damaged": true,
					"Triggered": true
				}
			},
			"EnergyGun": {
				"categories": ["Weapons"],
				"description": "Fires a powerful shot of energy when provided power and triggered."
			},
			"EnergyShield": {
				"categories": ["Electrical"],
				"description": "Creates a bubble made of energy that protects it from energy based weapons such as Lasers and Plasma Cannons.\n\nAn EnergyShield has a few sets of properties that you can fine tune to create a balanced shield.\nShieldRadius - The size of the entire shield. This will exponentially consume more power the higher the radius is. \nRegenerationSpeed - On a scale from 1 to 10 on how fast the shield will regenerate.\nShieldStrength - Scale from 1 to 10 on how much the shield can endure.\n\nRegenerationSpeed and ShieldStrength both combined can't be over 11.\nFor example, a regeneration speed of 6 and a shield strength of 5 is possible.\nHowever, a regeneration speed of 10 and a shield strength of 10 isn't, as 10 + 10 > 11\nA regeneration speed of 1 and a shield strength of 10 however is possible, since 11 = 11.\n\nAnother benefit for energy shields is that it blocks all warhead explosions, whether inside the shield or outside.",
				"events": {
					"Configured": true,
					"Loop": true
				},
				"methods": {
					"CalculateCost": {
						"unknowntype": true
					},
					"GetShieldHealth": {
						"returns": ["number"]
					}
				},
				"properties": {
					"RegenerationSpeed": {
						"constraints": {
							"default": 5,
							"max": 10,
							"min": 1
						},
						"description": "Determines how fast the shield regenerates after being hit.",
						"type": "number"
					},
					"ShieldRadius": {
						"constraints": {
							"default": 100,
							"max": 1000,
							"min": 50
						},
						"description": "The size of the entire shield. The shield exponentially consumes more power the higher this is.",
						"type": "number"
					},
					"ShieldStrength": {
						"constraints": {
							"default": 5,
							"max": 10,
							"min": 1
						},
						"description": "Determines the shield's resistance to damage.",
						"type": "number"
					}
				}
			},
			"Engine": {
				"description": "It acts similar to a motor, but is powered by gasoline instead of electricity. ",
				"events": {
					"Configured": true
				},
				"properties": {
					"EngineSpeed": {
						"constraints": {
							"default": 10,
							"max": 20,
							"min": -20
						},
						"description": "Determines the speed at which the engine is driven.",
						"type": "number"
					}
				}
			},
			"EthernetCable": {
				"categories": ["Logic"],
				"description": "Allows for the transfer of data between ports. Mostly utilized in programming."
			},
			"ExoticMatter": {
				"categories": ["Resources"],
				"description": "???"
			},
			"Explosive": {
				"categories": ["Weapons"],
				"description": "Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.",
				"events": {
					"Damaged": true,
					"Triggered": true
				}
			},
			"Extractor": {
				"categories": ["Electrical"],
				"description": "Extracts and harvests materials from connected terrain such as mountains and ore deposits. \nFor example, to extract coal you attach it to the coal deposit, and configure the extractor to extract Coal.\n\nThe extractor must be powered in order to work. Will not work if there's another powered extractor 50 studs away.\nIf connected to a bin, it will supply that bin with the given material it is tasked to extract.\nTwo powered extractors cannot be on the same ore deposit, or else they both will not function. \n\nIf the materials can't be added to a bin, they will spawn in front of the hole on the front of the extractor.\nHowever, if the extractor is blocked by an object, it will not spew out any materials which prevents an increase on lag.\n\t\t\nWhen tasked to extract wood, it will extract any trees near it.",
				"events": {
					"Loop": true
				},
				"properties": {
					"MaterialToExtract": {
						"description": "Determines the material to extract from connected natural surfaces.",
						"type": "string"
					}
				}
			},
			"Faucet": {
				"description": "Releases liquids and gases from containers.",
				"extends": "Dispenser"
			},
			"Fence": {
				"description": "A metal fence. Primarily used to set up walls and gaurd structures and bases."
			},
			"Filter": {
				"description": "Similar to a chute and a pipe, but only lets certain materials pass through.",
				"properties": {
					"Filter": {
						"constraints": {
							"default": ""
						},
						"description": "The name of the material allowed to pass through.",
						"type": "string"
					},
					"Invert": {
						"description": "Whether or not to invert the filter.",
						"type": "boolean"
					}
				}
			},
			"FireWood": {
				"description": "A version of wood that is able to burn longer, allowing it to be an efficient fire burning device."
			},
			"Fireworks": {
				"categories": ["Weapons"],
				"description": "Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.",
				"events": {
					"Damaged": true,
					"Triggered": true
				}
			},
			"Flamethrower": {
				"description": "Shoots a stream of flaming gasoline to ignite your foes.",
				"events": {
					"Loop": true,
					"OnClick": true,
					"Triggered": true
				}
			},
			"Flint": {
				"categories": ["Resources"],
				"description": "Useful for lighting up flammable materials.\nSimply rub it against a flammable material and it will set it on fire."
			},
			"FloatDevice": {
				"categories": ["Electrical"],
				"description": "Defies gravity when powered. Allows for vehicles such as space ships to float."
			},
			"Food": {
				"description": "A consumable item.\n*Appears* to be meat.\nUpon clicking it, it will heal the user's health depending on the size.",
				"events": {
					"OnClick": true
				}
			},
			"Framewire": {
				"description": "Enter the matrix."
			},
			"Freezer": {
				"categories": ["Electrical"],
				"description": "Turns attached water bins into ice when powered.",
				"events": {
					"Loop": true
				}
			},
			"Furnace": {
				"events": {
					"Loop": true
				}
			},
			"Gasoline": {
				"categories": ["Resources"],
				"description": "A liquid used for fueling many devices such as rockets and engines."
			},
			"Gear": "A mechanical component commonly used in crafting recipes for many objects.",
			"GeigerCounter": {
				"categories": {}
			},
			"Generator": {
				"categories": ["Electrical"],
				"description": "Creates energy from rotation."
			},
			"Glass": {
				"categories": ["Resources"],
				"description": "Created when sand is burned or set on fire. Can be broken by heavy impacts or by fist."
			},
			"Gold": {
				"categories": ["Resources"],
				"description": "A very valuable and stretchable material."
			},
			"Goo": {
				"description": "A sticky substance that can stick together to objects when touched."
			},
			"Grass": {
				"categories": ["Resources"],
				"description": "An organic substance found in terra and forest planets. Often green, but can be other colors. Useful for planting seeds for agriculture."
			},
			"GravityGenerator": {
				"categories": ["Electrical"],
				"description": "Generates an artificial gravity field when powered on. The gravity field only affects players, not individual parts. The amount of gravity can also be configureed, but the more gravity the higher amount of power needed. Only works in space, not inside planets.",
				"events": {
					"Loop": true
				},
				"properties": {
					"Gravity": {
						"constraints": {
							"default": 1,
							"max": 1.5,
							"min": 0.15
						},
						"description": "The amount of gravity within the influence of the GravityGenerator, measured in Gs.",
						"type": "number"
					}
				}
			},
			"Gun": {
				"categories": ["Weapons"],
				"description": "Fires a harmful bullet when triggered.\nMust be supplied with ammo in order to function.\nFor example, you need an iron bin with 1 or more iron directly attached to it to work."
			},
			"Gyro": {
				"categories": ["Electrical"],
				"description": "Stabilizes vehicles and structures by pointing upwards. Useful for mechs or orientating structures to the correct rotation. The gyro can also be configured to seek objects and players.\n\nWhen powered, the gyro will follow its seek commands that can be configured using hammer.\nThe gyro has commands that allow it to find and seek objects and players.\n\nAn example of gyro's seek configuration includes \"Player1 Player2\" which will seek and aim towards the nearest player.\n\nPutting \"Radar\" at the beginning of the seek configuration will make it target parts instead. For example, \"Radar Gold Copper\" will find the nearest Gold or Copper deposit.\n\nPutting \"AllExcept\" will make the seeker target everything except the given list, basically inverting it. For example, \"AllExcept Player1 Player2\" will target \"Player3\" or \"Player\"4 but not \"Player1\".\n\nThe commands \"Min\" and \"Max\" set the minimum or maximum distance the seeker will target. For example, \"Min20 Max500\" will make the seeker only target objects within 500 studs and more than 20 studs away.\n\nTriggerWhenSeeked will trigger all connected parts every second when the Seek configurable is satisfied\n\n\"TrigMin\" and \"TrigMax\" work the same as \"Min\" and \"Max\" but it's for the trigger signal, trigger signal will only be sent if the above property is true.\n\nPutting \"Sun\" as part of the list will make the seeker automatically target the main stellar body in the system.\n\nGyros also have a property called MaxTorque. This allows you to control the max force on the gyro to stabilize it.",
				"events": {
					"Configured": true,
					"Loop": true
				},
				"methods": {
					"PointAt": {
						"description": "Points the gyro towards the specified position.",
						"parameters": [
							["position: Vector3", "The position for the gyro to look at."]
						]
					}
				},
				"properties": {
					"DisableWhenUnpowered": {
						"description": "Determines whether this gyro should be disabled while it does not have power.",
						"type": "boolean"
					},
					"MaxTorque": {
						"constraints": {
							"max": 10000000000.0,
							"min": 0
						},
						"description": "The maximum force in each axis the gyro can exert.",
						"type": "Vector3"
					},
					"Seek": {
						"constraints": {
							"default": ""
						},
						"description": "The seek commands.",
						"type": "string"
					},
					"TriggerWhenSeeked": {
						"description": "Determines whether to send out a trigger signal when the gyro detects something to seek as determined by the Seek configurable.",
						"type": "boolean"
					}
				}
			},
			"HalfSphere": {
				"categories": ["Templates"],
				"description": "A half sphere shaped template object."
			},
			"Handle": {
				"categories": ["Tools"],
				"description": "A handle which can be equipped when a player touches it, turning all connected parts into an equipable tool.",
				"properties": {
					"Swing": {
						"constraints": {
							"default": 1,
							"max": 2,
							"min": 0,
							"step": 1
						},
						"description": "The type of swinging for this tool. Swing 0: Doesn't swing on click; 1: Swings downward on click; 2: Follows the mouse cursor",
						"type": "number"
					},
					"ToolName": {
						"constraints": {
							"default": "Handle"
						},
						"description": "The name of the tool.",
						"type": "string"
					},
					"TriggerMode": {
						"constraints": {
							"default": 0,
							"max": 2,
							"min": 0,
							"step": 1
						},
						"description": "Determines when this Handle should send trigger signals. TriggerMode 0: Trigger on mouse down; 1: Trigger on mouse up; 2: Trigger on mouse down and mouse up. If TriggerMode is set to anything else, it will trigger when the key TriggerMode is set to is pressed.",
						"type": "number"
					}
				}
			},
			"Hatch": {
				"categories": ["Logic"],
				"description": "Acts as a chute when active/gray, but when black or inactive it acts as a normal object.",
				"extends": "Switch"
			},
			"HeatPipe": {
				"description": ""
			},
			"HeatPump": {
				"events": {
					"Loop": true
				}
			},
			"HeatValve": {
				"events": {
					"Configured": true,
					"OnClick": true
				},
				"properties": {
					"SwitchValue": {
						"description": "Determines whether the switch is active or not.",
						"type": "boolean"
					}
				}
			},
			"Heater": {
				"categories": ["Electrical"],
				"description": "Generated heat when powered by electricity. Glows red hot while functioning.\nCan be used as insulation in cold environments. Heat amount is based on size 10 * X * Y * Z / 16"
			},
			"Heatshield": {
				"categories": ["Electrical"],
				"description": "Generates a 300 stud radius area that protects all players and **only players** within the vicinity from temperature damage."
			},
			"Helium": {
				"categories": ["Resources"],
				"description": "A light invisible odorless gas, floats up."
			},
			"Hologram": {
				"categories": ["Electrical"],
				"description": "Using our brand new Multi-Dimensional Holographic Projection Technology™ you are able to create a stationary clone with only the ID of the user provided!.",
				"events": {
					"Configured": true
				},
				"properties": {
					"UserId": {
						"constraints": {
							"default": 1,
							"max": 10000000000.0,
							"min": 1,
							"step": 1
						},
						"description": "The UserId of the player for the Hologram to display.",
						"type": "number"
					}
				}
			},
			"Hull": {
				"categories": ["Templates"],
				"description": "Is able to float in the water, as well as carry objects attached to it. Primarily used for creating boats and other water craft."
			},
			"Hydrogen": {
				"categories": ["Resources"],
				"description": "A gas commonly found in stars and gas giants."
			},
			"Hydroponic": {
				"categories": ["Electrical"],
				"description": "Grows grass and wood from water, turning attached water bins into either wood, sticks or grass. Incredibly useful for space bases or bases in areas devoid of life.",
				"events": {
					"Loop": true
				},
				"properties": {
					"Grow": {
						"constraints": {
							"default": "Wood"
						},
						"description": "The material to grow from the Hydroponic.",
						"type": "string"
					}
				}
			},
			"HyperDrive": {
				"categories": ["Propulsion"],
				"description": "A device used to travel at faster than light speeds to other regions of the universe. \nSimply input the coordinates to your destination and have a sufficient amount of fuel, and you'll be on your way to your destination.\nTo initiate warping, power the hyperdrive and trigger it. When warping, the hyperdrive will be anchored to prevent any movement.\n\nThe power required for warping will be dependent on the distance travelled, as well as the size of the object being transported.\nThe amount of power required will be displayed in the hyper drive, shown in the red text. \n\nAll of the parts connected to the hyperdrive and every player sitting will be teleported, however any free floating parts or standing up players will be sucked into the vaccum of space, so be careful.\n\nThe red text at the bottom of the hyperdrive indicates how much power is needed to perform the jump.\n\nMake sure the numbers on the hyperdrive is facing up to ensure correct stud alignment.",
				"events": {
					"Configured": true,
					"Triggered": true
				},
				"methods": {
					"GetRequiredPower": {
						"description": "Returns the amount of power required for the warp.",
						"type": "number"
					}
				},
				"properties": {
					"Coordinates": {
						"description": "The coordinates to warp to.",
						"type": "Coordinate"
					}
				}
			},
			"Ice": {
				"categories": ["Resources"],
				"description": "A compact natural resource found in tundra planets and the top of a few mountains. It is a slippery material, and has very low friction which can be useful in some devices. Burning ice results in water."
			},
			"Igniter": {
				"categories": ["Logic"],
				"description": "Sets alight parts within the immediate vicinity when triggered.",
				"events": {
					"Triggered": true
				}
			},
			"ImpulseCannon": {
				"categories": ["Weapons"],
				"description": "Blasts a harmless burst of energy which sends anything nearby soaring at a high velocity.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Instrument": {
				"categories": ["Logic"],
				"description": "A device used to measure special values such as current speed and temperature.\n\nThese are the types as follows:\nSpeed - Speed / velocity of the instrument\nRotSpeed - Rotational speed of the instrument\nTemperature - Temperature of the local environment\nTime - Current time (relative to the region and scaled to earth time)\nPower - Total amount of power in a wire system, for example attaching it to a powercell with 200 power will display 200 power.\nSize - The dimensions of the part it is attached to.\nPosition - The position of the current instrument.\nTemperatureF - Temperature but in Fahrenheit.",
				"events": {
					"Loop": true
				},
				"methods": {
					"GetReading": {
						"parameters": ["typeId: number"],
						"returns": ["number | Vector3"]
					}
				},
				"properties": {
					"Type": {
						"description": "The type of instrument readout to display on the instrument.",
						"type": "InstrumentType"
					}
				}
			},
			"Insulation": {
				"description": ""
			},
			"IonRocket": {
				"categories": ["Electrical"],
				"description": "An IonRocket allows space flight. When powered, it will propel force dependent on the Propulsion setting, which you can configure with the hammer tool. \n\t\tThe arrow indicates the direction the ionrocket will propel to when powered.",
				"extends": "Thruster"
			},
			"Iron": {
				"categories": ["Resources"],
				"description": "A compact and durable material, commonly found in planets. It is used often in crafting, and is a very important resource to have."
			},
			"Jade": {
				"categories": ["Resources"]
			},
			"Keyboard": {
				"categories": ["Logic"],
				"description": "Similar to a button, except is programmable to take more than one key input.\nCan be attached to a vehicle seat or clicked by a player.",
				"events": {
					"KeyPressed": true,
					"UserInput": true,
					"TextInputted": {
						"parameters": [
							"userId: number",
							[
								"text: string",
								"The text that was inputted.\n**NOTE:** The text contains a newline character."
							]
						]
					}
				},
				"methods": {
					"SimulateKeyPress": {
						"parameters": ["key: string?", "player: string"]
					},
					"SimulateTextInput": {
						"parameters": ["input: string?", "player: string"]
					},
					"SimulateUserInput": {
						"unknowntype": true
					}
				}
			},
			"Kiln": {
				"categories": ["Electrical"],
				"description": "Turns attached sand bins into glass.",
				"events": {
					"Loop": true
				}
			},
			"Laser": {
				"categories": ["Weapons", "Electrical"],
				"description": "Fires a concentraded beam of energy when powered, which can be used to damage and set objects on fire. \n\tHas a Range of 1000 studs.\n\tPrimarily used as a weapon in space combat situations.\n\tWhile it can damage objects effectively, it cannot damage energy shields.",
				"events": {
					"Loop": true
				},
				"properties": {
					"DamageOnlyPlayers": {
						"description": "Determines if this laser is only allowed to damage players and not materials.",
						"type": "boolean"
					}
				}
			},
			"Lava": {
				"categories": ["Resources"],
				"description": "A liquid used for fueling many devices such as rockets and engines."
			},
			"Lead": {
				"categories": ["Resources"],
				"description": "An uncommon material used in protection against radiation and weapon manufacturing."
			},
			"LifeSensor": {
				"categories": ["Logic"],
				"description": "Senses and detects organic life up to a distnace of 2000 studs. Used mainly in programming, as is used in alien technology to hunt down organisms such as players.\nHas a special programmable event called 'GetReading()' which returns a table of all organisms, with their positions and names.\nExample:\n{\n\tPlayer1 = Vector3.new(5, 5, 5);\n}",
				"methods": {
					"GetPlayers": {
						"description": "Returns a table where the indexes are player names and the keys are player positions.",
						"returns": [
							[
								"{ [string]: Vector3 }",
								"A dictionary of player usernames to their world positions."
							]
						]
					},
					"GetReading": {
						"description": "Returns a table where the indexes are humanoid names and the keys are humanoid positions.",
						"returns": [
							[
								"{ [string]: Vector3 }",
								"A dictionary of humanoid names to their world positions."
							]
						]
					},
					"ListPlayers": {
						"description": "Returns an array of player UserIds.",
						"returns": ["{ number }"]
					}
				}
			},
			"Light": {
				"categories": ["Electrical"],
				"description": "Emits light when powered with electricity. Can be colored in different ways, changing the light color",
				"events": {
					"Configured": true
				},
				"methods": {
					"SetColor": {
						"parameters": ["color: Color3"]
					}
				},
				"properties": {
					"Brightness": {
						"constraints": {
							"default": 1,
							"max": 2,
							"min": 0
						},
						"description": "The brightness of the light.",
						"type": "number"
					},
					"LightRange": {
						"constraints": {
							"default": 60,
							"max": 60,
							"min": 1
						},
						"description": "The range of the light.",
						"type": "number"
					},
					"Shadows": {
						"description": "Whether or not the light will cast shadows.",
						"type": "boolean"
					}
				}
			},
			"LightBridge": {
				"categories": ["Electrical"],
				"description": "Fires a beam of solid light that can be walked on.",
				"events": {
					"Configured": true,
					"Loop": true
				},
				"properties": {
					"BeamColor": {
						"description": "The color of the bridge's beam.",
						"type": "Color3"
					}
				}
			},
			"LightTube": {
				"categories": ["Electrical"],
				"description": "Emits light when powered with electricity. Can be colored in different ways, changing the light color",
				"methods": {
					"SetColor": {
						"parameters": ["color: Color3"]
					}
				}
			},
			"Magnesium": {
				"categories": ["Resources"],
				"description": "A shiny gray solid that is flammable, randomly ignites when touching stone."
			},
			"Marble": {
				"description": "A compact and durable material. Primarily used as a building material for decorations."
			},
			"Melter": {
				"categories": ["Electrical"],
				"description": "Turns attached ice bins into water when powered.",
				"events": {
					"Loop": true
				}
			},
			"Microcontroller": {
				"categories": ["Logic"],
				"description": "Runs computer programs when triggered and powered.\nWhen triggered by an activator polysilicon, it will run code.\nWhen triggered by a deactivator polysilicon, it will stop running code.\nFor more information on pilot.lua or the game's programming system, visit the programming tutorial or visit the wiki for the game online.\nRequires 5 power per second when running.\n\nMicrocontroller Globals:\nvoid **Beep**(number Pitch) - default pitch 1, max 10 beeps playing concurrently\nobject **GetPort**(number PortID) - returns port configured with 'PortID'\nobject **GetPartFromPort/GetPartsFromPort**(object/number Port, string ClassName) - gets a part connected to port 'Port' with classname 'ClassName'\nvoid **TriggerPort**(object/number Port) - sends a trigger signal from the port 'Port'\n\nGlobals also include all lua globals and all rbx.lua globals,\nexcept for roblox script-related or game-related globals such as workspace, game, stats, time, etc.",
				"events": {
					"Configured": true,
					"Loop": true,
					"OnClick": true
				},
				"methods": {
					"Receive": {
						"description": "Waits for data to be received.",
						"codesample": "-- Microcontroller A\nlocal function receive(sender: Microcontroller, command: string, ...: any)\n    if command == \"Tell me a joke.\" then\n        sender:Send(\"Why did the chicken cross the road?\")\n    elseif command == \"I don't know, why?\" then\n        sender:Send(\"To get to the other side.\")\n    end\nend\n\nwhile true do\n    receive(Microcontroller:Receive())\nend\n\n-- Microcontroller B\nlocal otherMicrocontroller = GetPartFromPort(1, \"Microcontroller\")\n\nlocal function receive(sender: Microcontroller, command: string, ...: any)\n    if command == \"Why did the chicken cross the road?\" then\n        sender:Send(\"I don't know, why?\")\n    elseif command == \"To get to the other side.\" then\n        sender:Send(\"HAHAHA that's SO FUNNY!!!!\")\n        sender:Shutdown() -- kill enemy\n    end\nend\n\ntask.spawn(function()\n    while true do\n        receive(Microcontroller:Receive())\n    end\nend)\n\notherMicrocontroller:Send(\"Tell me a joke.\")",
						"returns": [
							[
								"sender: Microcontroller",
								"The microcontroller sending the data."
							],
							[
								"...: any",
								"The parameters sent through by the other microcontroller."
							]
						]
					},
					"Send": {
						"description": "Sends the data you provide to a remote microcontroller. Parts you pass will be based on your microcontroller's context.",
						"codesample": "-- Microcontroller A\nlocal function receive(sender: Microcontroller, command: string, ...: any)\n    if command == \"Tell me a joke.\" then\n        sender:Send(\"Why did the chicken cross the road?\")\n    elseif command == \"I don't know, why?\" then\n        sender:Send(\"To get to the other side.\")\n    end\nend\n\nwhile true do\n    receive(Microcontroller:Receive())\nend\n\n-- Microcontroller B\nlocal otherMicrocontroller = GetPartFromPort(1, \"Microcontroller\")\n\nlocal function receive(sender: Microcontroller, command: string, ...: any)\n    if command == \"Why did the chicken cross the road?\" then\n        sender:Send(\"I don't know, why?\")\n    elseif command == \"To get to the other side.\" then\n        sender:Send(\"HAHAHA that's SO FUNNY!!!!\")\n        sender:Shutdown() -- kill enemy\n    end\nend\n\ntask.spawn(function()\n    while true do\n        receive(Microcontroller:Receive())\n    end\nend)\n\notherMicrocontroller:Send(\"Tell me a joke.\")",
						"parameters": [
							[
								"...: any",
								"The parameters to send to the other microcontroller."
							]
						]
					},
					"Shutdown": {
						"description": "Kills the microcontroller."
					}
				},
				"properties": {
					"Code": {
						"constraints": {
							"default": ""
						},
						"description": "The code to be executed on this microcontroller.",
						"type": "string"
					},
					"StartOnSpawn": {
						"description": "Whether or not to start the Microcontroller when it spawns.",
						"type": "boolean"
					}
				}
			},
			"Microphone": {
				"categories": ["Logic"],
				"description": "Used in programming. Takes user's inputs.",
				"events": {
					"Chatted": {
						"description": "Fires when a user speaks in chat. Also registers hidden commands like '/e dance' or '/console'.",
						"parameters": [
							"userId: number",
							["message: string", "The unfiltered message send by the user."]
						]
					}
				}
			},
			"MiningLaser": {
				"categories": ["Electrical"],
				"description": "Fires a concentraded beam of energy when powered, which is used to mine objects such as asteroids, mountains and ore deposits.\nThis works similar to an extractor, except it indirectly extracts power from other natural sources. \n\nWhen the laser hits an object, it will extract resources from that object and put it in attached bins.\nVery useful for creating mining vehicles to extract resources.\n\nUnlike the extractor however, this is far more efficient.\nThe MiningLaser outputs 2 resources per second, unlike the extractor which only does 2. This means the laser is 1.5x more efficient.\n\nHowever, the mining laser generates more heat than the extractor. Atleast 2 coolers are recommended per mining laser.",
				"extends": "Extractor"
			},
			"Modem": {
				"categories": ["Electrical"],
				"description": "A computer networking object that allows you to send, save and get messages cross-region.\nThis is an incredibly useful part to set up an internet of sorts and send data to other computers.\n\nThe modem has 5 programmable functions to it.\nSendMessage(Data, NetworkId defaults to 0) sends a message (specifically through messaging service) carrying data.\nMessageSent is a special event that can be connected to via Connect. Has one argument called Data which is the data received. \nPostRequest saves a string of data to the WoS internet ':PostRequest(Domain, Data)' (modem must be locked)\nGetRequest gets a string of data from the WoS internet ':GetRequest(Domain)'\nRealPostRequest send a POST request to the real www ':(Domain, DataPassed, AsyncBool, FuncToSendResultsTo, OptionalHeaders)'",
				"events": {
					"Loop": true,
					"MessageSent": {
						"unknowntype": true
					}
				},
				"methods": {
					"GetAsync": {
						"unknowntype": true,
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/HttpService#GetAsync"
					},
					"GetRequest": {
						"parameters": ["domain: string"],
						"returns": ["string"]
					},
					"PostAsync": {
						"unknowntype": true,
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/HttpService#PostAsync"
					},
					"PostRequest": {
						"parameters": ["domain: string", "data: string"]
					},
					"RealPostRequest": {
						"deprecated": true,
						"parameters": [
							"domain: string",
							"data: string",
							"asyncBool: boolean",
							"transformFunction: (...any) -> ()",
							"optionalHeaders: { [string]: any }?"
						],
						"returns": ["{ response: string, success: boolean }"]
					},
					"RequestAsync": {
						"unknowntype": true,
						"learnmore": "https://create.roblox.com/docs/reference/engine/classes/HttpService#RequestAsync"
					},
					"SendLocalMessage": {
						"unknowntype": true
					},
					"SendMessage": {
						"parameters": ["data: string", "id: number"]
					},
					"UrlEncode": {
						"unknowntype": true
					}
				},
				"properties": {
					"NetworkID": {
						"constraints": {
							"default": "M1"
						},
						"description": "The ID of the network this modem should connect to.",
						"type": "string"
					}
				}
			},
			"Motor": {
				"categories": ["Electrical"],
				"description": "Spins objects attached to the hinge at the front when powered.",
				"events": {
					"Configured": true
				},
				"properties": {
					"Power": {
						"constraints": {
							"default": 0.5,
							"max": 1,
							"min": -1
						},
						"description": "Determines the amount of power used to drive the motor. This affects the torque and power consumption. Negative values are reverse.",
						"type": "number"
					},
					"Ratio": {
						"constraints": {
							"default": 1,
							"max": 10,
							"min": 0.001
						},
						"description": "Determines the gear ratio applied to the motor in terms of the multiplier on the RPM. A value of 0.1 indicates a 10:1 ratio, where RPM is 1/10th and torque is 10x when compared to the default setting of 1.",
						"type": "number"
					}
				}
			},
			"MustardGas": "A heavy chemical warfare weapon used to damage organisms. Gas Masks nullify the effects of this gas.",
			"Neon": {
				"description": "A building decoration material that glows by itself without requiring power."
			},
			"Neutronium": {
				"categories": ["Resources"],
				"description": "The most durable obtainable material in the game. It is a strange form of matter found from the crusts of neutron stars. Due to the nature of neutron stars, neutronium is the hardest known material as well as the densest known material in the universe."
			},
			"NitrogenOxide": {
				"categories": ["Resources"],
				"description": "A light gas emitted from machines such as extractors and rockets. Inhaling can cause severe lung damage."
			},
			"NuclearWaste": {
				"categories": ["Resources"],
				"description": "A highly radioactive material produced from spent Uranium in a reactor."
			},
			"Obamium": "An ancient artifact left behind from an alternate reality.",
			"Obelisk": {
				"categories": ["Electrical"],
				"description": "An object designed to attract aliens to the region. Emits an ominous noise when powered.\nMust be anchored and powered in order to function. Must also be open to the sky. Only one obelisk in a region can be powered at a time.\nWhen active, it attracts an Alien every 300 seconds.\n**Use at your own risk.**",
				"events": {
					"Loop": true
				}
			},
			"ObjectDetector": {
				"methods": {
					"GetLastHitData": {
						"type": "ObjectDetectorHitData"
					},
					"GetLastHitPart": {
						"returns": ["PilotObject"]
					}
				},
				"properties": {
					"MaxDistance": {
						"constraints": {
							"default": 1000,
							"max": 1000,
							"min": 0
						},
						"description": "The range that it can detect an object. Must be between 0 and 1000.",
						"type": "number"
					},
					"TriggerAtDistance": {
						"constraints": {
							"max": 1000,
							"min": 0
						},
						"description": "The range that it will trigger if it detect an object.",
						"type": "Vector2"
					}
				}
			},
			"Oil": {
				"categories": ["Resources"],
				"description": "A liquid used in refineries to produce Gasoline which can be used for fueling engines and rockets and Petroleum which can be used to make plastic."
			},
			"Perfectium": {
				"categories": ["Resources"],
				"description": "The perfect material. Unbreakable, very stretchable, but is impossibly rare. The very sight of it makes you wonder the imperfections of human beings."
			},
			"Petroleum": {
				"categories": ["Resources"],
				"description": "A gas used for creating plastic."
			},
			"Pipe": {
				"description": "Is able to transfer liquids and gases between containers and other objects when connected by pipes."
			},
			"Piston": {
				"events": {
					"Configured": true
				},
				"methods": {
					"SetPosition": {
						"unknowntype": true
					}
				},
				"properties": {
					"Position1": {
						"constraints": {
							"default": 0,
							"max": 100,
							"min": 0
						},
						"description": "Determines the position of the first state of the piston.",
						"type": "number"
					},
					"Position2": {
						"constraints": {
							"default": 100,
							"max": 100,
							"min": 0
						},
						"description": "Determines the position of the second state of the piston.",
						"type": "number"
					},
					"Speed": {
						"constraints": {
							"default": 10,
							"max": 50,
							"min": 0
						},
						"description": "Determines the speed of the piston.",
						"type": "number"
					}
				}
			},
			"Plasma": {
				"categories": ["Resources"],
				"description": "A gas found abundant in stars, and can be harvested from them. Used primarily for weapons, as well as electrical components."
			},
			"PlasmaCannon": {
				"categories": ["Weapons"],
				"description": "Fires an orb of unstable plasma out of the barrel exploding on impact.\nNeeds to be fueled with 500 power and 50 helium or 1 plasma to fire.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Plastic": {
				"description": "A cheap material made from petroleum and Coal through polymerisation inside assemblers.",
				"events": {
					"Loop": true
				}
			},
			"Plutonium": {
				"description": "A highly radioactive compound used in manufacturing nuclear explosives."
			},
			"PlutoniumCore": {
				"description": "A volatile core close to going supercritical used in recipes for Nuclear explosives."
			},
			"Polysilicon": {
				"categories": ["Logic"],
				"description": "A special electronic material used to send special signals to certain objects.\n\nHas a special configuration called Frequency which dictates how many times the polysilicon will repeat a trigger.\nFor example, if a polysilicon was attached to a pulley, having a frequency of 5 and triggered, the pulley will be activated 5 times.",
				"events": {
					"Configured": true
				},
				"properties": {
					"Frequency": {
						"constraints": {
							"default": 1,
							"max": 10,
							"min": 1,
							"step": 1
						},
						"description": "The amount of times to activate the Polysilicon from a single trigger.",
						"type": "number"
					},
					"PolysiliconMode": {
						"description": "The mode of the Polysilicon. Each mode results in different behaviors for objects.",
						"type": ["Activate", "Deactivate", "FlipFlop"]
					}
				}
			},
			"Port": {
				"categories": ["Logic"],
				"description": "An object used primarily in programming. Allows a microcontroller and computers to interact with their surroundings.",
				"events": {
					"Triggered": true
				},
				"properties": {
					"PortID": {
						"constraints": {
							"default": 1,
							"max": 10000000000.0,
							"min": 0,
							"step": 1
						},
						"description": "The ID of this port used to utilize this port by connected microcontrollers.",
						"type": "number"
					}
				}
			},
			"PowerCell": {
				"description": "Stores electricity, and is used to power many devices using wires or by directly attaching it.\nHas a limit of 125000.",
				"extends": "ContainerObject"
			},
			"Primer": "A component used in crafting recipes for a few objects.",
			"Propeller": {
				"categories": ["Propulsion"],
				"description": "Propellers propel forward when spun.\nForward direction indicated by white spot.\nDoes not work in space or non atmospheric planets.",
				"events": {
					"Loop": true
				}
			},
			"Prosthetic": {
				"description": "An artificial part that can be attached to players in exchange for a limb.\nThe limb configuration can be configureed to be the limb you want to have for a prosthetic, for example configuring it to be \"Right Leg\" will have the prosthetic attach itself to your character.\nSimply touch the prosthetic, and it will automatically be attached to your body. This process is extremely unhealthy, however, and may result in short-term complications.\n\nParts can be attached to the prosthetic, allowing many uses for the prosthetic limb.\n\nProsthetic limbs are also electrically conductable, acting as a wire.\n\nHeavily damages the character once attached.\nProsthetics can't have more than 50 parts attached to them.\n \t",
				"events": {
					"Configured": true
				},
				"properties": {
					"Limb": {
						"constraints": {
							"default": "Left Arm"
						},
						"description": "The name of the limb that this Prosthetic is for.",
						"type": "string"
					}
				}
			},
			"ProximityButton": {
				"events": {
					"Configured": true,
					"PromptButtonHoldBegan": {
						"unknowntype": true
					},
					"PromptButtonHoldEnded": {
						"unknowntype": true
					},
					"PromptTriggerEnded": {
						"unknowntype": true
					},
					"PromptTriggered": {
						"unknowntype": true
					}
				},
				"properties": {
					"GamepadKeyCode": {
						"description": "The name of the key that will trigger the proximity prompt on a gamepad.",
						"unknowntype": true
					},
					"HoldDuration": {
						"constraints": {
							"default": 0.5
						},
						"description": "The length of time that the proximity prompt has to be held down for.",
						"type": "number"
					},
					"KeyboardKeyCode": {
						"description": "The name of the key that will trigger the proximity prompt on a keyboard.",
						"unknowntype": true
					},
					"MaxActivationDistance": {
						"constraints": {
							"default": 5,
							"max": 50,
							"min": 0
						},
						"description": "The range of the prompt, from 0 - 50.",
						"type": "number"
					},
					"ObjectText": {
						"constraints": {
							"default": ""
						},
						"description": "The text of the proximity prompt.",
						"type": "string"
					},
					"RequiresLineOfSight": {
						"constraints": {
							"default": true
						},
						"description": "Whether a line of sight to the center of the part is required for the prompt to become visible.",
						"type": "boolean"
					}
				}
			},
			"Pulverizer": {
				"categories": ["Electrical"],
				"description": "Turns attached stone bins into sand. Once powered, the pulverizer will pulverize any stone bins attached into sand."
			},
			"Pump": {
				"categories": ["Electrical"],
				"description": "Pumps liquid from the environment into attached containers. For example, a pump located in the ocean will pump water when powered.",
				"events": {
					"Configured": true,
					"Loop": true
				},
				"properties": {
					"LiquidToPump": {
						"constraints": {
							"default": "Water"
						},
						"description": "The name of the liquid to extract using the pump.",
						"type": "string"
					}
				}
			},
			"Quartz": {
				"categories": ["Resources"],
				"description": "A translucent and malleable crystal useful for making durable windows."
			},
			"RTG": {
				"categories": ["Electrical"],
				"description": "Creates electricity from decaying radioactive elements."
			},
			"Radar": {
				"description": "An instrument that shows a 2D top-down representation of Earth.",
				"events": {
					"Loop": true
				}
			},
			"Rail": {
				"description": "Slides and moves objects along its surface when powered and triggered. Useful for creating retractable pistons and actuators, for turrets or other retractable devices.\n\t\t\nRails will only move objects connected on the relative top surface of the rail.\n\t\t\nThe rail can only be activated through the use of polysilicons.\nMode 0 or activating polysilicons will set the rail to position1.\nMode 1 or deactivating polysilicons will set the rail to position2.\nMode 2 or flip flop polysilicons will act like a switch, setting to position2 if position1 and vice versa.\n\t\t\nHas 2 configurations, position1 and position2.\n\t\t\nBoth configurations should be between 0 and 100. These are percents of where the attached objects should slide to.\nFor example, if a rail was 50 studs long and position2 was 50 or 50%, the attached objects will slide to the middle or at 25 studs.\n\t\t\nDue to roblox physics, rails may act weirdly. To prevent this from happening, you should always place your rails first before anything else. It is recommended to attach objects on the rail after the rail is safely placed down.\n",
				"methods": {
					"SetPosition": {
						"description": "Sets the position of the rail.",
						"parameters": ["depth: number"]
					}
				},
				"properties": {
					"Position1": {
						"constraints": {
							"default": 0,
							"max": 100,
							"min": 0
						},
						"description": "Determines the position of the first state of the rail.",
						"type": "number"
					},
					"Position2": {
						"constraints": {
							"default": 100,
							"max": 100,
							"min": 0
						},
						"description": "Determines the position of the second state of the rail.",
						"type": "number"
					},
					"TweenTime": {
						"constraints": {
							"default": 1,
							"max": 60,
							"min": 0.5
						},
						"description": "Determines the time it takes for the rail to change positions.",
						"type": "number"
					}
				}
			},
			"Railgun": {
				"categories": ["Weapons", "Electrical"],
				"description": "Fires a piercing rail at high speeds. A long range weapon. Requires rails and electricity for ammo. Damage increases for every 10 studs of length.pierce if the hit part is destroyed. Must be at least have a width and height of 6 and at least a length of 30 to function.\n\t\nWhile Railgun is similar to Artillery, the Railgun is nearly instant while Artillery is a projectile weapon.\n\nRequires to charge for one minute before it can fire. While charging and when charged, it creates large amount of heat. Charging status resets when this part is damaged.\n\nWhen it is finished charging, it will stop creating a sound. At that point, it must be triggered and supplied by a rail bin in order to fire.",
				"events": {
					"Damaged": true,
					"Loop": true,
					"Triggered": true
				}
			},
			"Reactor": {
				"description": "Generates steam using water and heat from radiation.\nUp to 4 pieces of uranium can be inserted into the reactor as fuel.\nIf the temperature is above 400, it will begin to turn water into steam (rate dependent on temperature).\nIf the temperature exceeds 1200 F, a meltdown will occur.\nThe Reactor fuel status can be acquired through the :GetFuel() method with a microcontroller.\nPolysilicon is used to control a reactor, and fuel must be ejected manually:\n\nActivation lowers the control rods, decreasing reaction rate.\nDeactivation raises the control rods, allowing fuel to react.\nFlipFlop will eject fuel or waste from the fuel rod with the least fuel.",
				"methods": {
					"GetFuel": {
						"returns": ["{ [number]: number }"]
					},
					"GetTemp": {
						"returns": ["number"]
					}
				},
				"properties": {
					"Alarm": {
						"description": "Determines whether the reactor alarm system is enabled for when the reactor is near meltdown temperature.",
						"type": "boolean"
					}
				}
			},
			"Refinery": {
				"categories": ["Electrical"],
				"description": "Turns oil into Petroleum and Gasoline.",
				"events": {
					"Loop": true
				}
			},
			"RegionCloaker": {
				"categories": ["Electrical"],
				"description": "Hides a certain region from players, making the coordinates not appear on their screen. \n\tRegion can only be un/cloaked every 25 seconds. So if you unpower the RegionCloaker(uncloaks), you must wait 25 seconds before powering it again to ensure the region gets cloaked."
			},
			"ReinforcedGlass": {
				"description": "A stronger version of glass, however is less malleable."
			},
			"Relay": {
				"description": "A powerful transmitter capable of transmitting trigger signals and resources/power between different regions.\nIt is a more powerful version of the antenna and transporter.\n\nUnlike the antenna, the relay has 2 modes, mode 0 and mode 1.\nMode 0 sends resources/power and trigger signals, while mode 1 receives it.\n\nUnlike the antenna, it can also transfer power in inactive regions or regions without players in them.\nThis means that you can connect a relay to your main base, warp away without anyone in the base, and still have the relay get the sufficient amount of power.\n\nHowever, you should have only one sending relay per coordinate, as conflicts can occur if there are 2 or more relays in the region/coordinates sending power or signalsith the same ID.\nOn the other hand, there can be an infinite number of receivers but the power/resources will be distributed evenly among them.\n\nFor example, let's say a relay network has a total output of 500 power and 25 iron. If there are 5 active receivers, each of them will get 100 power and 5 iron.\n\nWhen the relay is red, it means it not functioning. When it turns green, it is properly linked up to another relay or is sending signals.\n\t",
				"properties": {
					"LinkerID": {
						"description": "The ID of the relay, to send or take materials to or from other relays with the same ID.\n\n**Range:** 1 to 10000000000\n\n**Default:** 1",
						"type": "number"
					},
					"Mode": {
						"description": "The mode of the relay. Send outputs materials to other receiving relays; Receive receives materials from sending relays.",
						"type": "RelayMode"
					}
				}
			},
			"RemoteControl": {
				"categories": ["Logic"],
				"description": "Similar to an antenna, but sends trigger signals forward wirelessly when triggered.",
				"events": {
					"OnClick": true,
					"Triggered": true
				},
				"properties": {
					"RemoteControlRange": {
						"constraints": {
							"default": 120,
							"max": 500,
							"min": 1
						},
						"description": "The range in studs at which signals will be transmitted.",
						"type": "number"
					}
				}
			},
			"Rocket": {
				"categories": ["Propulsion"],
				"description": "A propulsion device that consumes gasoline.",
				"extends": "Thruster"
			},
			"Rotor": {
				"categories": ["Propulsion"],
				"description": "Provides vertical height when spun, and only works in oxygen planets.\nThe spin speed determines the height, and the tilt of the rotor determines the forward propulsion of the rotor.",
				"events": {
					"Loop": true
				}
			},
			"RoundWedge": {
				"categories": ["Templates"],
				"description": "A block rounded on one edge, or 1/4 of a cylinder."
			},
			"RoundWedge2": {
				"categories": ["Templates"],
				"description": "A block rounded inwards on one edge."
			},
			"Router": {
				"description": "",
				"properties": {
					"RouterID": {
						"constraints": {
							"default": "R1"
						},
						"description": "The ID of this router, to transmit to others with the same ID.",
						"type": "string"
					}
				}
			},
			"Rubber": {
				"description": "A textile resource used in manufacturing many industrial objects."
			},
			"Ruby": {
				"categories": ["Resources"]
			},
			"RustedMetal": {
				"categories": ["Resources"],
				"description": "A weathered piece of metal."
			},
			"Sail": {
				"description": "Utilizes the wind to move forward.",
				"events": {
					"Loop": true,
					"OnClick": true,
					"Triggered": true
				}
			},
			"Sand": {
				"categories": ["Resources"],
				"description": "An abundant resource that can be found in the shores of terra and forest planets, the sea floors of ocean planets and in the dunes of desert planets. When burnt, the sand becomes glass."
			},
			"Scanner": {
				"methods": {
					"CalculateCost": {
						"description": "Calculates the cost of performing a scan with the given range.",
						"parameters": ["range: number?"],
						"returns": ["number"]
					},
					"GetDistance": {
						"description": "Gets the approximate distance to the part. Accuracy falls off exponentially.",
						"parameters": ["part: PilotObject"],
						"returns": ["number"]
					},
					"GetPartsInRange": {
						"description": "Does a (power hungry) query for all parts in the configured (or specified) range up to 1024 studs. Can optionally filter for a class name, but many use cases will prefer to store part objects in a set.",
						"parameters": ["range: number?", "className: string?"],
						"returns": ["{PilotObject}"]
					},
					"Locate": {
						"description": "Uses GPS to locate a part (uses :GetDistance() internally). The scanners you provide should be on different axes and stuff. You need at least 3 to correctly identify a position.",
						"parameters": ["part: PilotObject", "scanners: {Scanner}"],
						"returns": ["Vector3"]
					}
				},
				"properties": {
					"Range": {
						"constraints": {
							"default": 64,
							"max": 1024,
							"min": 0
						},
						"description": "The default range to scan for parts within.",
						"type": "number"
					}
				}
			},
			"Scrapper": {
				"categories": ["Electrical"],
				"description": "Scraps solid items provided through a dispenser into their crafting components when powered. It also destroys unanchored single parts when touched.",
				"events": {
					"Loop": true
				}
			},
			"Screen": {
				"categories": ["Logic", "Electrical"],
				"description": "A programmable object capable of showing text, buttons and images on an LED display. Very useful for creating custom programmable interfaces.",
				"events": {
					"Configured": true
				},
				"methods": {
					"ClearElements": {
						"description": "Clears all objects that are descendants of the screen."
					},
					"CreateElement": {
						"description": "Creates an element of the specified class name with the specified properties.",
						"generate": "Screen"
					},
					"GetCanvas": {
						"description": "Returns the parent container of all the screen's content.",
						"returns": ["Frame"]
					},
					"GetDimensions": {
						"description": "Gets the size of the screen in pixels in the form of a <code>Vector2</code>",
						"returns": [["Vector2", "The size of the screen in pixels."]]
					}
				},
				"properties": {
					"VideoID": {
						"constraints": {
							"default": 0,
							"max": 10000000000.0,
							"min": 0,
							"step": 1
						},
						"description": "The ID of the camera feed being to be viewed, or 0 for none.",
						"type": "number"
					}
				}
			},
			"Seat": {
				"categories": {}
			},
			"Servo": {
				"categories": ["Electrical"],
				"description": "Spins objects attached to the hinge at the front when powered, to set angles.\n\tPolysilicon can be used to control its angle.\n\tActivate will increment the goal angle by the configured angle step (clockwise looking at its face)\n\tDeactivate will decrement the goal angle (counter-clockwise)\n\tFlipFlop will reset the angle to 0\n\tMicrocontrollers can also set a servo's angle with :SetAngle(Goal)",
				"events": {
					"Configured": true
				},
				"methods": {
					"SetAngle": {
						"parameters": ["angle: number"]
					}
				},
				"properties": {
					"AngleStep": {
						"constraints": {
							"default": 5,
							"max": 180,
							"min": -180
						},
						"description": "Determines the change in angle when a pulse is received by Polysilicon.",
						"type": "number"
					},
					"Responsiveness": {
						"constraints": {
							"default": 45,
							"max": 90,
							"min": 0
						},
						"description": "Determines how fast the servo attempts to correct its angle.",
						"type": "number"
					},
					"ServoSpeed": {
						"constraints": {
							"default": 10,
							"max": 20,
							"min": 0
						},
						"description": "Determines the speed at which the servo is driven.",
						"type": "number"
					}
				}
			},
			"Shotgun": {
				"categories": ["Weapons"],
				"description": "Fires a shot of harmful pellets when triggered.\nMust be supplied with ammo in order to function.\nFor example, you need an iron bin with 1 or more iron directly attached to it to work."
			},
			"Sign": {
				"description": "Displays text or images. To display an image, configure it to id:imageid ",
				"events": {
					"Configured": true
				},
				"properties": {
					"SignText": {
						"constraints": {
							"default": "Text"
						},
						"description": "The text to display on the front of the sign. Rich text is allowed.",
						"type": "string"
					},
					"TextColor": {
						"description": "The color of the text on the sign.",
						"type": "Color3"
					},
					"TextFont": {
						"description": "The font of the text on the sign.",
						"unknowntype": true
					}
				}
			},
			"Silicon": {
				"categories": ["Resources"],
				"description": "A metalloid that is very useful for electronics. Can commonly be found in cliffs and rocks"
			},
			"SmoothGlass": {
				"description": ""
			},
			"SmoothReinforcedGlass": {
				"description": ""
			},
			"Snow": {
				"categories": ["Resources"],
				"description": "An abundant resource that can be found in terra biomes and tundra planets. When burnt, the snow turns into water."
			},
			"SolarPanel": {
				"categories": ["Electrical"],
				"description": "Generates electricity using solar energy from a local star. \nThe closer it is to a star, the more energy it generates. \nThe type of star also affects its energy generation, as well as the size of the solar panel. \n\nIf the solar panel is blocked by a part, it will not generate any energy. Glass however will work.",
				"events": {
					"Loop": true
				}
			},
			"SolarScoop": {
				"categories": ["Electrical"],
				"description": "Extracts materials from a star when powered and pointed at a star.\nDepending on the class of the star, it will extract more materials.\n\nGenerates around 240 degrees of heat, meaning you will need atleast 12 coolers to cool it down.\n\nRed stars generate 25 helium, 5 plasma and 10 hydrogen per second.\nOrange stars generate 30 helium, 5 plasma and and 15 hydrogen per second.\nYellow stars generate 35 helium, 5 plasma and and 20 hydrogen per second.\nLight blue stars generate 40 helium, 25 hydrogen, 10 plasma and and 10 iron per second.\nNeutron stars generate 60 helium, 45 hydrogen, 15 plasma and and 20 iron per second. It also generates 1-2 neutronium every 2 minutes.\n\nIt is recommended to use a Filter to seperate the materials extracted by a solar scoop.",
				"events": {
					"Loop": true
				}
			},
			"Sorter": {
				"events": {
					"Loop": true
				},
				"properties": {
					"Rate": {
						"constraints": {
							"min": 0,
							"step": 1
						},
						"description": "How much of the resource to push per second. May be inf (or math.huge in a Microcontroller).",
						"type": "number"
					},
					"Resource": {
						"constraints": {
							"default": "Power"
						},
						"description": "The kind of resource to push. May be a special or generic type like Gas, Solid, etc.",
						"type": "string"
					}
				}
			},
			"SoundMuffler": {
				"description": "A SoundMuffler will silences the sounds of machinery around it."
			},
			"SpawnPoint": {
				"description": "Acts as a spawn location for the player who locked it."
			},
			"Speaker": {
				"categories": ["Electrical"],
				"description": "Plays audio of length up to 5 seconds, unless it is powered in which case it can play a full audio.\nWhen clicked or triggered, it will toggle playing music and will play the song id you give it.\nSpeaker:LoadSound(SoundId) will return a Sound object\nA Sound object can be modified using properties SoundId, Looped, PlaybackSpeed, Pitch, TimePositionand the methods Play, Pause, Stop, Destroy",
				"events": {
					"Configured": true,
					"Triggered": true
				},
				"methods": {
					"Chat": {
						"parameters": ["message: string"]
					},
					"ClearSounds": {
						"unknowntype": true
					},
					"LoadSound": {
						"unknowntype": true
					},
					"PlaySound": {
						"parameters": ["soundId: number"]
					}
				},
				"properties": {
					"Audio": {
						"constraints": {
							"default": "5289642056"
						},
						"description": "The audio asset ID to be played.",
						"type": "string"
					},
					"Pitch": {
						"constraints": {
							"default": 1,
							"max": 3,
							"min": 0
						},
						"description": "The pitch at which to play the audio.",
						"type": "number"
					}
				}
			},
			"Spotlight": {
				"categories": ["Electrical"],
				"description": "Emits light in a cone when powered with electricity. Color emition can be changed by coloring it.",
				"methods": {
					"SetColor": {
						"parameters": ["color: Color3"]
					}
				}
			},
			"Stanlium": {
				"description": ""
			},
			"StarMap": {
				"categories": ["Electrical"],
				"description": "Shows your current location in the universe and other nearby stars and celestial bodies.\nHas 2 modes, universe and solar.\nUniverse mode shows your location in the universe, and solar mode shows your location in the solar system if you are in one.\nRequires power in order to function. \n\t\nIt also has unique icons for every celestial body type. Clicking on a Icon will set a all connected HyperDrive/Telescope to those coordinates.\n\nWhen triggered with polysilicon, polysilicon 0 will set it to univesre mode, polysilicon 1 will set it to solar system mode, and polysilicon 2 will switch it.\n\nHas two iterative functions that can be used with the microcontroller 'GetBodies' and 'GetSystems', e.g. for key, val in StartMap:GetBodies() do",
				"methods": {
					"GetBodies": {
						"returns": ["{ [string]: { PlanetType: PlanetType } }"]
					},
					"GetSystems": {
						"returns": ["{ string }"]
					}
				}
			},
			"StasisField": {
				"categories": ["Electrical"],
				"description": "Creates a 500 stud radius field that prevents any parts or objects around it from being dragged.\nThis can be used alongside with a RegionCloaker to create public infrastructure to avoid trolling and such.\nHowever, in order to function, the shield must be anchored/grounded, and nothing must be blocking above it. The shield is also extremely fragile.",
				"events": {
					"Loop": true
				}
			},
			"Steam": {
				"categories": ["Resources"],
				"description": "A result of water being heated up to high temperatures."
			},
			"SteamEngine": {
				"description": "It acts similar to a motor, but is powered by Steam instead of electricity. ",
				"events": {
					"Configured": true
				},
				"properties": {
					"EngineSpeed": {
						"constraints": {
							"default": 10,
							"max": 20,
							"min": -20
						},
						"description": "Determines the speed at which the engine is driven.",
						"type": "number"
					}
				}
			},
			"SteamTurbine": {
				"categories": ["Electrical"],
				"description": "Creates electricity when fueled by 2 boilers.",
				"events": {
					"Loop": true
				},
				"methods": {
					"GetEfficiency": {
						"unknowntype": true
					},
					"GetProductionRate": {
						"unknowntype": true
					}
				}
			},
			"Stick": {
				"categories": ["Resources"],
				"description": "A natural resource found in trees and flora, often accompanied by wood. It is used for creating vital tools."
			},
			"Stone": {
				"categories": ["Resources"],
				"description": "A resource found in nearly all planets. It is not recommended to use for structures, but is often used in crafting simple objects."
			},
			"StorageSensor": {
				"categories": ["Logic"],
				"description": "When the number of contents within connected storage objects is within a defined range, it will send trigger signals similar to a button.\nThis can be used to automate production of certain products when the stored quantity is low.",
				"events": {
					"Loop": true
				},
				"properties": {
					"QuantityRange": {
						"constraints": {
							"default": [0, 10]
						},
						"description": "The range of item quantities within which this sensor will trigger.",
						"type": "NumberRange"
					}
				}
			},
			"StudAligner": {
				"categories": ["Electrical"],
				"description": "An integral part for creating vehicles, it aligns them to be viable for saving.\nThis is important due to a bug in roblox called 'part shift' in which precision of numbers is lost during saving.\nAs a result, parts will move a tiny bit, which results in dramatic changes to a vehicle.\nThis part solves that, by alligned the vehicle to a whole number position, allowing it to be saved properly.\n\nMake sure the arrow is facing up.\nTo stud align your vehicle, make sure it is unanchored and simply trigger the stud alligner.\nOnce it aligns the vehicle, it will anchor all anchors attached.\n\nMake sure to also allign at a viable and proper place to prevent any noclip glitches during alignment.",
				"events": {
					"OnClick": true,
					"Triggered": true
				}
			},
			"Sulfur": {
				"categories": ["Resources"],
				"description": "A yellow flammable solid. Being set on fire gives it a special blue fire."
			},
			"Switch": {
				"categories": ["Logic", "Electrical"],
				"description": "Acts as a wire when active/green, but when black or inactive it acts as a normal object. Must use a polysilicon to switch for trigger events.",
				"events": {
					"Configured": true,
					"OnClick": true
				},
				"properties": {
					"SwitchValue": {
						"description": "Determines whether the switch is active or not.",
						"type": "boolean"
					}
				}
			},
			"Tank": {
				"events": {
					"OnClick": true
				},
				"extends": "ContainerObject"
			},
			"Teleporter": {
				"description": "A device used to transport players across regions.\nWhen powered and triggered, it will teleport all players in the beam to the given coordinates and teleporter id.\nIt will warp the player to a teleporter in the region with the given teleporter id.\n\nWhen warping to a teleporter inside of a planet, set the last value to true. For example,\n50, -50, 85, -75, true\n\nMake sure you set the correct coordinates OR YOU WILL BE STRANDED!\n\nCosts 1000 energy per teleport. Teleporter uses Energy regardless if a player is on the Teleporter at the moment it gets triggered.\n",
				"events": {
					"Triggered": true
				},
				"properties": {
					"Coordinates": {
						"description": "The coordinates to your Destination.",
						"type": "Coordinate"
					},
					"ForceLocalTeleport": {
						"description": "Whether to only attempt to teleport to teleporters within the same region, ignoring the \"Coordinates\" configuration.",
						"type": "boolean"
					},
					"TeleporterID": {
						"constraints": {
							"default": 1,
							"max": 999,
							"min": 1,
							"step": 1
						},
						"description": "The ID of the teleporter at the goal coordinates to teleport directly to.",
						"type": "number"
					}
				}
			},
			"Telescope": {
				"categories": ["Electrical"],
				"description": "A device that allows you to look at celestial objects and regions of space from a far away distance.\nSimply click the device and an interface will pop up on your screen allowing you to see details about a planet.\nTo view a specific coordinate, configure the telescope and set to the desired coordinates.\n\nCan only see within 100 universe units, any farther will result in a blurry image.\n\nInformation such as resources on the planet, temperature, distance from its local sun, and planet type will be displayed as well.\n\nMust be powered in order to view object's information.\nHas a 1 minute delay between viewing different systems.",
				"events": {
					"Configured": true,
					"OnClick": true,
					"Triggered": true
				},
				"methods": {
					"GetCoordinate": {
						"description": "Gets information about the configured region.",
						"returns": ["RegionInfo"]
					},
					"GetCurrentCoordinate": {
						"description": "Returns the current region coordinates.",
						"returns": ["Coordinate"]
					},
					"WhenRegionLoads": {
						"parameters": ["callback: (regionData: any) -> ()"]
					}
				},
				"properties": {
					"ViewCoordinates": {
						"description": "The coordinates to view.",
						"type": "Coordinate"
					}
				}
			},
			"TemperatureGate": {
				"events": {
					"Configured": true
				},
				"methods": {
					"GetState": {
						"unknowntype": true
					},
					"GetTemp": {
						"unknowntype": true
					},
					"GetTemperature": {
						"unknowntype": true
					}
				},
				"properties": {
					"Inverted": {
						"description": "Whether or not the state will be inverted.",
						"type": "boolean"
					},
					"SwitchValue": {
						"description": "Determines whether the switch is active or not.",
						"type": "boolean"
					},
					"TemperatureRange": {
						"constraints": {
							"default": [140]
						},
						"description": "The range of temperatures (°F) within which the gate will be open.",
						"type": "NumberRange"
					}
				}
			},
			"TemperatureSensor": {
				"categories": ["Logic"],
				"description": "When the surrounding temperature is within a defined range, it will send trigger signals similar to a button.\n\nFor example, if the current temperature is 1100 and the temperature range is \"1000:inf\", then the sensor will send a signal.\n\t\nThis is very useful for creating smart cooling systems for a vehicle or reactor, preventing overheating from occuring.\n\nIf you want the temperature sensor to trigger outside of a certain range, take the inverse of the range.\nFor example, \"-inf:999\" would trigger when the temperature is within that range.\n\nConnecting the TemperatureSensor to a reactor will use the reactor's temperature instead of the surrounding temperature.",
				"events": {
					"Loop": true
				},
				"methods": {
					"GetTemp": {
						"unknowntype": true
					}
				},
				"properties": {
					"TemperatureRange": {
						"constraints": {
							"default": [140]
						},
						"description": "The range of temperatures (°F) which this sensor will trigger at.",
						"type": "NumberRange"
					}
				}
			},
			"Tetrahedron": {
				"categories": ["Templates"],
				"description": "A tetrahedron template made of 3 perpendicular right triangles."
			},
			"Thruster": {
				"categories": ["Propulsion", "Electrical"],
				"description": "A device that creates forward propulsion depending on its size when powered.\nThe size of the thruster will determine the max thrust speed it can have, with a larger thruster being capable of higher speeds.\n\nThe speed setting of the thruster can also be configured from -100 (full backward) to 100 (full forward).\n\nThe maximum speed of a thruster is dependent on its volume.\nThrusters will generate more heat the larger and more powerful the thruster is. A 10x10x10 thruster, for example, would need about 8 coolers to operate.\nThe power required by a thruster is proportional to its actual speed output.\n\nThrusters can be heated to a temperature of around <200 degrees before overheating and combusting.",
				"events": {
					"Configured": true
				},
				"properties": {
					"Propulsion": {
						"constraints": {
							"default": 50,
							"max": 100,
							"min": 0
						},
						"description": "Determines the percentage of thrust (speed). Affects fuel consumption.",
						"type": "number"
					}
				}
			},
			"Tile": {
				"description": "A cheap material made from baked clay useful for building houses."
			},
			"TimeSensor": {
				"categories": ["Logic"],
				"description": "When the current time matches the same time as the timesensor, it will trigger.\n\nFor example, if the world turns 7:15 it will activate.\n\nThis is useful for creating dynamic lights that turn on only during the night, saving energy.\n\nThe format should be hour:minute",
				"properties": {
					"Time": {
						"constraints": {
							"default": "7:30"
						},
						"description": "The time at which this sensor will trigger.",
						"type": "string"
					}
				}
			},
			"TintedGlass": {
				"description": "A material similar to Glass, but is tinted black on the front.."
			},
			"Tire": "A cylindrical shaped object used commonly in vehicles such as cars.",
			"Titanium": {
				"categories": ["Resources"],
				"description": "A strong heavy material that is very useful for small scale constructs."
			},
			"TouchScreen": {
				"categories": ["Logic", "Electrical"],
				"description": "A Screen, but with capabilities of handling player mouse input.\nThis is to be used with programming.",
				"events": {
					"Configured": true,
					"CursorMoved": {
						"description": "Fired when a player moves their cursor on the screen.",
						"parameters": [["cursor: Cursor", "The cursor that moved."]]
					},
					"CursorPressed": {
						"description": "Fired when a player left clicks on the screen.",
						"parameters": [
							["cursor: Cursor", "The cursor that started pressing left click."]
						]
					},
					"CursorReleased": {
						"description": "Fired when a player releases the left click button on the screen.",
						"parameters": [
							["cursor: Cursor", "The cursor that stopped pressing left click."]
						]
					}
				},
				"extends": "Screen",
				"learnmore": "https://github.com/iimurpyh/pilot-lua/wiki/TouchScreen",
				"methods": {
					"GetCursor": {
						"description": "Gets the specified player's cursor.",
						"parameters": [
							[
								"username: string",
								"The username of the player's cursor you want to get."
							]
						]
					},
					"GetCursors": {
						"description": "Gets a dictionary of player usernames to their cursors if their cursors are on the screen.",
						"returns": [
							[
								"{ [string]: Cursor }",
								"A dictionary of player usernames to their cursors."
							]
						]
					}
				},
				"properties": {
					"VideoID": {
						"constraints": {
							"default": 0,
							"max": 10000000000.0,
							"min": 0,
							"step": 1
						},
						"description": "The ID of the camera feed being to be viewed, or 0 for none.",
						"type": "number"
					}
				}
			},
			"TouchSensor": {
				"categories": ["Logic"],
				"description": "Sends trigger signals upon contact with another player or another object.",
				"events": {
					"Touched": {
						"unknowntype": true
					}
				}
			},
			"TractorBeam": {
				"description": "",
				"properties": {
					"PowerPercent": {
						"constraints": {
							"default": 100,
							"max": 100,
							"min": 0
						},
						"description": "Determines the percentage of total available force (depending on size) used by the beam.",
						"type": "number"
					}
				}
			},
			"Transformer": {
				"categories": ["Logic", "Electrical"],
				"description": "Sends continuous trigger signals every second when powered.",
				"events": {
					"Loop": true,
					"Triggered": true
				},
				"properties": {
					"LoopTime": {
						"constraints": {
							"default": 1,
							"max": 360,
							"min": 0
						},
						"description": "The time in seconds between triggers.",
						"type": "number"
					}
				}
			},
			"Transistor": {
				"events": {
					"Configured": true,
					"OnClick": true
				},
				"properties": {
					"Inverted": {
						"description": "Whether or not the state will be inverted.",
						"type": "boolean"
					}
				}
			},
			"Transporter": {
				"description": "Acts as an antenna but for bins and objects containing materials such as liquids and solids. \nUseful for creating large factory bases with many extractors without using long chutes.\n\t",
				"properties": {
					"TransporterID": {
						"constraints": {
							"default": "T1"
						},
						"description": "The ID of this transporter, to transmit to others with the same ID.",
						"type": "string"
					}
				}
			},
			"Treads": {
				"categories": ["Electrical"],
				"description": "When touching in contact with a solid surface, it will move forward. Must be connected to an engine or motor similar to a drivebox to function.",
				"events": {
					"Loop": true
				}
			},
			"TriggerSwitch": {
				"categories": ["Logic"],
				"description": "Acts as a triggerwire when active/green, but when black or inactive it acts as a normal object.",
				"extends": "Switch"
			},
			"TriggerWire": {
				"categories": ["Logic"],
				"description": "Allows trigger objects to interact with each other when connected by triggerwires."
			},
			"Truss": {
				"categories": ["Templates"],
				"description": "Used as a ladder."
			},
			"Turbofan": {
				"categories": ["Propulsion"],
				"description": "Generates thrust from crude Oil, similar to a Thruster.\nIf a motor is attached to the front, it instead acts like an engine and rotates it.",
				"properties": {
					"TurboFanSpeed": {
						"description": "Determines the speed at which the turbofan is driven, or the speed at which it travels.\n\n**Range:** 0 to 100",
						"type": "number"
					}
				}
			},
			"Uranium": {
				"categories": ["Resources"],
				"description": "A radioactive material often found in deposits in planets, especially ones near stars.\nUseful for energy generation from reactors or radiation generators."
			},
			"Valve": {
				"categories": ["Logic"],
				"description": "Acts as a pipe when active/gray, but when black or inactive it acts as a normal object.",
				"extends": "Switch"
			},
			"VehicleSeat": {
				"description": "Allows players to control vehicles by rotating when sat on.\nIt is incredibly important to have when creating vehicles.\n\nAttaching buttons to the vehicleseat will allow the player sitting on it to trigger the button by pressing a key.\nSimply attach the button to the vehicle seat, configure it to the keybind you would like, and it will allow you to trigger that button by pressing the key when sitting down in the seat.\n\t",
				"events": {
					"Configured": true
				},
				"properties": {
					"Enabled": {
						"constraints": {
							"default": true
						},
						"description": "Determines whether this seat should control its rotation. Turning this off results in a regular seat.",
						"type": "boolean"
					},
					"Mode": {
						"constraints": {
							"default": "Horizontal"
						},
						"description": "The control mode of the seat. Horizontal: Rotate horizontally with A/D. Full: Rotate horizontally and vertically with W/A/S/D. Mouse: point towards the player's mouse when holding click.",
						"type": ["Horizontal", "Yaw/Pitch", "Full", "Mouse"]
					},
					"Speed": {
						"constraints": {
							"default": 1,
							"max": 10,
							"min": 0
						},
						"description": "The speed at which the seat will rotate.",
						"type": "number"
					}
				}
			},
			"Warhead": {
				"categories": ["Weapons"],
				"description": "Causes a powerful explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.\nThe only down-side of the warhead is that it is blocked completely by energy shields.",
				"events": {
					"Damaged": true,
					"Triggered": true
				}
			},
			"Water": {
				"categories": ["Resources"],
				"description": "The basis of all life, and is a liquid found in terra, forest, ocean and certain tundras and rogue planets. Can be made from burning ice or snow."
			},
			"WaterCooler": {
				"categories": ["Electrical"],
				"description": "Generates cold temperatures when given a supply of water. Useful for cooling down devices, and does not require power. Performs the same amount of cooling that five coolers would."
			},
			"Wedge": {
				"categories": ["Templates"],
				"description": "A triangular shaped template object."
			},
			"Winch": {
				"description": "A special device used to control the length of constraints attached to it.\nWhen attaching a constraint to the Winch, click the Winch first.\nWhen triggered with polysilicon, it will increase (Activate) or decrease (Deactivate).\n",
				"properties": {
					"DeltaLength": {
						"constraints": {
							"default": 1,
							"max": 100,
							"min": 0
						},
						"description": "The length change in studs when triggered by Polysilicon.",
						"type": "number"
					},
					"MaxLength": {
						"constraints": {
							"default": 100,
							"max": 100,
							"min": 0
						},
						"description": "The maximum length in studs of the rope.",
						"type": "number"
					},
					"MinLength": {
						"constraints": {
							"default": 0,
							"max": 100,
							"min": 0
						},
						"description": "The minimum length in studs of the rope.",
						"type": "number"
					}
				}
			},
			"Wing": {
				"description": "Creates lift from being pushed forward.\nWorks at higher altitudes and at better angles than a CrudeWing.\nDoes not work in space or in non atmospheric planets.",
				"events": {
					"Loop": true
				}
			},
			"Wire": {
				"categories": ["Electrical"],
				"description": "Allows electrical objects to interact with each other when connected by wires. For example, attaching a wire between a powercell and a light will allow electricity to move through the wire, allowing the light to function causing a source of light to be created."
			},
			"WirelessButton": {
				"categories": ["Logic"],
				"description": "Similar to a button, but can be clicked from infinite distances and cannot be used for keybinds.",
				"events": {
					"OnClick": true
				}
			},
			"Wood": {
				"categories": ["Resources"],
				"description": "**A natural resource found in trees and flora.** It is a simple and yet effective material that is used for simple objects and structures. These can be mainly found in terra and forest planets, but can occasionally be found in temperate tundra and desert planets."
			},
			"ZapWire": {
				"categories": ["Logic", "Weapons", "Electrical"],
				"description": "Allows electrical objects to interact with each other when connected by wires.\nIf a flammable object is touched, it will be lit on fire."
			}
		}
	},
	"events": {
		"Configured": {
			"description": "Fires when the object is configured.",
			"parameters": ["configurerId: number"]
		},
		"Loop": {
			"description": "Fires when the object is updated by the game loop.",
			"parameters": ["deltaTime: number"]
		},
		"OnClick": {
			"description": "Fires when the object is clicked.",
			"parameters": ["clickerId: number"]
		},
		"Triggered": {
			"description": "Fires when the object is triggered.",
			"parameters": ["otherPart: PilotObject"]
		},
		"Damaged": {
			"unknowntype": true
		},
		"KeyPressed": {
			"parameters": [
				[
					"userId: number",
					"The <code>UserID</code> of the player who pressed the key."
				],
				[
					"keyName: string",
					"The letter of the key that was pressed. If the key is non-printable (i.e. shift or backspace) keyString will be an empty string."
				]
			]
		},
		"UserInput": {
			"parameters": ["userId: number", "inputObject: InputObject"]
		}
	},
	"globals": {
		"functions": {
			"Beep": {
				"codesample": "-- Beep!\nBeep(1)",
				"description": "Produces a beep sound using a triangle wave.",
				"parameters": ["frequency: number?"]
			},
			"GetCPUTime": {
				"deprecated": "Use `pilot.getCPUTime` instead.",
				"description": "Returns the current elapsed CPU time.",
				"returns": ["number"]
			},
			"GetPart": {
				"codesample": "-- Get a `Screen` from any port\nlocal screen = GetPart(\"Screen\")",
				"description": "Gets a part of the specified type from any connected ports.",
				"generate": "GetPart",
				"parameters": ["part: string?"]
			},
			"GetPartFromPort": {
				"codesample": "-- Get a `TouchScreen` from port 1\nlocal touchScreen = GetPartFromPort(1, \"TouchScreen\")",
				"description": "Gets a part of the specified type from any port of the specified ID.",
				"generate": "GetPart",
				"parameters": ["port: ( Port | number )?", "part: string?"]
			},
			"GetParts": {
				"codesample": "-- Get all `Switch`es connected to any port\nlocal switches = GetParts(\"Switch\")",
				"description": "Gets all the parts of the specified type from any connected ports.",
				"generate": "GetPart",
				"parameters": ["part: string?"]
			},
			"GetPartsFromPort": {
				"codesample": "-- Get all `Lights` from port 1\nlocal lights = GetPartsFromPort(1, \"Light\")",
				"description": "Gets all the parts of the specified type from any port of the specified ID.",
				"generate": "GetPart",
				"parameters": ["port: ( Port | number )?", "part: string?"]
			},
			"GetPort": {
				"codesample": "-- Get port with an ID of 1\nlocal port = GetPort(1)",
				"description": "Gets the connected port of the specified ID.",
				"parameters": ["id: number?"],
				"returns": ["Port?"]
			},
			"GetPorts": {
				"codesample": "-- Get all ports, no matter the ID\nlocal ports = GetPort()",
				"description": "Gets all the connected ports of the specified ID.",
				"parameters": ["id: number?"],
				"returns": ["{ Port }"]
			},
			"JSONDecode": {
				"codesample": "-- Decode a JSON string\nlocal jsonString = '{\"name\": \"example\", \"value\": 42}'\nprint(repr(JSONDecode(jsonString))) -- { name = \"example\", value = 42 }",
				"description": "Decodes JSON.",
				"learnmore": "https://create.roblox.com/docs/reference/engine/classes/HttpService#JSONDecode",
				"parameters": ["data: string"],
				"returns": ["JSON"]
			},
			"JSONEncode": {
				"codesample": "local data = { name = \"example\", value = 42 }\nprint(JSONEncode(data)) -- {\"name\":\"example\",\"value\":42}",
				"description": "Encodes JSON. Proxy for `HttpService:JSONEncode`",
				"learnmore": "https://create.roblox.com/docs/reference/engine/classes/HttpService#JSONEncode",
				"parameters": ["data: JSON"],
				"returns": ["string"]
			},
			"TriggerPort": {
				"description": "Triggers the specified port.",
				"parameters": ["port: Port | number"]
			},
			"logError": {
				"description": "Logs an error in the output.",
				"parameters": ["message: string", "level: number?"]
			},
			"pilot": {
				"description": "Provides functions for accessing/manipulating information about threads such as permissions, ownership, and interrupts.",
				"keys": {
					"claimThread": {
						"description": "Sets the thread's parent to the running thread. The target thread must be part of the sandbox and may not exist on a lower ring otherwise nothing will happen.",
						"parameters": ["thread: thread"],
						"returns": ["boolean"]
					},
					"getCPUTime": {
						"description": "Returns the current elapsed CPU time.",
						"returns": ["number"]
					},
					"getRing": {
						"description": "Gets the ring of the target (or running) thread.",
						"parameters": ["thread: thread?"],
						"returns": ["number"]
					},
					"getThreadParent": {
						"description": "Gets the parent of the target (or running) thread. The parent thread must be part of the sandbox and may not exist on a lower ring otherwise nil will be returned.",
						"parameters": ["thread: thread?"],
						"returns": ["thread?"]
					},
					"getTimeout": {
						"description": "Gets the current CPU timeout, or the CPU timeout that the given thread will obey.",
						"parameters": ["thread: thread?"],
						"returns": ["number"]
					},
					"hasRing": {
						"description": "Checks if the target (or running) thread has the specified ring privilege or lower.",
						"parameters": ["ring: number", "thread: thread?"],
						"returns": ["boolean"]
					},
					"saveRing": {
						"description": "Creates a function which elevates the caller to the specified (or current) ring regardless of its privilege. You can use this to de-escalate, spawn a new thread, and then re-escalate your thread after. Requires ring 0 or lower.",
						"parameters": ["ring: number?"],
						"returns": ["() -> ()"]
					},
					"setInterrupt": {
						"description": "Will repeatedly call the interrupt every period CPU time on a valid resumption time (ignores yields/waits). Returns a function which deletes the interrupt.",
						"parameters": ["period: number", "callback: () -> ()"],
						"returns": ["() -> ()"]
					},
					"setRing": {
						"description": "Sets the ring of the target (or running) thread. You can use .saveRing to store the current ring so you can escalate again later.",
						"parameters": ["ring: number", "thread: thread?"]
					},
					"setTimeout": {
						"description": "Sets the CPU timeout of the given thread. Requires ring -1 or lower. This will not let you exceed the game's timeout, but will let you set lower timeouts. This has to do with whatever thread happens to be actively running. Currently there is not a way for you to recover from a timeout, so you should use .setInterrupt to handle your own custom timeouts.",
						"parameters": ["timeout: number?", "thread: thread?"]
					}
				}
			}
		},
		"types": {
			"ObjectDetectorHitData": {
				"Durability": "number",
				"isTerrain": "boolean",
				"Name": "string",
				"Position": "Vector3",
				"Color": "Color3",
				"Distance": "number",
				"CreatedBy": "number",
				"[string]": "any"
			},
			"CanvasContext": ["2D", "3D"],
			"CelestialBodyType": ["Planet", "BlackHole", "Star"],
			"ConfigurableData": {
				"DefaultValue": "any?",
				"Description": "string",
				"Name": "string",
				"Options": "({ string } | { number })?",
				"Type": "string"
			},
			"CoordinateMetatable": {
				"Clone": "(self: Coordinate) -> ()",
				"CoordStringWithoutPlanet": "(self: Coordinate, arg1: any) -> string",
				"GetRandom": "(self: Coordinate, arg2: any) -> Random",
				"GetSeed": "(self: Coordinate, arg2: any) -> number",
				"ToArray": "(self: Coordinate, arg2: any) -> {number | boolean}",
				"__index": "CoordinateMetatable",
				"__add": "(Coordinate) -> Coordinate",
				"__div": "(Coordinate) -> Coordinate",
				"__eq": "(Coordinate) -> Coordinate",
				"__mul": "(Coordinate) -> Coordinate",
				"__tostring": "(Coordinate) -> string",
				"type": "\"Coordinate\""
			},
			"Coordinate": "typeof(setmetatable({} :: { InPlanet: boolean, SolarCoordinates: Vector2, UniverseCoordinates: Vector2, }, {} :: CoordinateMetatable))",
			"Cursor": {
				"Player": "string",
				"Pressed": "boolean",
				"X": "number",
				"Y": "number"
			},
			"Event<N = string, T = (...any) -> (), U... = ...any>": {
				"Connect": "(self: Event<N, T, U...>, callback: T) -> EventConnection<N, T>",
				"_eventName": "N"
			},
			"EventConnection<N = string, T = (...any) -> ()>": "typeof(setmetatable({} :: { Callback: T, _eventName: N }, {} :: EventConnectionMetatable<N, T>))",
			"EventData": "{ string }",
			"FileAttributes": {
				"metadata": "{ [primitive]: primitive }?",
				"permissions": [
					"and?",
					{
						"owner": "\"system\" | number",
						"userPermissions": "{ [number]: FilePermissions }?"
					},
					"FilePermissions"
				]
			},
			"FilePermissions": {
				"read": "boolean?",
				"write": "boolean?"
			},
			"FileSystem": {
				"chdir": "(self: FileSystem, pathname: string) -> string",
				"copy": "(self: FileSystem, pathnameFrom: string, pathnameTo: string?) -> ()",
				"exists": "(pathname: string) -> boolean",
				"filename": "(pathname: string) -> string",
				"join": "(...string) -> string",
				"mkdir": "(self: FileSystem, pathname: string?) -> ()",
				"mklink": "(self: FileSystem, linkName: string, targetName: string?) -> ()",
				"moveMerge": "(self: FileSystem, pathnameFrom: string, pathnameTo: string?) -> ()",
				"new": "(source: (FileSystemRoot | FileSystemDirectory)?) -> FileSystem",
				"parentdir": "(pathname: string) -> string",
				"pwd": "(self: FileSystem) -> string",
				"readdir": "(self: FileSystem, pathname: string) -> { string }",
				"readfile": "(self: FileSystem, filepath: string) -> string",
				"rename": "(self: FileSystem, pathnameFrom: string, pathnameTo: string?) -> ()",
				"resolve": "(pathname: string) -> string",
				"separator": "string",
				"split": "(pathname: string) -> { string }",
				"unlink": "(self: FileSystem, pathname: string) -> ()",
				"writefile": "(self: FileSystem, filepath: string, contents: string) -> ()"
			},
			"FileSystemDevice": {
				"attributes": "FileAttributes?",
				"device": "any",
				"kind": "\"device\""
			},
			"FileSystemDirectory": {
				"attributes": "FileAttributes?",
				"contents": "{ [string]: FileSystemFileNode }",
				"kind": "\"directory\""
			},
			"FileSystemFile": {
				"attributes": "FileAttributes?",
				"contents": "string",
				"kind": "\"file\""
			},
			"FileSystemFileNode": "FileSystemDirectory | FileSystemFile | FileSystemLink | FileSystemRoot | FileSystemDevice",
			"FileSystemLink": {
				"attributes": "FileAttributes?",
				"kind": "\"link\"",
				"target": "string"
			},
			"FileSystemOperationOptions": {
				"ignoreLinks": "boolean?",
				"ignorePermissions": "boolean?"
			},
			"FileSystemRoot": {
				"attributes": "FileAttributes?",
				"kind": "\"root\"",
				"pwd": "string",
				"root": "FileSystemDirectory"
			},
			"InstrumentType": [
				"Speed",
				"AngularSpeed",
				"Temperature",
				"Time",
				"Power",
				"Size",
				"Position",
				"TemperatureF",
				"Orientation",
				"TemperatureC",
				"AirTemperatureF",
				"AirTemperatureC"
			],
			"MethodData": {
				"Arguments": "{ MethodParameter }",
				"Description": "string?",
				"Name": "string",
				"Results": "{ MethodParameter }"
			},
			"Permission": [
				"Modify",
				"Unlock",
				"Paint",
				"Configure",
				"Interact",
				"Attach"
			],
			"PlanetType": [
				"Desert",
				"Terra",
				"EarthLike",
				"Ocean",
				"Tundra",
				"Forest",
				"Exotic",
				"Barren",
				"Gas",
				"RobotDepot",
				"RobotFactory"
			],
			"PolysiliconMode": ["Activate", "Deactivate", "FlipFlop"],
			"RawFileSystem": {
				"Device": "(device: any, attributes: FileAttributes) -> FileSystemDevice",
				"Directory": "(contents: { [string]: FileSystemFileNode }, attributes: FileAttributes, readonly: boolean?) -> FileSystemDirectory",
				"File": "(contents: string, attributes: FileAttributes) -> FileSystemFile",
				"Link": "(pathname: string, attributes: FileAttributes) -> FileSystemLink",
				"Root": "(root: FileSystemDirectory, attributes: FileAttributes) -> FileSystemRoot",
				"SYSTEM_NOACCESS": "FileAttributes",
				"SYSTEM_READONLY": "FileAttributes",
				"read": "(self: RawFileSystem, root: FileSystemRoot, pathname: string, options: FileSystemOperationOptions?) -> FileSystemFileNode?",
				"readlink": "(self: RawFileSystem, root: FileSystemRoot, link: FileSystemLink, options: FileSystemOperationOptions?) -> FileSystemFileNode?",
				"write": "(self: RawFileSystem, root: FileSystemRoot, pathname: string, node: FileSystemFileNode, options: FileSystemOperationOptions?) -> ()"
			},
			"RegionInfo": [
				"or",
				{
					"BeaconCount": "number",
					"HasRings": "boolean",
					"Name": "string",
					"SubType": "nil",
					"TidallyLocked": "boolean",
					"Type": "\"Planet\""
				},
				{
					"BeaconCount": "number",
					"Color": "Color3",
					"Gravity": "number",
					"HasAtmosphere": "boolean",
					"HasRings": "boolean",
					"Name": "string",
					"Resources": "{ string }",
					"SubType": "PlanetType",
					"TidallyLocked": "boolean",
					"Type": "\"Planet\""
				},
				{
					"BeaconCount": "number",
					"Name": "string",
					"Size": "number",
					"Type": "\"BlackHole\""
				},
				{
					"BeaconCount": "number",
					"Name": "string",
					"Size": "number",
					"SubType": "StarType",
					"Type": "\"Star\""
				}
			],
			"RegionLog": {
				"Desc": "string",
				"Event": "RegionLogType",
				"TimeAgo": "number"
			},
			"RegionLogType": [
				"HyperDrive",
				"Aliens",
				"Spawned",
				"Death",
				"ExitRegion",
				"Poison",
				"Irradiated",
				"Suffocating",
				"Freezing",
				"Melting"
			],
			"RegionLogs": "{ RegionLog }",
			"RelayMode": ["Send", "Receive"],
			"StarType": ["Red", "Orange", "Yellow", "Blue", "Neutron"],
			"TemperatureUnit": ["K", "F", "C"],
			"VehicleSeatMode": ["Horizontal", "Full", "Mouse"]
		},
		"values": {
			"FileSystem": {
				"type": "FileSystem"
			},
			"Microcontroller": {
				"description": "The microcontroller object the program is running in.",
				"readonly": true,
				"type": "Microcontroller"
			},
			"RawFileSystem": {
				"type": "RawFileSystem"
			},
			"SandboxID": {
				"description": "The GUID of the microcontroller the program is running in.",
				"readonly": true,
				"type": "string"
			},
			"SandboxRunID": {
				"description": "A GUID for the current running program, it is (re)generated when the microcontroller is turned on.",
				"readonly": true,
				"type": "string"
			}
		}
	},
	"types": {
		"EventConnectionMetatable<N = string, T = (...any) -> ()>": {
			"Disconnect": "(self: EventConnection<N, T>) -> ()",
			"Unbind": "(self: EventConnection<N, T>) -> ()",
			"__index": "EventConnectionMetatable<N, T>",
			"__mode": "\"v\""
		},
		"JSON": "{ [JSONValue]: JSON } | JSONValue",
		"JSONValue": "string | number | boolean | buffer",
		"MethodParameter": {
			"Description": "string?",
			"Name": "string?",
			"Type": "string?"
		},
		"primitive": "string | number | boolean | { primitive } | { [primitive]: primitive }"
	}
}
