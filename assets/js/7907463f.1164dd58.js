"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[5385,8401],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(96540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},59907:(e,n,r)=>{r.d(n,{A:()=>j});r(96540);var t=r(34164),s=r(21312),a=r(6342),i=r(28774),o=r(63427),l=r(92303),c=r(74848);function d({children:e,fallback:n}){return(0,l.A)()?(0,c.jsx)(c.Fragment,{children:e?.()}):n??null}var h=r(61409),u=r(81113);function p(e){return(0,c.jsx)("svg",{viewBox:"0 0 24 24",...e,children:(0,c.jsx)("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"})})}const x={anchorWithStickyNavbar:"anchorWithStickyNavbar_wkc4",anchorWithHideOnScrollNavbar:"anchorWithHideOnScrollNavbar_m_Ui"};var m=r(56347);function j({id:e,group:n,...r}){const l=(0,o.A)(),{navbar:{hideOnScroll:j}}=(0,a.p)();l.collectAnchor(e);const f="group"===n?"h2":"h3",g=(0,s.T)({id:"theme.common.headingLinkTitle",message:"Direct link to {heading}",description:"Title for link to heading"},{heading:e}),b=(0,s.T)({id:"theme.common.markdownLinkTitle",message:"Copy markdown link to {heading}",description:"Markdown for link to heading"},{heading:e}),y=(0,m.zy)().pathname;return(0,c.jsxs)(f,{...r,className:(0,t.A)("anchor",j?x.anchorWithHideOnScrollNavbar:x.anchorWithStickyNavbar,r.className),id:e,children:[r.children,(0,c.jsx)(i.A,{className:"icon-link",to:`#${e}`,"aria-label":g,title:g,children:(0,c.jsx)(p,{width:"0.75em",height:"0.75em"})}),(0,c.jsx)(d,{children:()=>{const r=location.pathname.split("/").filter(Boolean),t=r[r.length-1],s=`[${"group"==n?`\`${t}\`'s ${e.toLowerCase()}`:"method"==n?`\`${t}:${e}()\``:`\`${t}.${e}\``}](<${`${window.location.origin}${y}#${e}`}>)`;return(0,c.jsx)("a",{className:"icon-link","aria-label":b,title:b,onClick:()=>{h.oR.dark((0,c.jsxs)("a",{children:["Copied the ",(0,c.jsx)("code",{children:e})," link to clipboard."]}),{position:"top-center",autoClose:1e3,hideProgressBar:!0,closeOnClick:!0,pauseOnHover:!0,draggable:!1,progress:void 0,theme:"colored",transition:h.GP}),navigator.clipboard.writeText(s)},children:(0,c.jsx)(u.A,{width:"0.75em",height:"0.75em"})})}})]})}},76147:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"objects/ARController","title":"ARController","description":"Like a TouchScreen, but for your actual screen.","source":"@site/docs/objects/ARController.mdx","sourceDirName":"objects","slug":"/objects/ARController","permalink":"/Pilot.lua-Luau-LSP/objects/ARController","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Logic","permalink":"/Pilot.lua-Luau-LSP/tags/logic"},{"inline":true,"label":"Electrical","permalink":"/Pilot.lua-Luau-LSP/tags/electrical"},{"inline":true,"label":"Spawnable","permalink":"/Pilot.lua-Luau-LSP/tags/spawnable"},{"inline":true,"label":"Craftable","permalink":"/Pilot.lua-Luau-LSP/tags/craftable"},{"inline":true,"label":"Programmable","permalink":"/Pilot.lua-Luau-LSP/tags/programmable"},{"inline":true,"label":"Configurable","permalink":"/Pilot.lua-Luau-LSP/tags/configurable"}],"version":"current","frontMatter":{"tags":["Logic","Electrical","Spawnable","Craftable","Programmable","Configurable"]},"sidebar":"objectsSidebar","previous":{"title":"100k","permalink":"/Pilot.lua-Luau-LSP/objects/100k"},"next":{"title":"ARGlasses","permalink":"/Pilot.lua-Luau-LSP/objects/ARGlasses"}}');var s=r(74848),a=r(28453),i=r(59907);const o={tags:["Logic","Electrical","Spawnable","Craftable","Programmable","Configurable"]},l=void 0,c={},d=[{value:"Methods",id:"Methods",level:2},{value:"ClearElements()",id:"ClearElements",level:3},{value:"ClearElements3D()",id:"ClearElements3D",level:3},{value:"CreateElement()",id:"CreateElement",level:3},{value:"CreateElement3D()",id:"CreateElement3D",level:3},{value:"GetCanvas()",id:"GetCanvas",level:3},{value:"GetCursor()",id:"GetCursor",level:3},{value:"GetCursors()",id:"GetCursors",level:3},{value:"Configurables",id:"Configurables",level:2},{value:"Transparency",id:"Transparency",level:3},{value:"Events",id:"Events",level:2},{value:"Configured",id:"Configured",level:3},{value:"CursorMoved",id:"CursorMoved",level:3},{value:"CursorPressed",id:"CursorPressed",level:3},{value:"CursorReleased",id:"CursorReleased",level:3},{value:"KeyPressed",id:"KeyPressed",level:3},{value:"OnClick",id:"OnClick",level:3},{value:"UserInput",id:"UserInput",level:3}];function h(e){const n={code:"code",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Like a TouchScreen, but for your actual screen.\nHas the capability to display augmented 3D objects and visuals in a virtualized world.\nClick to equip/unequip. Output may only be displayed from one ARController at a time.\nIt is a craftable and spawnable non-flammable solid."}),"\n",(0,s.jsx)(n.p,{children:"Here is a list of possible sizes that reach the maximum malleability (400) that have integer components: 1x1x400, 1x2x200, 1x4x100, 1x5x80, 1x8x50, 1x10x40, 1x16x25, 1x20x20, 2x2x100, 2x4x50, 2x5x40, 2x8x25, 2x10x20, 4x4x25, 4x5x20, 4x10x10, 5x5x16, 5x8x10"}),"\n",(0,s.jsx)(n.p,{children:"At its default size (8x1x8) it has a durability of 1, at its maximum size it has a durability of 2."}),"\n",(0,s.jsxs)(n.p,{children:["By default, its colour is ",(0,s.jsx)("span",{style:{color:"#{000000"},children:"#000000"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["It requires 1 ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/ARGlasses",children:"ARGlasses"})}),", 2 ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Antenna",children:"Antenna"})}),", 4 ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Iron",children:"Iron"})}),", and 4 ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Quartz",children:"Quartz"})})," to be crafted."]}),"\n",(0,s.jsx)(i.A,{id:"Methods",group:"group",children:"Methods"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"ClearElements",group:"method",children:"ClearElements(context)"}),"\n",(0,s.jsx)(n.p,{children:"Clears all objects that are descendants of the screen."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"context"})," parameter is a ",(0,s.jsx)("code",{children:"CanvasContext"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"ClearElements3D",group:"method",children:"ClearElements3D()"}),"\n",(0,s.jsx)(n.p,{children:"Clears 3D elements."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"CreateElement",group:"method",children:"CreateElement(className, properties, context) \u2192 element"}),"\n",(0,s.jsx)(n.p,{children:"Creates an element of the specified class name with the specified properties."}),"\n",(0,s.jsxs)(n.p,{children:["The parameters for ",(0,s.jsx)("code",{children:"CreateElement"})," are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"className"})," parameter is a ",(0,s.jsx)("code",{children:"string"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"properties"})," parameter is a dictionary with keys that are",(0,s.jsx)("code",{children:"string"}),"s and values that are ",(0,s.jsx)("code",{children:"any"}),"s."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"context"})," parameter is a ",(0,s.jsx)("code",{children:"CanvasContext"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"element"})," return is an ",(0,s.jsx)("code",{children:"Instance"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Try and get the ar controller, throw an error if we don\'t find it using `assert`.\nlocal screen = assert(GetPart("ARController"), "no ar controller connected")\n\n-- Clear the left over screen elements from the last time GUIs were loaded onto it.\n-- Note: If you utilise the `Instance.new` API instead, you do not need to do this,\n--       as objects created through said API are *automatically* deleted when the\n--       microcontroller stops running.\nscreen:ClearElements()\n\n-- We\'re going to spawn 32 randomly sized/coloured/positioned cubes.\nfor index = 1, 32 do\n    -- Generate a random `Vector3` in a -16 to 16 cube region.\n    local position = Vector3.new(\n        math.random(-16, 16),\n        math.random(-16, 16),\n        math.random(-16, 16)\n    )\n\n    -- This may be confusing if you\'ve never worked with `CFrame`s, \'why is pi here?\'\n    -- the reason is that pi is 180 degrees when working in \'radians\' (the angle system\n    -- used by `CFrame`s). `math.random` with *no* parameters returns a random decimal\n    -- number between 0 and 1, so each parameter is just a number between 0 and pi.\n    local orientation = CFrame.Angles(\n        math.random() * math.pi,\n        math.random() * math.pi,\n        math.random() * math.pi\n    )\n\n    -- Select a size between 0 and 4 for all axes, `Vector3.one` is shorthand for\n    -- `Vector3.new(1, 1, 1)`, we multiply it by a number between 1 and 4 and this\n    -- gives us a vector with a side length of 1 to 4 on all axes.\n    local size = Vector3.one * (1 + math.random() * 3)\n\n    -- Pick a random colour with 3 `math.random` calls\n    local color = Color3.new(math.random(), math.random(), math.random())\n\n    -- Call the `CreateElement` method with the `ClassName` of the object you want to create,\n    -- and a dictionary of the properties to apply (you cannot specify the `Parent` property).\n    -- Note the `"3D"` context parameter, this says we want to use the instance viewport, you\n    -- could alternatively use `CreateElement3D` to avoid this third parameter.\n    local object = screen:CreateElement("Part", {\n        CFrame = orientation + position + Microcontroller.Position,\n        Size = size,\n        Color = color,\n        TopSurface = Enum.SurfaceType.Smooth,    -- The `Top` and `Bottom` surfaces\n        BottomSurface = Enum.SurfaceType.Smooth, -- have a stud pattern by default.\n    }, "3D")\nend\n\n-- Keep the microcontroller on by permanently \'yielding\' the code (making it wait).\ncoroutine.yield()\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"CreateElement3D",group:"method",children:"CreateElement3D(shape, properties) \u2192 part"}),"\n",(0,s.jsx)(n.p,{children:"Creates a 3D part instance in the player's viewport."}),"\n",(0,s.jsxs)(n.p,{children:["The parameters for ",(0,s.jsx)("code",{children:"CreateElement3D"})," are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"shape"})," parameter is a string that can be ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Ball",children:"Ball"})}),", ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Block",children:"Block"})}),", ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Cylinder",children:"Cylinder"})}),", ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Wedge",children:"Wedge"})}),",  or ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/CornerWedge",children:"CornerWedge"})})]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"properties"})," parameter is a dictionary with keys that are",(0,s.jsx)("code",{children:"string"}),"s and values that are ",(0,s.jsx)("code",{children:"any"}),"s."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"part"})," return is a ",(0,s.jsx)("code",{children:"Part"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"GetCanvas",group:"method",children:"GetCanvas"}),"\n",(0,s.jsx)(n.h4,{id:"overload-a--context--canvas",children:"Overload A \u2013 (context) \u2192 canvas"}),"\n",(0,s.jsx)(n.p,{children:"Returns the parent container of all the AR controller's 2D content."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"context"})," parameter is the string ",(0,s.jsx)("code",{children:"2D"}),". It can also be ",(0,s.jsx)("code",{children:"nil"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"canvas"})," return is a ",(0,s.jsx)("code",{children:"Folder"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"overload-b--context--canvas",children:"Overload B \u2013 (context) \u2192 canvas"}),"\n",(0,s.jsx)(n.p,{children:"Returns the parent container of all the AR controller's 3D content."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"context"})," parameter is the string ",(0,s.jsx)("code",{children:"3D"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"canvas"})," return is a ",(0,s.jsx)("code",{children:"WorldModel"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"GetCursor",group:"method",children:"GetCursor() \u2192 cursor"}),"\n",(0,s.jsx)(n.p,{children:"Returns the part owner's cursor, or, alternatively, any other player's cursor if the owner does not have a cursor (this is considered the primary user)."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"cursor"})," return is an ",(0,s.jsx)("code",{children:"ARCursor"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"GetCursors",group:"method",children:"GetCursors() \u2192 cursors"}),"\n",(0,s.jsx)(n.p,{children:"Gets a dictionary of player usernames to their cursors."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"cursors"})," return is a dictionary with keys that are",(0,s.jsx)("code",{children:"string"}),"s and values that are ",(0,s.jsx)("code",{children:"ARCursor"}),"s."]}),"\n",(0,s.jsx)(i.A,{id:"Configurables",group:"group",children:"Configurables"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"Transparency",group:"configurable",children:"Transparency"}),"\n",(0,s.jsxs)(n.p,{children:["The transparency of the AR display. It is a ",(0,s.jsx)("code",{children:"number"}),".\nIt ranges between 0 and 1."]}),"\n",(0,s.jsx)(i.A,{id:"Events",group:"group",children:"Events"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"Configured",group:"event",children:"Configured(configurerId)"}),"\n",(0,s.jsx)(n.p,{children:"Fires when the object is configured."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"configurerId"})," parameter is the ",(0,s.jsx)("code",{children:"UserId"})," of the player who configured the object. It is a ",(0,s.jsx)("code",{children:"number"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"CursorMoved",group:"event",children:"CursorMoved(cursor)"}),"\n",(0,s.jsx)(n.p,{children:"Fired when a player's cursor updates."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"cursor"})," parameter is an ",(0,s.jsx)("code",{children:"ARCursor"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"CursorPressed",group:"event",children:"CursorPressed(cursor)"}),"\n",(0,s.jsx)(n.p,{children:"Fired when a player left clicks."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"cursor"})," parameter is an ",(0,s.jsx)("code",{children:"ARCursor"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"CursorReleased",group:"event",children:"CursorReleased(cursor)"}),"\n",(0,s.jsx)(n.p,{children:"Fired when a player releases the left click button."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"cursor"})," parameter is an ",(0,s.jsx)("code",{children:"ARCursor"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"KeyPressed",group:"event",children:"KeyPressed(key, keyName, userId)"}),"\n",(0,s.jsx)(n.p,{children:"Fires when the user presses a key."}),"\n",(0,s.jsxs)(n.p,{children:["The parameters for ",(0,s.jsx)("code",{children:"KeyPressed"})," are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"key"})," parameter is the ",(0,s.jsx)("code",{children:"Enum.KeyCode"})," of the key that was pressed. It is an ",(0,s.jsx)("code",{children:"Enum.KeyCode"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"keyName"})," parameter is the letter of the key that was pressed. If the key is non-printable (i.e. shift or backspace) ",(0,s.jsx)("code",{children:"keyString"})," will be an empty string. If ",(0,s.jsx)("code",{children:"Shift"})," is held, it will be capitalised. It is a ",(0,s.jsx)("code",{children:"string"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"userId"})," parameter is the ",(0,s.jsx)("code",{children:"UserId"})," of the player who pressed the key. It is a ",(0,s.jsx)("code",{children:"number"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Get all of the necessary parts and throw a useful error if something isn\'t found.\nlocal anchor = assert(GetPart("Anchor"), "no anchor connected")\nlocal thrusterSwitch = assert(GetPart("Switch"), "no switch connected")\nlocal keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\n\n-- Define the `UserId`s of people who are allowed.\nlocal WHITELIST = {\n    [1178125707] = true,\n}\n\n-- Create a dictionary of what key to press to what code to run\nlocal BINDS = {\n    -- Toggle the anchor state when `R` is pressed.\n    [Enum.KeyCode.R] = function()\n        anchor.Anchor = not anchor.Anchor\n    end,\n    -- Toggle the switch state when `X` is pressed.\n    [Enum.KeyCode.X] = function()\n        thrusterSwitch.SwitchValue = not thrusterSwitch.SwitchValue\n    end,\n}\n\n-- Connect to the `keyboard.KeyPressed` event, we don\'t need the `keyName` variable,\n-- so we\'ll call it `_` as to say "we\'re not going to use this" to anyone reading the code.\nkeyboard.KeyPressed:Connect(function(key, _, userId)\n    -- If the user *isn\'t* in the whitelist, *cancel* this function using `return`.\n    if not WHITELIST[userId] then return end\n\n    -- Try and find the piece of code to run for the key that was pressed, if we don\'t find\n    -- it, cancel, like it\'s done when the user isn\'t in the whitelist.\n    local callback = BINDS[key]\n    if not callback then return end\n\n    -- Run the piece of code!\n    callback()\nend)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"OnClick",group:"event",children:"OnClick(clickerId)"}),"\n",(0,s.jsx)(n.p,{children:"Fires when the object is clicked."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"clickerId"})," parameter is a ",(0,s.jsx)("code",{children:"number"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(i.A,{id:"UserInput",group:"event",children:"UserInput(inputObject, userId)"}),"\n",(0,s.jsxs)(n.p,{children:["Will fire when a user presses a key, it is already filtered to ",(0,s.jsx)("code",{children:"gameProcessedEvent"})," being false."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameters for ",(0,s.jsx)("code",{children:"UserInput"})," are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"inputObject"})," parameter is the ",(0,s.jsx)("code",{children:"UserInputObject"})," produced by the player, is not whitelisted to any ",(0,s.jsx)("code",{children:"Enum.UserInputState"}),". It is a ",(0,s.jsx)("code",{children:"UserInputObject"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("b",{children:"userId"})," parameter is the ",(0,s.jsx)("code",{children:"UserId"})," of the player who pressed the input. It is a ",(0,s.jsx)("code",{children:"number"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local UPDATES_PER_TICK = 16 -- How many times to rotate per tick, higher is smoother.\nlocal ANGLE_INCREMENT = 4 -- Every 1/UPDATES_PER_TICK seconds increment the servo angle by this.\nlocal SHIFT_HELD_MULTIPLIER = 0.25 -- When shift is held, multiply the angle increment by this.\n\n-- Who can rotate the servos.\nlocal WHITELIST = {\n    [1178125707] = true,\n}\n\n-- Get references to all the hardware, everything is *required* except for the\n-- seat, which is optional.\nlocal yawServo = assert(GetPartFromPort(1, "Servo"), "no yaw servo connected")\nlocal pitchServo = assert(GetPartFromPort(2, "Servo"), "no pitch servo connected")\nlocal keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\nlocal seat = GetPart("Seat")\n\n-- Make sure the servos are wired properly!\nassert(yawServo ~= pitchServo, "there is only one servo connected")\n\nlocal servoAngles = {}\nlocal heldKeys = {}\n\nlocal function incrementAngle(servo, direction)\n    -- Make the `ANGLE_INCREMENT` negative if the direction is specified as `-1`\n    -- with a bit of multiplication.\n    local baseIncrement = ANGLE_INCREMENT * direction\n\n    -- If we need to initialise the target angle of the servo:\n    if not servoAngles[servo] then\n        -- Rotate it back to 0 degrees and initialise the current state.\n        servo:SetAngle(0)\n        servoAngles[servo] = 0\n    end\n\n    -- Here we return a new function, that when called, applies the angle increment\n    -- operation to the servo, this is a trick called a "closure".\n    return function()\n        -- Calculate the new angle, check if we\'re holding shift, if we are multiply\n        -- the increment by the `SHIFT_HELD_MULTIPLIER`\n        local multiplier = if heldKeys[Enum.KeyCode.LeftShift] then SHIFT_HELD_MULTIPLIER else 1\n        local currentAngle = baseIncrement * multiplier\n\n        -- Update both the real and internal servo angle.\n        servo:SetAngle(currentAngle)\n        servoAngles[servo] = currentAngle\n    end\nend\n\n-- Register all of the angle incrementing functions that should keep running\n-- whilst the user keeps holding the bind.\nlocal HOLD_BINDS = {\n    [Enum.KeyCode.W] = incrementAngle(pitchServo, 1),\n    [Enum.KeyCode.A] = incrementAngle(yawServo, 1),\n    [Enum.KeyCode.S] = incrementAngle(pitchServo, -1),\n    [Enum.KeyCode.D] = incrementAngle(yawServo, -1),\n}\n\n-- Register all of the general binds that only run on key down.\nlocal BINDS = {\n    [Enum.KeyCode.F] = function()\n        TriggerPort(3) -- Assume port 3 has something like guns!\n    end,\n}\n\n-- If we have a seat, we can detect when the user gets up and clear all the\n-- held keys as if they stopped inputting.\nif seat then\n    seat.OccupantChanged:Connect(function(occupant)\n        if occupant then return end -- If someone just sat down, cancel\n        table.clear(heldKeys) -- Whereas if someone got up, clear the held keys\n    end)\nelse\n    -- Provide a warning about issues that might occur when no seat is connected.\n    warn([[There is no seat connected to the microcontroller!\n      If a player jumps whilst holding an input, the input will get stuck!]])\nend\n\nkeyboard.UserInput:Connect(function(input, userId)\n    -- Check if the user is whitelisted, if they\'re not, cancel.\n    if not WHITELIST[userId] then return end\n\n    -- If the bind pressed has a function to run on key down, run it.\n    if BINDS[input.KeyCode] then\n        local callback = BINDS[input.KeyCode]\n        callback()\n    end\n\n    -- If the user *started* pressing the key, register it as held, otherwise\n    -- deregister it.\n    if input.UserInputState == Enum.UserInputState.Begin then\n        heldKeys[input.KeyCode] = true\n    elseif input.UserInputState == Enum.UserInputState.End then\n        heldKeys[input.KeyCode] = nil\n    end\nend)\n\n-- For each tick we want to call all the functions that should run for held keys.\n-- You could alternatively use a simple `while true do` loop, but this keeps it\n-- tick aligned, and tick alignment may provide benefits in some cases.\nMicrocontroller.Loop:Connect(function(tickDuration)\n    for index = 1, UPDATES_PER_TICK do\n        for key, callback in HOLD_BINDS do\n            -- If we\'re not holding this bind, look at the next bind.\n            if not heldKeys[key] then continue end\n            callback()\n        end\n\n        -- Wait a little for for the next time we should update.\n        task.wait(tickDuration / UPDATES_PER_TICK)\n    end\nend)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},81113:(e,n,r)=>{r.d(n,{A:()=>s});r(96540);var t=r(74848);function s(e){return(0,t.jsx)("svg",{viewBox:"0 0 24 24",...e,children:(0,t.jsx)("path",{fill:"currentColor",d:"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"})})}}}]);