"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[2953,8401],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},45776:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"objects/Keyboard","title":"Keyboard","description":"Similar to a button, except is programmable to take more than one key input.","source":"@site/docs/objects/Keyboard.mdx","sourceDirName":"objects","slug":"/objects/Keyboard","permalink":"/Pilot.lua-Luau-LSP/objects/Keyboard","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Logic","permalink":"/Pilot.lua-Luau-LSP/tags/logic"},{"inline":true,"label":"Spawnable","permalink":"/Pilot.lua-Luau-LSP/tags/spawnable"},{"inline":true,"label":"Craftable","permalink":"/Pilot.lua-Luau-LSP/tags/craftable"},{"inline":true,"label":"Programmable","permalink":"/Pilot.lua-Luau-LSP/tags/programmable"},{"inline":true,"label":"Non-Configurable","permalink":"/Pilot.lua-Luau-LSP/tags/non-configurable"}],"version":"current","frontMatter":{"tags":["Logic","Spawnable","Craftable","Programmable","Non-Configurable"]},"sidebar":"objectsSidebar","previous":{"title":"Katana","permalink":"/Pilot.lua-Luau-LSP/objects/Katana"},"next":{"title":"Kiln","permalink":"/Pilot.lua-Luau-LSP/objects/Kiln"}}');var i=t(74848),s=t(28453),a=t(59907);const l={tags:["Logic","Spawnable","Craftable","Programmable","Non-Configurable"]},o=void 0,c={},d=[{value:"Methods",id:"Methods",level:2},{value:"SimulateKeyPress()",id:"SimulateKeyPress",level:3},{value:"SimulateTextInput()",id:"SimulateTextInput",level:3},{value:"SimulateUserInput()",id:"SimulateUserInput",level:3},{value:"Events",id:"Events",level:2},{value:"KeyPressed",id:"KeyPressed",level:3},{value:"TextInputted",id:"TextInputted",level:3},{value:"UserInput",id:"UserInput",level:3}];function h(e){const n={code:"code",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Similar to a button, except is programmable to take more than one key input.\nCan be attached to a vehicle seat or clicked by a player.\nIt is a craftable and spawnable non-flammable solid."}),"\n",(0,i.jsx)(n.p,{children:"Here is a list of possible sizes that reach the maximum malleability (75) that have integer components: 1x1x75, 1x3x25, 1x5x15, 3x5x5"}),"\n",(0,i.jsx)(n.p,{children:"At its default size (5x0.5x2) it has a durability of 1, at its maximum size it has a durability of 3."}),"\n",(0,i.jsxs)(n.p,{children:["By default, its colour is ",(0,i.jsx)("span",{style:{color:"#{DCDCDD"},children:"#dcdcdd"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It requires 10 ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Button",children:"Button"})}),", 4 ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Quartz",children:"Quartz"})}),", and 5 ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/Pilot.lua-Luau-LSP/objects/Silicon",children:"Silicon"})})," to be crafted."]}),"\n",(0,i.jsx)(a.A,{id:"Methods",group:"group",children:"Methods"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"SimulateKeyPress",group:"method",children:"SimulateKeyPress(key, player)"}),"\n",(0,i.jsx)(n.p,{children:"Simulates a key press just like you would press a key on the keyboard."}),"\n",(0,i.jsxs)(n.p,{children:["The parameters for ",(0,i.jsx)("code",{children:"SimulateKeyPress"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"key"})," parameter is a ",(0,i.jsx)("code",{children:"string"}),". It can also be ",(0,i.jsx)("code",{children:"nil"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"player"})," parameter is a ",(0,i.jsx)("code",{children:"string"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"SimulateTextInput",group:"method",children:"SimulateTextInput(input, player)"}),"\n",(0,i.jsxs)(n.p,{children:["Simulates text input just like you would type in the keyboard and enter. This fires the ",(0,i.jsx)("code",{children:"TextInputted"})," event."]}),"\n",(0,i.jsxs)(n.p,{children:["The parameters for ",(0,i.jsx)("code",{children:"SimulateTextInput"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"input"})," parameter is a ",(0,i.jsx)("code",{children:"string"}),". It can also be ",(0,i.jsx)("code",{children:"nil"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"player"})," parameter is a ",(0,i.jsx)("code",{children:"string"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"SimulateUserInput",group:"method",children:"SimulateUserInput()"}),"\n",(0,i.jsx)(a.A,{id:"Events",group:"group",children:"Events"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"KeyPressed",group:"event",children:"KeyPressed(key, keyName, userId)"}),"\n",(0,i.jsx)(n.p,{children:"Fires when the user presses a key."}),"\n",(0,i.jsxs)(n.p,{children:["The parameters for ",(0,i.jsx)("code",{children:"KeyPressed"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"key"})," parameter is the ",(0,i.jsx)("code",{children:"Enum.KeyCode"})," of the key that was pressed. It is an ",(0,i.jsx)("code",{children:"Enum.KeyCode"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"keyName"})," parameter is the letter of the key that was pressed. If the key is non-printable (i.e. shift or backspace) ",(0,i.jsx)("code",{children:"keyString"})," will be an empty string. If ",(0,i.jsx)("code",{children:"Shift"})," is held, it will be capitalised. It is a ",(0,i.jsx)("code",{children:"string"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"userId"})," parameter is the ",(0,i.jsx)("code",{children:"UserId"})," of the player who pressed the key. It is a ",(0,i.jsx)("code",{children:"number"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get all of the necessary parts and throw a useful error if something isn\'t found.\nlocal anchor = assert(GetPart("Anchor"), "no anchor connected")\nlocal thrusterSwitch = assert(GetPart("Switch"), "no switch connected")\nlocal keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\n\n-- Define the `UserId`s of people who are allowed.\nlocal WHITELIST = {\n    [1178125707] = true,\n}\n\n-- Create a dictionary of what key to press to what code to run\nlocal BINDS = {\n    -- Toggle the anchor state when `R` is pressed.\n    [Enum.KeyCode.R] = function()\n        anchor.Anchor = not anchor.Anchor\n    end,\n    -- Toggle the switch state when `X` is pressed.\n    [Enum.KeyCode.X] = function()\n        thrusterSwitch.SwitchValue = not thrusterSwitch.SwitchValue\n    end,\n}\n\n-- Connect to the `keyboard.KeyPressed` event, we don\'t need the `keyName` variable,\n-- so we\'ll call it `_` as to say "we\'re not going to use this" to anyone reading the code.\nkeyboard.KeyPressed:Connect(function(key, _, userId)\n    -- If the user *isn\'t* in the whitelist, *cancel* this function using `return`.\n    if not WHITELIST[userId] then return end\n\n    -- Try and find the piece of code to run for the key that was pressed, if we don\'t find\n    -- it, cancel, like it\'s done when the user isn\'t in the whitelist.\n    local callback = BINDS[key]\n    if not callback then return end\n\n    -- Run the piece of code!\n    callback()\nend)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"TextInputted",group:"event",children:"TextInputted(text, player)"}),"\n",(0,i.jsx)(n.p,{children:"Fires when a player finishes typing into the keyboard. Note that a newline will\nbe present wherever the cursor of the player was when they pressed enter (generally\nthe end, but if they moved their cursor whilst typing, it may be in the middle\nof the text)."}),"\n",(0,i.jsxs)(n.p,{children:["The parameters for ",(0,i.jsx)("code",{children:"TextInputted"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"text"})," parameter is the text inputted into the keyboard. It is a ",(0,i.jsx)("code",{children:"string"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"player"})," parameter is the username of the player who inputted the text. It is a ",(0,i.jsx)("code",{children:"string"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(a.A,{id:"UserInput",group:"event",children:"UserInput(inputObject, userId)"}),"\n",(0,i.jsxs)(n.p,{children:["Will fire when a user presses a key, it is already filtered to ",(0,i.jsx)("code",{children:"gameProcessedEvent"})," being false."]}),"\n",(0,i.jsxs)(n.p,{children:["The parameters for ",(0,i.jsx)("code",{children:"UserInput"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"inputObject"})," parameter is the ",(0,i.jsx)("code",{children:"UserInputObject"})," produced by the player, is not whitelisted to any ",(0,i.jsx)("code",{children:"Enum.UserInputState"}),". It is a ",(0,i.jsx)("code",{children:"UserInputObject"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)("b",{children:"userId"})," parameter is the ",(0,i.jsx)("code",{children:"UserId"})," of the player who pressed the input. It is a ",(0,i.jsx)("code",{children:"number"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local UPDATES_PER_TICK = 16 -- How many times to rotate per tick, higher is smoother.\nlocal ANGLE_INCREMENT = 4 -- Every 1/UPDATES_PER_TICK seconds increment the servo angle by this.\nlocal SHIFT_HELD_MULTIPLIER = 0.25 -- When shift is held, multiply the angle increment by this.\n\n-- Who can rotate the servos.\nlocal WHITELIST = {\n    [1178125707] = true,\n}\n\n-- Get references to all the hardware, everything is *required* except for the\n-- seat, which is optional.\nlocal yawServo = assert(GetPartFromPort(1, "Servo"), "no yaw servo connected")\nlocal pitchServo = assert(GetPartFromPort(2, "Servo"), "no pitch servo connected")\nlocal keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\nlocal seat = GetPart("Seat")\n\n-- Make sure the servos are wired properly!\nassert(yawServo ~= pitchServo, "there is only one servo connected")\n\nlocal servoAngles = {}\nlocal heldKeys = {}\n\nlocal function incrementAngle(servo, direction)\n    -- Make the `ANGLE_INCREMENT` negative if the direction is specified as `-1`\n    -- with a bit of multiplication.\n    local baseIncrement = ANGLE_INCREMENT * direction\n\n    -- If we need to initialise the target angle of the servo:\n    if not servoAngles[servo] then\n        -- Rotate it back to 0 degrees and initialise the current state.\n        servo:SetAngle(0)\n        servoAngles[servo] = 0\n    end\n\n    -- Here we return a new function, that when called, applies the angle increment\n    -- operation to the servo, this is a trick called a "closure".\n    return function()\n        -- Calculate the new angle, check if we\'re holding shift, if we are multiply\n        -- the increment by the `SHIFT_HELD_MULTIPLIER`\n        local multiplier = if heldKeys[Enum.KeyCode.LeftShift] then SHIFT_HELD_MULTIPLIER else 1\n        local currentAngle = baseIncrement * multiplier\n\n        -- Update both the real and internal servo angle.\n        servo:SetAngle(currentAngle)\n        servoAngles[servo] = currentAngle\n    end\nend\n\n-- Register all of the angle incrementing functions that should keep running\n-- whilst the user keeps holding the bind.\nlocal HOLD_BINDS = {\n    [Enum.KeyCode.W] = incrementAngle(pitchServo, 1),\n    [Enum.KeyCode.A] = incrementAngle(yawServo, 1),\n    [Enum.KeyCode.S] = incrementAngle(pitchServo, -1),\n    [Enum.KeyCode.D] = incrementAngle(yawServo, -1),\n}\n\n-- Register all of the general binds that only run on key down.\nlocal BINDS = {\n    [Enum.KeyCode.F] = function()\n        TriggerPort(3) -- Assume port 3 has something like guns!\n    end,\n}\n\n-- If we have a seat, we can detect when the user gets up and clear all the\n-- held keys as if they stopped inputting.\nif seat then\n    seat.OccupantChanged:Connect(function(occupant)\n        if occupant then return end -- If someone just sat down, cancel\n        table.clear(heldKeys) -- Whereas if someone got up, clear the held keys\n    end)\nelse\n    -- Provide a warning about issues that might occur when no seat is connected.\n    warn([[There is no seat connected to the microcontroller!\n      If a player jumps whilst holding an input, the input will get stuck!]])\nend\n\nkeyboard.UserInput:Connect(function(input, userId)\n    -- Check if the user is whitelisted, if they\'re not, cancel.\n    if not WHITELIST[userId] then return end\n\n    -- If the bind pressed has a function to run on key down, run it.\n    if BINDS[input.KeyCode] then\n        local callback = BINDS[input.KeyCode]\n        callback()\n    end\n\n    -- If the user *started* pressing the key, register it as held, otherwise\n    -- deregister it.\n    if input.UserInputState == Enum.UserInputState.Begin then\n        heldKeys[input.KeyCode] = true\n    elseif input.UserInputState == Enum.UserInputState.End then\n        heldKeys[input.KeyCode] = nil\n    end\nend)\n\n-- For each tick we want to call all the functions that should run for held keys.\n-- You could alternatively use a simple `while true do` loop, but this keeps it\n-- tick aligned, and tick alignment may provide benefits in some cases.\nMicrocontroller.Loop:Connect(function(tickDuration)\n    for index = 1, UPDATES_PER_TICK do\n        for key, callback in HOLD_BINDS do\n            -- If we\'re not holding this bind, look at the next bind.\n            if not heldKeys[key] then continue end\n            callback()\n        end\n\n        -- Wait a little for for the next time we should update.\n        task.wait(tickDuration / UPDATES_PER_TICK)\n    end\nend)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},59907:(e,n,t)=>{t.d(n,{A:()=>f});t(96540);var r=t(34164),i=t(21312),s=t(6342),a=t(28774),l=t(63427),o=t(92303),c=t(74848);function d({children:e,fallback:n}){return(0,o.A)()?(0,c.jsx)(c.Fragment,{children:e?.()}):n??null}var h=t(61409),u=t(81113);function p(e){return(0,c.jsx)("svg",{viewBox:"0 0 24 24",...e,children:(0,c.jsx)("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"})})}const m={anchorWithStickyNavbar:"anchorWithStickyNavbar_wkc4",anchorWithHideOnScrollNavbar:"anchorWithHideOnScrollNavbar_m_Ui"};var x=t(56347);function f({id:e,group:n,...t}){const o=(0,l.A)(),{navbar:{hideOnScroll:f}}=(0,s.p)();o.collectAnchor(e);const y="group"===n?"h2":"h3",g=(0,i.T)({id:"theme.common.headingLinkTitle",message:"Direct link to {heading}",description:"Title for link to heading"},{heading:e}),b=(0,i.T)({id:"theme.common.markdownLinkTitle",message:"Copy markdown link to {heading}",description:"Markdown for link to heading"},{heading:e}),j=(0,x.zy)().pathname;return(0,c.jsxs)(y,{...t,className:(0,r.A)("anchor",f?m.anchorWithHideOnScrollNavbar:m.anchorWithStickyNavbar,t.className),id:e,children:[t.children,(0,c.jsx)(a.A,{className:"icon-link",to:`#${e}`,"aria-label":g,title:g,children:(0,c.jsx)(p,{width:"0.75em",height:"0.75em"})}),(0,c.jsx)(d,{children:()=>{const t=location.pathname.split("/").filter(Boolean),r=t[t.length-1],i=`[${"group"==n?`\`${r}\`'s ${e.toLowerCase()}`:"method"==n?`\`${r}:${e}()\``:`\`${r}.${e}\``}](<${`${window.location.origin}${j}#${e}`}>)`;return(0,c.jsx)("a",{className:"icon-link","aria-label":b,title:b,onClick:()=>{h.oR.dark((0,c.jsxs)("a",{children:["Copied the ",(0,c.jsx)("code",{children:e})," link to clipboard."]}),{position:"top-center",autoClose:1e3,hideProgressBar:!0,closeOnClick:!0,pauseOnHover:!0,draggable:!1,progress:void 0,theme:"colored",transition:h.GP}),navigator.clipboard.writeText(i)},children:(0,c.jsx)(u.A,{width:"0.75em",height:"0.75em"})})}})]})}},81113:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(74848);function i(e){return(0,r.jsx)("svg",{viewBox:"0 0 24 24",...e,children:(0,r.jsx)("path",{fill:"currentColor",d:"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"})})}}}]);