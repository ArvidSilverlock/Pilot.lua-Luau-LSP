"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[3882],{7896:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"objects/Spotlight","title":"Spotlight","description":"Emits light in a cone when powered with electricity. Color emition can be changed by coloring it.","source":"@site/docs/objects/Spotlight.md","sourceDirName":"objects","slug":"/objects/Spotlight","permalink":"/Pilot.lua-Luau-LSP/objects/Spotlight","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Electrical","permalink":"/Pilot.lua-Luau-LSP/tags/electrical"},{"inline":true,"label":"Decoration","permalink":"/Pilot.lua-Luau-LSP/tags/decoration"},{"inline":true,"label":"Spawnable","permalink":"/Pilot.lua-Luau-LSP/tags/spawnable"},{"inline":true,"label":"Craftable","permalink":"/Pilot.lua-Luau-LSP/tags/craftable"},{"inline":true,"label":"Programmable","permalink":"/Pilot.lua-Luau-LSP/tags/programmable"},{"inline":true,"label":"Non-Configurable","permalink":"/Pilot.lua-Luau-LSP/tags/non-configurable"}],"version":"current","frontMatter":{"tags":["Electrical","Decoration","Spawnable","Craftable","Programmable","Non-Configurable"]},"sidebar":"objectsSidebar","previous":{"title":"Spheroid","permalink":"/Pilot.lua-Luau-LSP/objects/Spheroid"},"next":{"title":"StanSword","permalink":"/Pilot.lua-Luau-LSP/objects/StanSword"}}');var a=o(4848),i=o(8453);const r={tags:["Electrical","Decoration","Spawnable","Craftable","Programmable","Non-Configurable"]},l=void 0,s={},c=[{value:"Methods",id:"methods",level:2},{value:"SetColor(color)",id:"setcolorcolor",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Emits light in a cone when powered with electricity. Color emition can be changed by coloring it."}),"\n",(0,a.jsx)(t.p,{children:"It is a craftable and spawnable non-flammable solid."}),"\n",(0,a.jsx)(t.p,{children:"Here is a list of possible sizes that reach the maximum malleability (256) that have integer components: 1x256x1, 1x128x2, 1x64x4, 1x32x8, 1x16x16, 2x64x2, 2x32x4, 2x16x8, 4x16x4, 4x8x8, 16x8x2, 16x4x4"}),"\n",(0,a.jsx)(t.p,{children:"At its default size (2x2x2) it has a durability of 1, at its maximum size it has a durability of 4."}),"\n",(0,a.jsxs)(t.p,{children:["By default, its colour is ",(0,a.jsx)("span",{style:{color:"#FFFFFF"},children:"#ffffff"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["It requires 1 ",(0,a.jsx)("code",{children:"Glass"}),", 1 ",(0,a.jsx)("code",{children:"Iron"}),", and 2 ",(0,a.jsx)("code",{children:"Wire"})," to be crafted."]}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"setcolorcolor",children:"SetColor(color)"}),"\n",(0,a.jsx)(t.p,{children:"Sets the color of the object."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)("b",{children:"color"})," parameter is the ",(0,a.jsx)("code",{children:"Color3"})," of the color you want to set the object to. It is a ",(0,a.jsx)("code",{children:"Color3"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:"local sift = require(\"sift\") -- Grab this fancy library for manipulating tables provided by wos.\n\n-- Get all of the types of objects with a `:SetColor` method and merge them into one big table.\nlocal objects = sift.Array.merge(\n    GetParts(\"Light\"),\n    GetParts(\"LightTube\"),\n    GetParts(\"SpotLight\"),\n    GetParts(\"EnergyShield\")\n)\n\n-- We want this to run infinitely, but we want to run it every frame, rather than every game\n-- tick, so we won't use the `Microcontroller.Loop` event.\nwhile true do\n    -- First we want to get the current time, the function `os.clock` gives us a very precise\n    -- measurement of the current time (if you want to know, it basically uses the internal\n    -- clock of the computer running the code).\n    local currentTime = os.clock()\n\n    -- We then use the 'modulo' operator, what this does is it gives you the 'remainder'\n    -- from the division. So if you do something like `5.25 % 1` you get out the `0.25`,\n    -- or if you do, say, `31 % 2`, since 31 isn't divisble by 2 you get a remainder of `1`.\n\n    -- We do this so we just get the fractional aspect of the time (which would be the\n    -- milliseconds), giving us a number between 0 and 1.\n    local hue = currentTime % 1\n\n    -- We then construct a `Color3` passing in the value we just calculated, which, since\n    -- we used the modulo operator is always going to be between 0 and 1, the exact range\n    -- needed for the 'hue' of the `fromHSV`. We just set the 'saturation' and 'brightness'\n    -- to 1 to keep the colour nice and bright.\n\n    -- A helpful feature of the HSV colour space is that a hue of both `0` and `1` are red!\n    local color = Color3.fromHSV(hue, 1, 1)\n\n    -- Now we have our colour, we just want to apply it to all of our objects, so we'll use\n    -- a simple for loop. The 'index' or 'key' value is named '_' since we don't need it,\n    -- and naming it '_' is a good way to say it's an unused variable.\n    for _, object in objects do\n        -- Simply call the `SetColor` method (since it's a method, we use a `:` when\n        -- calling the function, rather than a `.`) passing in the `Color3`!\n        object:SetColor(color)\n    end\n\n      -- Wait a little bit before updating the colour again!\n    task.wait()\nend\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>l});var n=o(6540);const a={},i=n.createContext(a);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);