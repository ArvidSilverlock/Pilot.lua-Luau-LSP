"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[7542],{6667:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"objects/TemperatureGate","title":"TemperatureGate","description":"The gate will allow power to pass through it while the temperature is in a certain range.","source":"@site/docs/objects/TemperatureGate.md","sourceDirName":"objects","slug":"/objects/TemperatureGate","permalink":"/Pilot.lua-Luau-LSP/objects/TemperatureGate","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Logic","permalink":"/Pilot.lua-Luau-LSP/tags/logic"},{"inline":true,"label":"Spawnable","permalink":"/Pilot.lua-Luau-LSP/tags/spawnable"},{"inline":true,"label":"Craftable","permalink":"/Pilot.lua-Luau-LSP/tags/craftable"},{"inline":true,"label":"Programmable","permalink":"/Pilot.lua-Luau-LSP/tags/programmable"},{"inline":true,"label":"Configurable","permalink":"/Pilot.lua-Luau-LSP/tags/configurable"}],"version":"current","frontMatter":{"tags":["Logic","Spawnable","Craftable","Programmable","Configurable"]},"sidebar":"objectsSidebar","previous":{"title":"Telescope","permalink":"/Pilot.lua-Luau-LSP/objects/Telescope"},"next":{"title":"TemperatureSensor","permalink":"/Pilot.lua-Luau-LSP/objects/TemperatureSensor"}}');var a=r(4848),i=r(8453);const l={tags:["Logic","Spawnable","Craftable","Programmable","Configurable"]},s=void 0,o={},c=[{value:"Methods",id:"methods",level:2},{value:"GetState()",id:"getstate",level:3},{value:"GetTemp() \u2192 temperature",id:"gettemp--temperature",level:3},{value:"GetTemperature() \u2192 temperature",id:"gettemperature--temperature",level:3},{value:"Configurables",id:"configurables",level:2},{value:"Inverted",id:"inverted",level:3},{value:"SwitchValue",id:"switchvalue",level:3},{value:"TemperatureRange",id:"temperaturerange",level:3},{value:"Events",id:"events",level:2},{value:"Configured(configurerId)",id:"configuredconfigurerid",level:3}];function h(e){const t={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The gate will allow power to pass through it while the temperature is in a certain range.\nIt can be used in conjunction with a ",(0,a.jsx)("code",{children:"Transistor"})," part to control the flow of generated trigger signals based on its temperature."]}),"\n",(0,a.jsxs)(t.p,{children:["Like the ",(0,a.jsx)("code",{children:"TemperatureSensor"})," part, it will also use the attached Reactor temperature if there is one.\nThough, unlike the ",(0,a.jsx)("code",{children:"TemperatureSensor"})," part, this one updates at a much faster 20 tps instead of 0.5 tps."]}),"\n",(0,a.jsx)(t.p,{children:"It is a craftable and spawnable non-flammable solid."}),"\n",(0,a.jsx)(t.p,{children:"Here is a list of possible sizes that reach the maximum malleability (64) that have integer components: 1x64x1, 1x32x2, 1x16x4, 1x8x8, 2x16x2, 2x8x4, 4x4x4, 8x4x2"}),"\n",(0,a.jsx)(t.p,{children:"At its default size (1x1x2) it has a durability of 1, at its maximum size it has a durability of 4."}),"\n",(0,a.jsxs)(t.p,{children:["By default, its colour is ",(0,a.jsx)("span",{style:{color:"#633B38"},children:"#633b38"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["It requires 1 ",(0,a.jsx)("code",{children:"Switch"}),", 1 ",(0,a.jsx)("code",{children:"TemperatureSensor"}),", and 1 ",(0,a.jsx)("code",{children:"Transistor"})," to be crafted."]}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"getstate",children:"GetState()"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"gettemp--temperature",children:"GetTemp() \u2192 temperature"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)("b",{children:"temperature"})," return is a ",(0,a.jsx)("code",{children:"number"}),"."]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"gettemperature--temperature",children:"GetTemperature() \u2192 temperature"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)("b",{children:"temperature"})," return is a ",(0,a.jsx)("code",{children:"number"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"configurables",children:"Configurables"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"inverted",children:"Inverted"}),"\n",(0,a.jsxs)(t.p,{children:["Whether or not the state will be inverted. It is a ",(0,a.jsx)("code",{children:"boolean"}),"."]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"switchvalue",children:"SwitchValue"}),"\n",(0,a.jsxs)(t.p,{children:["Determines whether the switch is active or not. It is a ",(0,a.jsx)("code",{children:"boolean"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'local sift = require("sift") -- Grab this fancy library for manipulating tables provided by wos.\n\n-- Get all of the types of objects with a `SwitchValue` (save for `TemperatureGate`) configurable\n-- and merge them into one big table.\nlocal objects = sift.Array.merge(\n    GetParts("Switch"),\n    GetParts("TriggerSwitch"),\n    GetParts("Valve"),\n    GetParts("Hatch"),\n    GetParts("HeatValve")\n)\n\n-- Have a 50/50 chance to be on/off when the code starts running.\nlocal initialState = math.random() > 0.5\n\n-- Iterate over all of the switch objects and disable them. `_` is used as a placeholder variable.\nfor _, switch in objects do\n    -- You could alternatively do `switch:Configure({ SwitchValue = initialState })`\n    switch.SwitchValue = initialState\nend\n\n-- Connect to the `Loop` event of the `Microcontroller` that is running the code,\n-- this will make the code within run precisely every game tick.\nMicrocontroller.Loop:Connect(function()\n    -- Iterate over all the switches again!\n    for _, switch in objects do\n        -- Here we *read* the `SwitchValue`, then invert it, then write it back, as\n        -- to toggle the switch.\n        switch.SwitchValue = not switch.SwitchValue\n    end\nend)\n'})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"temperaturerange",children:"TemperatureRange"}),"\n",(0,a.jsxs)(t.p,{children:["The range of temperatures (\xb0F) within which the gate will be open. It is a ",(0,a.jsx)("code",{children:"NumberRange"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"configuredconfigurerid",children:"Configured(configurerId)"}),"\n",(0,a.jsx)(t.p,{children:"Fires when the object is configured."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)("b",{children:"configurerId"})," parameter is the ",(0,a.jsx)("code",{children:"UserId"})," of the player who configured the object. It is a ",(0,a.jsx)("code",{children:"number"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>s});var n=r(6540);const a={},i=n.createContext(a);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);