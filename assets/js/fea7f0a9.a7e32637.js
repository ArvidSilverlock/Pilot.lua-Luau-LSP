"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[3495],{28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>d});var r=o(96540);const s={},i=r.createContext(s);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:n},e.children)}},44173:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"modules/coordinates","title":"coordinates","description":"Provides several functions for working with Coordinates","source":"@site/docs/modules/coordinates.md","sourceDirName":"modules","slug":"/modules/coordinates","permalink":"/Pilot.lua-Luau-LSP/modules/coordinates","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"moduleSidebar","previous":{"title":"ar_input","permalink":"/Pilot.lua-Luau-LSP/modules/ar_input"},"next":{"title":"fs","permalink":"/Pilot.lua-Luau-LSP/modules/fs"}}');var s=o(74848),i=o(28453);const t={},d=void 0,a={},c=[{value:"new(ux, uy, sx, sy, inPlanet)",id:"newux-uy-sx-sy-inplanet",level:3},{value:"fromString(coordinate, bounds)",id:"fromstringcoordinate-bounds",level:3},{value:"fromVectors(universeCoordinate, solarCoordinate, inPlanet)",id:"fromvectorsuniversecoordinate-solarcoordinate-inplanet",level:3},{value:"DEFAULT_COORDINATE_BOUNDS",id:"default_coordinate_bounds",level:3},{value:"NO_COORDINATE_BOUNDS",id:"no_coordinate_bounds",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Provides several functions for working with ",(0,s.jsxs)(n.a,{href:"/types/Universe%20Info/Coordinates",children:[(0,s.jsx)("code",{children:"Coordinate"}),"s"]})]}),"\n",(0,s.jsx)(n.p,{children:"Note that you will see references to a 'CoordinateBounds' type, this is just an array structed as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"{\n\tVector2.new(-100, 100), -- universe x ranges from -100 to 100 (inclusive)\n\tVector2.new(-100, 100), -- universe y ranges from -100 to 100 (inclusive)\n\tVector2.new(-10, 10), -- solar x ranges from -10 to 10 (inclusive)\n\tVector2.new(-10, 10), -- solar y ranges from -10 to 10 (inclusive)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That being, an array containing for ",(0,s.jsx)("code",{children:"Vector2"}),"s, each one representing the minimm and maximum value for that component of the coordinate."]}),"\n",(0,s.jsx)(n.h3,{id:"newux-uy-sx-sy-inplanet",children:"new(ux, uy, sx, sy, inPlanet)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("code",{children:"ux"})," and ",(0,s.jsx)("code",{children:"uy"})," are integers and represent the universe ",(0,s.jsx)("code",{children:"X"})," and ",(0,s.jsx)("code",{children:"Y"})," coordinaes of the resulting coordinate."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("code",{children:"sx"})," and ",(0,s.jsx)("code",{children:"sy"})," are integers and represent the solar ",(0,s.jsx)("code",{children:"X"})," and ",(0,s.jsx)("code",{children:"Y"})," coordinaes of the resulting coordinate."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("code",{children:"inPlanet"})," is a boolean as to whether the resulting coordinate should represent a planet or a planets orbit."]}),"\n",(0,s.jsx)(n.h3,{id:"fromstringcoordinate-bounds",children:"fromString(coordinate, bounds)"}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)("code",{children:"Coordinate"})," given the familiar format of a string ",(0,s.jsx)("code",{children:'"0, 0, 0, 0, false"'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("code",{children:"bounds"})," is a ",(0,s.jsx)("code",{children:"CoordinateBounds"}),", and will clamp the ",(0,s.jsx)("code",{children:"coordinate"})," string."]}),"\n",(0,s.jsx)(n.h3,{id:"fromvectorsuniversecoordinate-solarcoordinate-inplanet",children:"fromVectors(universeCoordinate, solarCoordinate, inPlanet)"}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)("code",{children:"Coordinate"})," given the format ",(0,s.jsx)("code",{children:"Vector2.new(universeX, universeY), Vector2.new(solarX, solarY), false"}),". This function does not apply any ",(0,s.jsx)("code",{children:"CoordinateBounds"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"default_coordinate_bounds",children:"DEFAULT_COORDINATE_BOUNDS"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)("code",{children:"CoordinateBounds"})," of \xb1100 for universe coordinates and \xb110 for solar coordinates."]}),"\n",(0,s.jsx)(n.h3,{id:"no_coordinate_bounds",children:"NO_COORDINATE_BOUNDS"}),"\n",(0,s.jsxs)(n.p,{children:["A completely unbounded ",(0,s.jsx)("code",{children:"CoordinateBounds"})," of \xb1\u221e for universe coordinates and \xb1\u221e for solar coordinates."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);