"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[3761],{15050:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"help/assert","title":"Assert","description":"You\'ll see assert calls dotted around, often doing this such as local screen = assert(GetPart(\\"Screen\\"), \\"no screen connected\\").","source":"@site/docs/help/assert.md","sourceDirName":"help","slug":"/help/assert","permalink":"/Pilot.lua-Luau-LSP/help/assert","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"helpSidebar","next":{"title":"Events","permalink":"/Pilot.lua-Luau-LSP/help/events"}}');var r=s(74848),i=s(28453);const a={},l="Assert",o={},c=[];function d(e){const t={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"assert",children:"Assert"})}),"\n",(0,r.jsxs)(t.p,{children:["You'll see assert calls dotted around, often doing this such as ",(0,r.jsx)("code",{children:'local screen = assert(GetPart("Screen"), "no screen connected")'}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["This may be confusing to people who have never seen assert before, but all it is doing, is taking the first parameter, checking if it is ",(0,r.jsx)("code",{children:"false"})," or ",(0,r.jsx)("code",{children:"nil"}),", and if it ",(0,r.jsx)(t.em,{children:"is"}),", throwing the text in the second parameter as an error, but if it ",(0,r.jsx)(t.em,{children:"isn't"}),", it returns the first parameter."]}),"\n",(0,r.jsx)(t.p,{children:"For example, doing something like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local value = assert(32, \"value is nil!\") -- this will run fine\nprint(value) -- '32'\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"-- This will error\nlocal value = assert(nil, \"value is nil!\") -- 'value is nil!'\nprint(value) -- this will not run\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This same logic applies to the return value of ",(0,r.jsx)("code",{children:"GetPart(s)(FromPort)"}),', allowing us to easily throw useful errors if no object is connected, which helps prevents the whole class of "attempt to index nil with ..." relating to objects being disconnected.']})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);