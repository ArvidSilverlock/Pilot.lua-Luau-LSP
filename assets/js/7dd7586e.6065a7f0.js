"use strict";(self.webpackChunkwos_wiki=self.webpackChunkwos_wiki||[]).push([[1941],{8875:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var r=s(4848),i=s(8453);const l={},t=void 0,a={id:"Classes/UserInput",title:"UserInput",description:"Configurables",source:"@site/docs/Classes/UserInput.md",sourceDirName:"Classes",slug:"/Classes/UserInput",permalink:"/Pilot.lua-Luau-LSP/docs/Classes/UserInput",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Tool",permalink:"/Pilot.lua-Luau-LSP/docs/Classes/Tool"},next:{title:"100k",permalink:"/Pilot.lua-Luau-LSP/docs/Objects/100k"}},c={},o=[{value:"Configurables",id:"configurables",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"configurables",children:"Configurables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"boolean"})," GamepadEnabled","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This property describes whether the device being used by a user has an available gamepad. If gamepads are available."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"boolean"})," VREnabled","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This property describes whether the user is using a virtual reality (VR) device."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"boolean"})," KeyboardEnabled","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This property describes whether the user's device has a keyboard available. This property is ",(0,r.jsx)(n.code,{children:"true"})," when the user's device has an available keyboard, and ",(0,r.jsx)(n.code,{children:"false"})," when it does not."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Enum.UserInputType"})," LastInputType","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The 'Enum.UserInputType` associated with the user's most recent input."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"{ InputObject }"})," Mouse","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An array of ",(0,r.jsx)(n.code,{children:"InputObjects"})," corresponding to the mouse buttons currently being currently held down."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"{ [EnumUserInputType]: { InputObject } }"})," Gamepad","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An dictionary of ",(0,r.jsx)(n.code,{children:"Enum.UserInputType.GamepadX"})," keys to an array of ",(0,r.jsx)(n.code,{children:"InputObjects"})," representing the current state of all available inputs for said gamepad as values."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"{ InputObject }"})," Keyboard","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An array of ",(0,r.jsx)(n.code,{children:"InputObjects"})," associated with the keys currently being pressed."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"boolean"})," TouchEnabled","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This property describes whether the user's current device has a touch screen available."}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);