"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[7316],{7153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"raw-documentation","title":"raw-documentation","description":"Use Ctrl+F, or \u2318+F on Mac to search for information you need.","source":"@site/docs/raw-documentation.md","sourceDirName":".","slug":"/raw-documentation","permalink":"/Pilot.lua-Luau-LSP/raw-documentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var a=t(4848),r=t(8453);const i={},s=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Use Ctrl+F, or \u2318+F on Mac to search for information you need."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'variables:\n  - &ComponentsUpdatedEvent\n    documentation: This event never seems to fire, only tested on the deprecated <code>Blade</code> part, though.\n    parameters:\n      - name: ...\n        type: any\n        documentation: Unknown.\n  - &ConfiguredEvent\n    documentation: Fires when the object is configured.\n    parameters:\n      - name: configurerId\n        type: number\n        documentation: The <code>UserId</code> of the player who configured the object.\n  - &DamagedEvent\n    documentation: Fires when the object is damaged.\n    parameters:\n      - name: damage\n        type: number\n        documentation: The numerical damage dealt.\n      - name: damageType\n        string-union:\n          - Kinetic\n          - Energy\n        documentation: The type of damage dealt.\n      - name: damageSource\n        nullable-type: PilotObject\n        documentation: Will return a reference to the attacking object, seems to provide references to <code>EnergyGun</code>s, <code>Laser</code>s and <code>Gun</code>s, but not <code>Blade</code>s or <code>PlasmaCannon</code>s, there are other members of these lists that are untested.\n  - &LoopEvent\n    documentation: Fires when the object is updated by the game loop.\n    parameters:\n      - name: deltaTime\n        type: number\n        documentation: The \'time\' since the last tick, it does not represent the <i>actual</i> time since the last tick was occurred, rather just how often a game tick should be fired (it will always be precisely <code>1</code>).\n  - &OnClickEvent\n    documentation: Fires when the object is clicked.\n    parameters:\n      - name: clickerId\n        type: number\n        documentation: The <code>UserId</code> of the player who clicked the object.\n  - &TriggeredEvent\n    documentation: |-\n      Fires when the object is triggered and provides a reference to the part that triggered it.\n\n      If a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\n      The trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line.\n    parameters:\n      - name: otherPart\n        type: PilotObject\n        documentation: The source of the trigger signal.\n  - &UserInputEvent\n    documentation:\n      description: Will fire when a user presses a key, it is already filtered to <code>gameProcessedEvent</code> being false.\n      code-sample: |-\n        local UPDATES_PER_TICK = 16 -- How many times to rotate per tick, higher is smoother.\n        local ANGLE_INCREMENT = 4 -- Every 1/UPDATES_PER_TICK seconds increment the servo angle by this.\n        local SHIFT_HELD_MULTIPLIER = 0.25 -- When shift is held, multiply the angle increment by this.\n\n        -- Who can rotate the servos.\n        local WHITELIST = {\n            [1178125707] = true,\n        }\n\n        -- Get references to all the hardware, everything is *required* except for the\n        -- seat, which is optional.\n        local yawServo = assert(GetPartFromPort(1, "Servo"), "no yaw servo connected")\n        local pitchServo = assert(GetPartFromPort(2, "Servo"), "no pitch servo connected")\n        local keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\n        local seat = GetPart("Seat")\n\n        -- Make sure the servos are wired properly!\n        assert(yawServo ~= pitchServo, "there is only one servo connected")\n\n        local servoAngles = {}\n        local heldKeys = {}\n\n        local function incrementAngle(servo, direction)\n            -- Make the `ANGLE_INCREMENT` negative if the direction is specified as `-1`\n            -- with a bit of multiplication.\n            local baseIncrement = ANGLE_INCREMENT * direction\n\n            -- If we need to initialise the target angle of the servo:\n            if not servoAngles[servo] then\n                -- Rotate it back to 0 degrees and initialise the current state.\n                servo:SetAngle(0)\n                servoAngles[servo] = 0\n            end\n\n            -- Here we return a new function, that when called, applies the angle increment\n            -- operation to the servo, this is a trick called a "closure".\n            return function()\n                -- Calculate the new angle, check if we\'re holding shift, if we are multiply\n                -- the increment by the `SHIFT_HELD_MULTIPLIER`\n                local multiplier = if heldKeys[Enum.KeyCode.LeftShift] then SHIFT_HELD_MULTIPLIER else 1\n                local currentAngle = baseIncrement * multiplier\n\n                -- Update both the real and internal servo angle.\n                servo:SetAngle(currentAngle)\n                servoAngles[servo] = currentAngle\n            end\n        end\n\n        -- Register all of the angle incrementing functions that should keep running\n        -- whilst the user keeps holding the bind.\n        local HOLD_BINDS = {\n            [Enum.KeyCode.W] = incrementAngle(pitchServo, 1),\n            [Enum.KeyCode.A] = incrementAngle(yawServo, 1),\n            [Enum.KeyCode.S] = incrementAngle(pitchServo, -1),\n            [Enum.KeyCode.D] = incrementAngle(yawServo, -1),\n        }\n\n        -- Register all of the general binds that only run on key down.\n        local BINDS = {\n            [Enum.KeyCode.F] = function()\n                TriggerPort(3) -- Assume port 3 has something like guns!\n            end,\n        }\n\n        -- If we have a seat, we can detect when the user gets up and clear all the\n        -- held keys as if they stopped inputting.\n        if seat then\n            seat.OccupantChanged:Connect(function(occupant)\n                if occupant then return end -- If someone just sat down, cancel\n                table.clear(heldKeys) -- Whereas if someone got up, clear the held keys\n            end)\n        else\n            -- Provide a warning about issues that might occur when no seat is connected.\n            warn([[There is no seat connected to the microcontroller!\n              If a player jumps whilst holding an input, the input will get stuck!]])\n        end\n\n        keyboard.UserInput:Connect(function(input, userId)\n            -- Check if the user is whitelisted, if they\'re not, cancel.\n            if not WHITELIST[userId] then return end\n\n            -- If the bind pressed has a function to run on key down, run it.\n            if BINDS[input.KeyCode] then\n                local callback = BINDS[input.KeyCode]\n                callback()\n            end\n\n            -- If the user *started* pressing the key, register it as held, otherwise\n            -- deregister it.\n            if input.UserInputState == Enum.UserInputState.Begin then\n                heldKeys[input.KeyCode] = true\n            elseif input.UserInputState == Enum.UserInputState.End then\n                heldKeys[input.KeyCode] = nil\n            end\n        end)\n\n        -- For each tick we want to call all the functions that should run for held keys.\n        -- You could alternatively use a simple `while true do` loop, but this keeps it\n        -- tick aligned, and tick alignment may provide benefits in some cases.\n        Microcontroller.Loop:Connect(function(tickDuration)\n            for index = 1, UPDATES_PER_TICK do\n                for key, callback in HOLD_BINDS do\n                    -- If we\'re not holding this bind, look at the next bind.\n                    if not heldKeys[key] then continue end\n                    callback()\n                end\n\n                -- Wait a little for for the next time we should update.\n                task.wait(tickDuration / UPDATES_PER_TICK)\n            end\n        end)\n    parameters:\n      - name: inputObject\n        type: UserInputObject\n        documentation: The <code>UserInputObject</code> produced by the player, is not whitelisted to any <code>Enum.UserInputState</code>.\n      - name: userId\n        type: number\n        documentation: The <code>UserId</code> of the player who pressed the input.\n  - &KeyPressedEvent\n    documentation:\n      description: Fires when the user presses a key.\n      code-sample: |-\n        -- Get all of the necessary parts and throw a useful error if something isn\'t found.\n        local anchor = assert(GetPart("Anchor"), "no anchor connected")\n        local thrusterSwitch = assert(GetPart("Switch"), "no switch connected")\n        local keyboard = assert(GetPart("Keyboard"), "no keyboard connected")\n\n        -- Define the `UserId`s of people who are allowed.\n        local WHITELIST = {\n            [1178125707] = true,\n        }\n\n        -- Create a dictionary of what key to press to what code to run\n        local BINDS = {\n            -- Toggle the anchor state when `R` is pressed.\n            [Enum.KeyCode.R] = function()\n                anchor.Anchor = not anchor.Anchor\n            end,\n            -- Toggle the switch state when `X` is pressed.\n            [Enum.KeyCode.X] = function()\n                thrusterSwitch.SwitchValue = not thrusterSwitch.SwitchValue\n            end,\n        }\n\n        -- Connect to the `keyboard.KeyPressed` event, we don\'t need the `keyName` variable,\n        -- so we\'ll call it `_` as to say "we\'re not going to use this" to anyone reading the code.\n        keyboard.KeyPressed:Connect(function(key, _, userId)\n            -- If the user *isn\'t* in the whitelist, *cancel* this function using `return`.\n            if not WHITELIST[userId] then return end\n\n            -- Try and find the piece of code to run for the key that was pressed, if we don\'t find\n            -- it, cancel, like it\'s done when the user isn\'t in the whitelist.\n            local callback = BINDS[key]\n            if not callback then return end\n\n            -- Run the piece of code!\n            callback()\n        end)\n    parameters:\n      - name: key\n        type: Enum.KeyCode\n        documentation: The <code>Enum.KeyCode</code> of the key that was pressed.\n      - name: keyName\n        type: string\n        documentation: The letter of the key that was pressed. If the key is non-printable (i.e. shift or backspace) <code>keyString</code> will be an empty string. If <code>Shift</code> is held, it will be capitalised.\n      - name: userId\n        type: number\n        documentation: The <code>UserId</code> of the player who pressed the key.\n  - &ContainerChangedEvent\n    documentation: Fires when the amount of the resource in the container changes.\n    parameters:\n      - name: resourceType\n        string-union:\n          - Power\n          - Solid\n          - Fluid\n      - name: resourceAmount\n        type: number\n  - &SetColorMethod\n    documentation:\n      description: Sets the color of the object.\n      code-sample: |-\n        local sift = require("sift") -- Grab this fancy library for manipulating tables provided by wos.\n\n        -- Get all of the types of objects with a `:SetColor` method and merge them into one big table.\n        local objects = sift.Array.merge(\n            GetParts("Light"),\n            GetParts("LightTube"),\n            GetParts("SpotLight"),\n            GetParts("EnergyShield")\n        )\n\n        -- We want this to run infinitely, but we want to run it every frame, rather than every game\n        -- tick, so we won\'t use the `Microcontroller.Loop` event.\n        while true do\n            -- First we want to get the current time, the function `os.clock` gives us a very precise\n            -- measurement of the current time (if you want to know, it basically uses the internal\n            -- clock of the computer running the code).\n            local currentTime = os.clock()\n\n            -- We then use the \'modulo\' operator, what this does is it gives you the \'remainder\'\n            -- from the division. So if you do something like `5.25 % 1` you get out the `0.25`,\n            -- or if you do, say, `31 % 2`, since 31 isn\'t divisble by 2 you get a remainder of `1`.\n\n            -- We do this so we just get the fractional aspect of the time (which would be the\n            -- milliseconds), giving us a number between 0 and 1.\n            local hue = currentTime % 1\n\n            -- We then construct a `Color3` passing in the value we just calculated, which, since\n            -- we used the modulo operator is always going to be between 0 and 1, the exact range\n            -- needed for the \'hue\' of the `fromHSV`. We just set the \'saturation\' and \'brightness\'\n            -- to 1 to keep the colour nice and bright.\n\n            -- A helpful feature of the HSV colour space is that a hue of both `0` and `1` are red!\n            local color = Color3.fromHSV(hue, 1, 1)\n\n            -- Now we have our colour, we just want to apply it to all of our objects, so we\'ll use\n            -- a simple for loop. The \'index\' or \'key\' value is named \'_\' since we don\'t need it,\n            -- and naming it \'_\' is a good way to say it\'s an unused variable.\n            for _, object in objects do\n                -- Simply call the `SetColor` method (since it\'s a method, we use a `:` when\n                -- calling the function, rather than a `.`) passing in the `Color3`!\n                object:SetColor(color)\n            end\n\n              -- Wait a little bit before updating the colour again!\n            task.wait()\n        end\n    parameters:\n      - name: color\n        type: Color3\n        documentation: The <code>Color3</code> of the color you want to set the object to.\n  - &GetResourceMethod\n    documentation: Gets the name of the resource contained, will return the <i>string</i> <code>"nil"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.\n    returns:\n      - name: resource\n        union:\n          - type: string\n          - string-type: nil\n  - &GetResourceAmountMethod\n    documentation: Gives you the total amount of objects in the container.\n    returns:\n      - name: amount\n        type: number\n  - &GetAmountMethod\n    documentation:\n      description: Gives you the total amount of objects in the container.\n      deprecated: Use <code>:GetResourceAmount()</code> instead.\n    returns:\n      - name: amount\n        type: number\n  - &SwitchValueConfigurable\n    documentation:\n      description: Determines whether the switch is active or not.\n      code-sample: |-\n        local sift = require("sift") -- Grab this fancy library for manipulating tables provided by wos.\n\n        -- Get all of the types of objects with a `SwitchValue` (save for `TemperatureGate`) configurable\n        -- and merge them into one big table.\n        local objects = sift.Array.merge(\n            GetParts("Switch"),\n            GetParts("TriggerSwitch"),\n            GetParts("Valve"),\n            GetParts("Hatch"),\n            GetParts("HeatValve")\n        )\n\n        -- Have a 50/50 chance to be on/off when the code starts running.\n        local initialState = math.random() > 0.5\n\n        -- Iterate over all of the switch objects and disable them. `_` is used as a placeholder variable.\n        for _, switch in objects do\n            -- You could alternatively do `switch:Configure({ SwitchValue = initialState })`\n            switch.SwitchValue = initialState\n        end\n\n        -- Connect to the `Loop` event of the `Microcontroller` that is running the code,\n        -- this will make the code within run precisely every game tick.\n        Microcontroller.Loop:Connect(function()\n            -- Iterate over all the switches again!\n            for _, switch in objects do\n                -- Here we *read* the `SwitchValue`, then invert it, then write it back, as\n                -- to toggle the switch.\n                switch.SwitchValue = not switch.SwitchValue\n            end\n        end)\n    type: boolean\n\ntypes:\n  PilotObject:\n    type: any\n  ResourceString:\n    type: string\n\n  Events:\n    EventConnection:\n      generic-definitions:\n        - name: Name\n          type: string\n        - name: Callback\n          function:\n            parameters:\n              - name: ...\n                type: unknown\n      type:\n        _eventName:\n          type: Name\n        Callback:\n          type: Callback\n      metatable:\n        type: EventConnectionMetatable\n        generics:\n          - type: Name\n          - type: Callback\n    EventConnectionMetatable:\n      export: false\n      generic-definitions:\n        - name: Name\n          type: string\n        - name: Callback\n          function:\n            parameters:\n              - name: ...\n                type: unknown\n      type:\n        Disconnect:\n          method: {}\n        Unbind:\n          method: {}\n        __mode:\n          string-type: v\n        __index:\n          type: EventConnectionMetatable\n          generics:\n            - type: Name\n            - type: Callback\n      self:\n        type: EventConnection\n        generics:\n          - type: Name\n          - type: Callback\n    Event:\n      generic-definitions:\n        - name: Name\n          type: string\n        - name: Callback\n          function:\n            parameters:\n              - name: ...\n                type: unknown\n        - name: Parameters...\n          type: ...unknown\n      type:\n        _eventName:\n          type: Name\n        Connect:\n          method:\n            parameters:\n              - name: callback\n                type: Callback\n            returns:\n              - name: callback\n                type: EventConnection\n                generics:\n                  - type: Name\n                  - type: Callback\n\n  JSON:\n    JSONValue:\n      export: false\n      union:\n        - type: string\n        - type: number\n        - type: boolean\n        - type: buffer\n    JSON:\n      export: false\n      union:\n        - type:\n            [JSONValue]:\n              type: JSON\n        - type: JSONValue\n\n  Universe Info:\n    Coordinates:\n      CoordinatesMetatable:\n        export: false\n        self-type: Coordinates\n        type:\n          __add:\n            method:\n              parameters:\n                - type: Coordinates\n              returns:\n                - type: Coordinates\n          __div:\n            method:\n              parameters:\n                - type: Coordinates\n              returns:\n                - type: Coordinates\n          __eq:\n            method:\n              parameters:\n                - type: Coordinates\n              returns:\n                - type: boolean\n          __mul:\n            method:\n              parameters:\n                - type: Coordinates\n              returns:\n                - type: Coordinates\n          __tostring:\n            method:\n              returns:\n                - type: string\n          __index:\n            type: CoordinatesMetatable\n          Clone:\n            method:\n              returns:\n                - type: Coordinates\n          CoordStringWithoutPlanet:\n            method:\n              returns:\n                - type: string\n          GetRandom:\n            method:\n              returns:\n                - type: Random\n          GetSeed:\n            method:\n              returns:\n                - type: number\n          ToArray:\n            method:\n              returns:\n                - union-array:\n                    - type: number\n                    - type: boolean\n          type:\n            string-type: Coordinates\n      Coordinates:\n        documentation: |-\n          The class that represents universe coordinates.\n          Provides the ability to do mathematical operations on coordinates, such as addition, subtraction and even multiplication.\n        type:\n          InPlanet:\n            type: boolean\n          SolarCoordinates:\n            type: Vector2\n          UniverseCoordinates:\n            type: Vector2\n        metatable-type: CoordinatesMetatable\n    Universe Enums:\n      CelestialBodyType:\n        string-union:\n          - Planet\n          - BlackHole\n          - Star\n      PlanetType:\n        string-union:\n          - Desert\n          - Terra\n          - EarthLike\n          - Ocean\n          - Tundra\n          - Forest\n          - Exotic\n          - Barren\n          - Gas\n          - RobotDepot\n          - RobotFactory\n      StarType:\n        string-union:\n          - Red\n          - Orange\n          - Yellow\n          - Blue\n          - Neutron\n    Complex Region Info:\n      RegionColor:\n        export: false\n        type:\n          R:\n            documentation:\n              description: The red channel of the region color.\n              range: [0, 1]\n            type: number\n          G:\n            documentation:\n              description: The green channel of the region color.\n              range: [0, 1]\n            type: number\n          B:\n            documentation:\n              description: The blue channel of the region color.\n              range: [0, 1]\n            type: number\n      RegionEntryLocation:\n        export: false\n        type:\n          X:\n            documentation:\n              description: The <code>X</code> position of the location.\n              range: [-5000, 5000]\n              increment: 1\n            type: number\n          Y:\n            documentation:\n              description: The <code>Y</code> position of the location.\n              range: [4000, 6000]\n              increment: 1\n            type: number\n          Z:\n            documentation:\n              description: The <code>Z</code> position of the location.\n              range: [-5000, 5000]\n              increment: 1\n            type: number\n      RingData:\n        export: false\n        type:\n          RingStart:\n            documentation:\n              range: [6000, 12000]\n              increment: 1\n            type: number\n          RingsEnd:\n            documentation:\n              range: [6800, 15000]\n              increment: 1\n            type: number\n          RingsAmount:\n            documentation:\n              description: The total amount of individual asteroids within the rings.\n              range: [500, 1250]\n              increment: 1\n            type: number\n          RingsType:\n            documentation: The physical material the majority of the rings are made of.\n            string-union:\n              - Ice\n              - Stone\n      TerrainData:\n        export: false\n        type:\n          Height:\n            documentation:\n              length: 2\n            array-type: number\n          Life:\n            documentation: Inherits the value of the planet\'s <code>Atmosphere</code>.\n            type: boolean\n          MountainDensity:\n            documentation:\n              length: 2\n            array-type: number\n          RockDensity:\n            documentation:\n              length: 2\n            array-type: number\n          Roughness:\n            documentation:\n              length: 2\n            array-type: number\n          Slopes:\n            documentation:\n              length: 2\n            array-type: number\n          Temperature:\n            documentation:\n              length: 2\n            array-type: number\n          TreeSettings:\n            type:\n              amount_of_branches:\n                documentation:\n                  length: 2\n                array-type: number\n              amount_of_splits:\n                documentation:\n                  length: 2\n                array-type: number\n              branch_angles:\n                documentation:\n                  length: 2\n                array-type: number\n              branch_offset:\n                documentation:\n                  length: 2\n                array-type: number\n              branch_size_percentage:\n                type:\n                  max:\n                    type:\n                      width:\n                        type: number\n                      height:\n                        type: number\n                  min:\n                    type:\n                      width:\n                        type: number\n                      height:\n                        type: number\n              trunk_size:\n                type:\n                  max:\n                    type:\n                      width:\n                        type: number\n                      height:\n                        type: number\n                  min:\n                    type:\n                      width:\n                        type: number\n                      height:\n                        type: number\n          Water:\n            documentation: Inherits the value of the planet\'s <code>WaterLevel ~= nil</code>.\n            type: boolean\n\n      PlayableRegionInfo:\n        type:\n          Coordinate:\n            type: Coordinates\n          EnterLocation:\n            type: RegionEntryLocation\n          Name:\n            type: string\n          RegionSeed:\n            type: number\n          RegionServer:\n            type: string\n          StringCoordinate:\n            type: string\n      OrbitRegionInfo:\n        intersection:\n          - type:\n              OrbitBody:\n                union:\n                  - type: BlackHoleRegionInfo\n                  - type: StarRegionInfo\n                  - type: PlanetRegionInfo\n              RegionType:\n                string-type: Orbit\n          - type: PlayableRegionInfo\n      SpaceRegionInfo:\n        intersection:\n          - type:\n              RegionType:\n                string-type: Space\n          - type: PlayableRegionInfo\n      BlackHoleRegionInfo:\n        intersection:\n          - type:\n              BlackHoleSize:\n                documentation:\n                  range: [500, 15000]\n                  increment: 1\n                type: number\n              EnterLocation:\n                type: RegionEntryLocation\n              PlanetData:\n                type: never\n              StarSize:\n                type: never\n              StarType:\n                type: never\n          - type: PlayableRegionInfo\n      StarRegionInfo:\n        intersection:\n          - type:\n              EnterLocation:\n                type: RegionEntryLocation\n              StarType:\n                type: StarType\n              StarSize:\n                documentation:\n                  range: [2000, 6000]\n                  increment: 1\n                type: number\n              BlackHoleSize:\n                type: never\n              PlanetData:\n                type: never\n          - type: PlayableRegionInfo\n      PlanetRegionInfo:\n        intersection:\n          - type:\n              PlanetData:\n                type:\n                  Atmosphere:\n                    type: boolean\n                  DayCycleIncrement:\n                    type: number\n                  EnterLocation:\n                    type: RegionEntryLocation\n                  GenerationHeightScale:\n                    type: number\n                  Gravity:\n                    type: number\n                  PlanetMaterial:\n                    string-union:\n                      - Grass\n                      - Sand\n                      - Snow\n                      - Rock1\n                      - Rock2\n                  PlanetType:\n                    type: PlanetType\n                  PrimaryColor:\n                    type: RegionColor\n                  Resources:\n                    array-type: string\n                  Rings:\n                    nullable-type: RingData\n                  SecondaryColor:\n                    type: RegionColor\n                  StartingTime:\n                    type: number\n                  Temperature:\n                    type: number\n                  TerrainConfig:\n                    type: TerrainData\n              BlackHoleSize:\n                type: never\n              StarType:\n                type: never\n              StarSize:\n                type: never\n          - type: PlayableRegionInfo\n      CompleteRegionInfo:\n        union:\n          - type: OrbitRegionInfo\n          - type: SpaceRegionInfo\n          - type: BlackHoleRegionInfo\n          - type: StarRegionInfo\n          - type: PlanetRegionInfo\n    RegionInfo:\n      union:\n        # Space\n        - type:\n            BeaconCount:\n              type: number\n            HasRings:\n              type: boolean\n            Name:\n              type: string\n            SubType:\n              type: never\n            TidallyLocked:\n              type: boolean\n            Type:\n              string-type: Planet\n        # Planet\n        - type:\n            BeaconCount:\n              type: number\n            Color:\n              type: Color3\n            Gravity:\n              type: number\n            HasAtmosphere:\n              type: boolean\n            HasRings:\n              type: boolean\n            Name:\n              type: string\n            Resources:\n              array-type: string\n            SubType:\n              type: PlanetType\n            TidallyLocked:\n              type: boolean\n            Type:\n              string-type: Planet\n        # Black Hole\n        - type:\n            BeaconCount:\n              type: number\n            Name:\n              type: string\n            Size:\n              documentation:\n                range: [500, 15000]\n                increment: 1\n              type: number\n            Type:\n              string-type: BlackHole\n        # Star\n        - type:\n            BeaconCount:\n              type: number\n            Name:\n              type: string\n            Size:\n              documentation:\n                range: [2000, 6000]\n                increment: 1\n              type: number\n            SubType:\n              type: StarType\n            Type:\n              string-type: Star\n  File System:\n    FileSystem:\n      type:\n        chdir:\n          method:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - type: string\n        copy:\n          method:\n            parameters:\n              - name: pathnameFrom\n                type: string\n              - name: pathnameTo\n                nullable-type: string\n        mkdir:\n          method:\n            parameters:\n              - name: pathname\n                nullable-type: string\n        mklink:\n          method:\n            parameters:\n              - name: linkName\n                type: string\n              - name: targetName\n                nullable-type: string\n        moveMerge:\n          method:\n            parameters:\n              - name: pathnameFrom\n                type: string\n              - name: pathnameTo\n                nullable-type: string\n        readdir:\n          method:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - array-type: string\n        readfile:\n          method:\n            parameters:\n              - name: filepath\n                type: string\n            returns:\n              - type: string\n        rename:\n          method:\n            parameters:\n              - name: pathnameFrom\n                type: string\n              - name: pathnameTo\n                nullable-type: string\n        unlink:\n          method:\n            parameters:\n              - name: pathname\n                type: string\n        writefile:\n          method:\n            parameters:\n              - name: filepath\n                type: string\n              - name: contents\n                type: string\n        pwd:\n          method:\n            returns:\n              - type: string\n\n        new:\n          function:\n            parameters:\n              - name: source\n                nullable-union:\n                  - type: FileSystemRoot\n                  - type: FileSystemDirectory\n            returns:\n              - type: FileSystem\n        exists:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - type: boolean\n        filename:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - type: string\n        join:\n          function:\n            parameters:\n              - name: ...\n                type: string\n            returns:\n              - type: string\n        parentdir:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - type: string\n        resolve:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - type: string\n        split:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n            returns:\n              - array-type: string\n        separator:\n          type: string\n    RawFileSystem:\n      type:\n        Device:\n          function:\n            parameters:\n              - name: device\n                type: any\n              - name: attributes\n                type: FileAttributes\n            returns:\n              - type: FileSystemDevice\n        Directory:\n          function:\n            parameters:\n              - name: contents\n                type:\n                  [string]:\n                    type: FileSystemFileNode\n              - name: attributes\n                type: FileAttributes\n              - name: readonly\n                nullable-type: boolean\n            returns:\n              - type: FileSystemDirectory\n        File:\n          function:\n            parameters:\n              - name: contents\n                type: string\n              - name: attributes\n                type: FileAttributes\n            returns:\n              - type: FileSystemFile\n        Link:\n          function:\n            parameters:\n              - name: pathname\n                type: string\n              - name: attributes\n                type: FileAttributes\n            returns:\n              - type: FileSystemLink\n        Root:\n          function:\n            parameters:\n              - name: root\n                type: FileSystemDirectory\n              - name: attributes\n                type: FileAttributes\n            returns:\n              - type: FileSystemRoot\n        SYSTEM_NOACCESS:\n          type: FileAttributes\n        SYSTEM_READONLY:\n          type: FileAttributes\n        read:\n          method:\n            parameters:\n              - name: root\n                type: FileSystemRoot\n              - name: pathname\n                type: string\n              - name: options\n                nullable-type: FileSystemOperationOptions\n            returns:\n              - nullable-type: FileSystemFileNode\n        readlink:\n          method:\n            parameters:\n              - name: root\n                type: FileSystemRoot\n              - name: link\n                type: FileSystemLink\n              - name: options\n                nullable-type: FileSystemOperationOptions\n            returns:\n              - nullable-type: FileSystemFileNode\n        write:\n          method:\n            parameters:\n              - name: root\n                type: FileSystemRoot\n              - name: pathname\n                type: string\n              - name: node\n                type: FileSystemFileNode\n              - name: options\n                nullable-type: FileSystemOperationOptions\n    primitive:\n      export: false\n      union:\n        - type: string\n        - type: number\n        - type: boolean\n        - array-type: primitive\n        - type:\n            [primitive]:\n              type: primitive\n\n    File Metadata:\n      FileAttributes:\n        type:\n          metadata:\n            nullable-type:\n              [primitive]:\n                type: primitive\n          permissions:\n            nullable-union:\n              - type:\n                  owner:\n                    union:\n                      - string-type: system\n                      - type: number\n                  userPermissions:\n                    nullable-type:\n                      [number]:\n                        type: FilePermissions\n              - type: FilePermissions\n      FilePermissions:\n        type:\n          read:\n            nullable-type: boolean\n          write:\n            nullable-type: boolean\n      FileSystemOperationOptions:\n        type:\n          ignoreLinks:\n            nullable-type: boolean\n          ignorePermissions:\n            nullable-type: boolean\n    File Types:\n      FileSystemRoot:\n        type:\n          attributes:\n            nullable-type: FileAttributes\n          kind:\n            string-type: root\n          pwd:\n            type: string\n          root:\n            type: FileSystemDirectory\n      FileSystemDevice:\n        type:\n          attributes:\n            nullable-type: FileAttributes\n          device:\n            type: any\n          kind:\n            string-type: device\n      FileSystemDirectory:\n        type:\n          attributes:\n            nullable-type: FileAttributes\n          contents:\n            type:\n              [string]:\n                type: FileSystemFileNode\n          kind:\n            string-type: directory\n      FileSystemFile:\n        type:\n          attributes:\n            nullable-type: FileAttributes\n          contents:\n            type: string\n          kind:\n            string-type: file\n      FileSystemLink:\n        type:\n          attributes:\n            nullable-type: FileAttributes\n          target:\n            type: string\n          kind:\n            string-type: link\n      FileSystemFileNode:\n        union:\n          - type: FileSystemDirectory\n          - type: FileSystemFile\n          - type: FileSystemLink\n          - type: FileSystemRoot\n          - type: FileSystemDevice\n  Method & Configurable Data:\n    MethodParameter:\n      export: false\n      type:\n        Description:\n          nullable-type: string\n        Name:\n          nullable-type: string\n        Type:\n          nullable-type: string\n    MethodData:\n      type:\n        Arguments:\n          array-type: MethodParameter\n        Description:\n          nullable-type: string\n        Name:\n          type: string\n        Results:\n          array-type: MethodParameter\n    ConfigurableData:\n      type:\n        DefaultValue:\n          nullable-type: any\n        Description:\n          type: string\n        Name:\n          type: string\n        Options:\n          nullable-union:\n            - array-type: string\n            - array-type: number\n        Type:\n          type: string\n  Modems:\n    ModemRequest:\n      type:\n        Body:\n          nullable-type: string\n        Compress:\n          nullable-type: Enum.HttpCompression\n        Headers:\n          nullable-type:\n            [string]:\n              type: any\n        Method:\n          nullable-string-union:\n            - GET\n            - POST\n            - PUSH\n            - PATCH\n            - DELETE\n        Url:\n          type: string\n    ModemRequestResponse:\n      type:\n        Body:\n          type: any\n        Headers:\n          type:\n            [string]:\n              type: any\n        StatusCode:\n          type: number\n        StatusMessage:\n          type: string\n        Success:\n          type: boolean\n  Object Detector:\n    ObjectDetectorHitNothing:\n      type:\n        isTerrain:\n          documentation: Whether or not the hit object is terrain.\n          type: true\n        Distance:\n          documentation: Will be greater than or equal to the <code>ObjectDetector</code>\'s <code>MaxDistance</code> configuration, note, there is a slight error in this value so it may be ~1e-3 less than it should be.\n          type: number\n    ObjectDetectorHitTerrain:\n      type:\n        isTerrain:\n          documentation: Whether or not the hit object is terrain.\n          type: true\n        Name:\n          documentation: |-\n            The name of the hit object. If it is "Collider" then the object detector is hitting an <code>EnergyShield</code>, it can also be a player\'s limb, it will not provide the name of the player, just the name of the hit limb.\n          open-string-union:\n            - Head\n            - Torso\n            - Left Arm\n            - Right Arm\n            - Left Leg\n            - Right Leg\n            - Collider\n        Color:\n          documentation: The <code>Color</code> of the hit object.\n          type: Color3\n        Position:\n          documentation: The <code>Position</code> of the hit object itself, not the <code>Position</code> of contact between the ray and the object.\n          type: Vector3\n        CFrame:\n          documentation: The <code>CFrame</code> of the hit object.\n          type: CFrame\n        Size:\n          documentation: The <code>Size</code> of the hit object.\n          type: Vector3\n        Distance:\n          documentation: The distance between the start of the ray and the contact point.\n          type: number\n    ObjectDetectorHitObject:\n      type:\n        isTerrain:\n          documentation: Whether or not the hit object is terrain.\n          type: false\n        CreatedBy:\n          documentation: |-\n            The <code>UserId</code> of the person who <em>created</em> the part.\n            Parts created by "THE DEVELOPERS" or "???" have a <code>CreatedBy</code> value of <code>-1</code>.\n            It <em>can</em> be <code>nil</code> if the game doesn\'t know who created the part.\n          nullable-type: number\n        LockedBy:\n          documentation: |-\n            The <code>UserId</code> of the person who <em>locked</em> the part.\n            Parts locked by "THE DEVELOPERS" have a <code>LockedBy</code> value of <code>-2</code>\n            Parts locked by "???" have a <code>LockedBy</code> value of <code>-1</code>\n            This value will be <code>nil</code> if the part is unlocked.\n          nullable-type: number\n        Name:\n          documentation: The name of the hit object.\n          type: string\n        Color:\n          documentation: The <code>Color</code> of the hit object.\n          type: Color3\n        Position:\n          documentation: The <code>Position</code> of the hit object itself, not the <code>Position</code> of contact between the ray and the object.\n          type: Vector3\n        CFrame:\n          documentation: The <code>CFrame</code> of the hit object.\n          type: CFrame\n        Size:\n          documentation: The <code>Size</code> of the hit object.\n          type: Vector3\n        Distance:\n          documentation: The distance between the start of the ray and the contact point.\n          type: number\n    ObjectDetectorHitData:\n      union:\n        - type: ObjectDetectorHitNothing\n        - type: ObjectDetectorHitTerrain\n        - type: ObjectDetectorHitObject\n  Black Box Logs:\n    RegionLogType:\n      string-union:\n        - HyperDrive\n        - Aliens\n        - Spawned\n        - Death\n        - ExitRegion\n        - Poison\n        - Irradiated\n        - Suffocating\n        - Freezing\n        - Melting\n    RegionLog:\n      type:\n        Desc:\n          type: string\n        Event:\n          type: RegionLogType\n        TimeAgo:\n          type: number\n  User Input Mediums:\n    UserInputObject:\n      documentation: The Waste of Space equivalent of ROBLOX\'s <code>InputObject</code>.\n      type:\n        KeyCode:\n          documentation: Contains a <code>Enum.KeyCode</code> enum that describes what kind of input was used. For types of input like keyboard, this describes what key was pressed. For inputs like the mouse, this provides no additional information.\n          type: Enum.KeyCode\n        KeyName:\n          documentation: Will be capitalised if <code>Enum.KeyCode.LeftShift</code> <em>or</em> <code>Enum.KeyCode.RightShift</code> was held at the time of the input.\n          type: string\n        UserInputState:\n          documentation: Describes what the state of input this <code>UserInputObject</code> represents, such as whether the input has began, ended, or been changed somehow.\n          type: Enum.UserInputState\n        UserInputType:\n          documentation: Describes what kind of input this <code>UserInputObject</code> represents, such as mouse, keyboard, touch or gamepad input.\n          type: Enum.UserInputType\n    Cursor:\n      documentation: A specific user\'s cursor on a <code>TouchScreen</code>.\n      type:\n        Player:\n          documentation: The <code>Username</code> of the <code>Cursor</code>\'s owner.\n          type: string\n        UserId:\n          documentation: The <code>UserId</code> of the <code>Cursor</code>\'s owner.\n          type: number\n        Pressed:\n          documentation: Whether or not the left mouse button is held.\n          type: boolean\n        X:\n          documentation: The <code>X</code> position of the <code>Cursor</code> relative to the top left corner of the display.\n          type: number\n        Y:\n          documentation: The <code>Y</code> position of the <code>Cursor</code> relative to the top left corner of the display.\n          type: number\n    AR:\n      ARInput:\n        export: false\n        type:\n          Gamepad:\n            documentation:\n              description: A dictionary of <code>Enum.UserInputType.GamepadX</code> keys to an array of <code>InputObject</code>s representing the current state of all available inputs for said gamepad as values.\n              source: https://discord.com/channels/616089055532417036/823313507167502336/1038621144397381692\n            type:\n              [Enum.UserInputType]:\n                array-type: InputObject\n          GamepadEnabled:\n            documentation: This property describes whether the device being used by a user has an available gamepad. If gamepads are available.\n            type: boolean\n          Keyboard:\n            documentation:\n              description: An array of <code>InputObject</code>s associated with the keys currently being pressed.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetKeysPressed\n            array-type: InputObject\n          KeyboardEnabled:\n            documentation:\n              description: This property describes whether the user\'s device has a keyboard available. This property is <code>true</code> when the user\'s device has an available keyboard, and <code>false</code> when it does not.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#KeyboardEnabled\n            type: boolean\n          LastInputType:\n            documentation:\n              description: The <code>Enum.UserInputType</code> associated with the user\'s most recent input.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetLastInputType\n            type: Enum.UserInputType\n          Mouse:\n            documentation:\n              description: An array of <code>InputObject</code>s corresponding to the mouse buttons currently being currently held down.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetMouseButtonsPressed\n            array-type: InputObject\n          TouchEnabled:\n            documentation:\n              description: This property describes whether the user\'s current device has a touch screen available.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#TouchEnabled\n            type: boolean\n          VREnabled:\n            documentation:\n              description: This property describes whether the user is using a virtual reality (VR) device.\n              source: https://create.roblox.com/docs/reference/engine/classes/UserInputService#VREnabled\n            type: boolean\n      ARCamera:\n        type:\n          CFrame:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#CFrame\n            readonly: true\n            type: CFrame\n          CameraType:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#CameraType\n            readonly: true\n            type: Enum.CameraType\n          DiagonalFieldOfView:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#DiagonalFieldOfView\n            readonly: true\n            type: number\n          FieldOfView:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#FieldOfView\n            readonly: true\n            type: number\n          FieldOfViewMode:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#FieldOfViewMode\n            readonly: true\n            type: Enum.FieldOfViewMode\n          Focus:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#Focus\n            readonly: true\n            type: CFrame\n          HeadScale:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#HeadScale\n            readonly: true\n            type: number\n          MaxAxisFieldOfView:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#MaxAxisFieldOfView\n            readonly: true\n            type: number\n          NearPlaneZ:\n            documentation:\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#NearPlaneZ\n            readonly: true\n            type: number\n          RenderCFrame:\n            documentation:\n              description: The <code>CFrame</code> the camera is rendered at (for VR).\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#RenderCFrame\n            readonly: true\n            type: CFrame\n          ViewportSize:\n            documentation:\n              description: The size of the camera viewport.\n              source: https://create.roblox.com/docs/reference/engine/classes/Camera#ViewportSize\n            readonly: true\n            type: Vector2\n          ViewportSizeUI:\n            documentation: The size of the camera viewport (2D UI context)\n            readonly: true\n            type: Vector2\n      ARCursor:\n        type:\n          Player:\n            documentation: The name of the player the cursor is for.\n            type: string\n          UserId:\n            documentation: The user ID of the player.\n            type: number\n          Origin:\n            documentation: A CFrame indicating where the mouse originated from. It is positioned at the camera and oriented toward the mouse\'s 3D position.\n            type: Vector3\n          UnitRay:\n            documentation: A Ray directed toward the mouse\'s position in 3D space. It originates from the CFrame of the camera. Like all unit rays, it has a magnitude of 1.\n            type: Ray\n          WorldPosition:\n            documentation: The world position of the mouse cursor.\n            type: Vector3\n          Target:\n            documentation: The PartObject that is being hovered over. You can call methods on this part!\n            type: PilotObject\n          Pressed:\n            documentation: A boolean for whether or not the mouse button is pressed.\n            type: boolean\n          UserInput:\n            documentation: A table of input data (would suggest printing with repr) - Contains Mouse, Keyboard, Gamepad, VREnabled, KeyboardEnabled, TouchEnabled, GamepadEnabled, and LastInputType.\n            type: ARInput\n          ScreenPosition:\n            documentation: The XY screen position of the mouse cursor.\n            type: Vector2\n          UserCFrames:\n            documentation: Contains <code>Head</code>, <code>LeftHand</code>, and <code>RightHand</code> <code>CFrame</code>s for VR.\n            type:\n              RightHand:\n                type: CFrame\n              LeftHand:\n                type: CFrame\n              Head:\n                type: CFrame\n          X:\n            documentation: The <code>X</code> position of the cursor on the screen.\n            type: number\n          Y:\n            documentation: The <code>Y</code> position of the cursor on the screen.\n            type: number\n          VirtualWorldPosition:\n            documentation: The world position of the mouse cursor in the virtual 3D space.\n            type: Vector3\n          Hit:\n            documentation: The <code>CFrame</code> the user\'s mouse is located at.\n            type: CFrame\n          VirtualTarget:\n            documentation: The hovered part in the virtual 3D space.\n            type: BasePart\n          MouseDelta:\n            documentation: The current change in position of the mouse for the frame that was sent.\n            type: Vector2\n          Camera:\n            documentation: The camera of the player associated with the mouse.\n            type: ARCamera\n  String Enums:\n    General:\n      TemperatureUnit:\n        string-union:\n          - K\n          - F\n          - C\n      Permission:\n        string-union:\n          - Modify\n          - Unlock\n          - Paint\n          - Configure\n          - Interact\n          - Attach\n      CanvasContext:\n        string-union:\n          - 2D\n          - 3D\n    Configuration:\n      PolysiliconMode:\n        string-union:\n          - Activate\n          - Deactivate\n          - FlipFlop\n      BladeShape:\n        string-union:\n          - Block\n          - Spheroid\n          - Cone\n      RemoteControlMode:\n        string-union:\n          - EmitFromTarget\n          - SendDirectly\n      PlayerLimb:\n        string-union:\n          - Head\n          - Torso\n          - Left Arm\n          - Right Arm\n          - Left Leg\n          - Right Leg\n          - HumanoidRootPart\n      VehicleSeatMode:\n        string-union:\n          - Horizontal\n          - Yaw/Pitch\n          - Full\n          - Mouse\n      HandleTriggerMode:\n        string-union:\n          - MouseDown\n          - MouseUp\n          - Both\n      HandleSwingMode:\n        string-union:\n          - None\n          - Swing\n          - Point\n      RelayMode:\n        string-union:\n          - Send\n          - Receive\n      InstrumentType:\n        string-union:\n          - Speed\n          - AngularSpeed\n          - Temperature\n          - Time\n          - Power\n          - Size\n          - Position\n          - TemperatureF\n          - Orientation\n          - TemperatureC\n          - AirTemperatureF\n          - AirTemperatureC\n\nglobals:\n  Functions:\n    Miscellaneous:\n      Beep:\n        documentation:\n          code-sample: |-\n            -- Beep!\n            Beep(1)\n          description: Produces a beep sound using a triangle wave.\n          sources:\n            - https://discord.com/channels/616089055532417036/823313507167502336/1228725037448564808\n        function:\n          parameters:\n            - name: frequency\n              nullable-type: number\n      GetCPUTime:\n        documentation:\n          deprecated: Use <code>pilot.getCPUTime</code> instead.\n          description: Returns the current elapsed CPU time.\n        function:\n          returns:\n            - type: number\n      logError:\n        documentation:\n          description: Logs an error in the output, without actually throwing an error.\n          sources:\n            - https://discord.com/channels/616089055532417036/823313507167502336/1037962036149235743\n        function:\n          parameters:\n            - name: message\n              type: string\n            - name: level\n              nullable-type: number\n    Part Getters:\n      GetPart:\n        documentation:\n          code-sample: |-\n            -- Get a `Screen` from any port\n            local screen = GetPart("Screen")\n          description: Gets a part of the specified type from any connected ports.\n        hydrator:\n          name: get-part\n          port: false\n          multiple: false\n      GetPartFromPort:\n        documentation:\n          code-sample: |-\n            -- Get a `TouchScreen` from port 1\n            local touchScreen = GetPartFromPort(1, "TouchScreen")\n          description: Gets a part of the specified type from any port of the specified ID.\n        hydrator:\n          name: get-part\n          port: true\n          multiple: false\n      GetParts:\n        documentation:\n          code-sample: |-\n            -- Get all `Switch`es connected to any port\n            local switches = GetParts("Switch")\n          description: Gets all the parts of the specified type from any connected ports.\n        hydrator:\n          name: get-part\n          port: false\n          multiple: true\n      GetPartsFromPort:\n        documentation:\n          code-sample: |-\n            -- Get all `Light`s from port 1\n            local lights = GetPartsFromPort(1, "Light")\n          description: Gets all the parts of the specified type from any port of the specified ID.\n        hydrator:\n          name: get-part\n          port: true\n          multiple: true\n    Ports:\n      GetPort:\n        documentation:\n          code-sample: |-\n            -- Get port with an ID of 1\n            local port = GetPort(1)\n          description: Gets the connected port of the specified ID.\n        function:\n          parameters:\n            - name: id\n              nullable-type: number\n          returns:\n            - nullable-type: Port\n      GetPorts:\n        documentation:\n          code-sample: |-\n            -- Get all ports, no matter the ID\n            local ports = GetPort()\n          description: Gets all the connected ports of the specified ID.\n        function:\n          parameters:\n            - name: id\n              nullable-type: number\n          returns:\n            - array-type: Port\n      TriggerPort:\n        documentation: Triggers the specified port.\n        function:\n          parameters:\n            - name: port\n              union:\n                - type: Port\n                - type: number\n    JSON:\n      JSONDecode:\n        documentation:\n          code-sample: |-\n            -- Decode a JSON string\n            local jsonString = \'{"name": "example", "value": 42}\'\n            print(repr(JSONDecode(jsonString))) -- { name = "example", value = 42 }\n          description: Decodes JSON.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#JSONDecode\n        function:\n          parameters:\n            - name: data\n              type: string\n          returns:\n            - type: JSON\n      JSONEncode:\n        documentation:\n          code-sample: |-\n            local data = { name = "example", value = 42 }\n            print(JSONEncode(data)) -- {"name":"example","value":42}"\n          description: Encodes JSON. Proxy for <code>HttpService:JSONEncode</code>.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#JSONEncode\n        function:\n          parameters:\n            - name: data\n              type: JSON\n          returns:\n            - type: string\n  Values:\n    Miscellaneous:\n      Network:\n        type: any\n      pilot:\n        documentation: Provides functions for accessing/manipulating information about threads such as permissions, ownership, and interrupts.\n        type:\n          setTimeout:\n            documentation: Sets the CPU timeout of the given thread. Requires ring -1 or lower. This will not let you exceed the game\'s timeout, but will let you set lower timeouts. This has to do with whatever thread happens to be actively running. Currently there is not a way for you to recover from a timeout, so you should use .setInterrupt to handle your own custom timeouts.\n            function:\n              parameters:\n                - name: timeout\n                  nullable-type: number\n                - name: thread\n                  nullable-type: thread\n          hasRing:\n            documentation: Checks if the target (or running) thread has the specified ring privilege or lower.\n            function:\n              parameters:\n                - name: ring\n                  type: number\n                - name: thread\n                  nullable-type: thread\n              returns:\n                - type: boolean\n          setInterrupt:\n            documentation: Will repeatedly call the interrupt every period CPU time on a valid resumption time (ignores yields/waits). Returns a function which deletes the interrupt.\n            function:\n              parameters:\n                - name: period\n                  type: number\n                - name: callback\n                  function:\n              returns:\n                - function:\n          getTimeout:\n            documentation: Gets the current CPU timeout, or the CPU timeout that the given thread will obey.\n            function:\n              parameters:\n                - name: thread\n                  nullable-type: thread\n              returns:\n                - type: number\n          setRing:\n            documentation: Sets the ring of the target (or running) thread. You can use .saveRing to store the current ring so you can escalate again later.\n            function:\n              parameters:\n                - name: ring\n                  type: number\n                - name: thread\n                  nullable-type: thread\n          claimThread:\n            documentation: Sets the thread\'s parent to the running thread. The target thread must be part of the sandbox and may not exist on a lower ring otherwise nothing will happen.\n            function:\n              parameters:\n                - name: thread\n                  type: thread\n              returns:\n                - type: boolean\n          getCPUTime:\n            documentation: Returns the current elapsed CPU time.\n            function:\n              returns:\n                - type: number\n          getRing:\n            documentation: Gets the ring of the target (or running) thread.\n            function:\n              parameters:\n                - name: thread\n                  nullable-type: thread\n              returns:\n                - type: number\n          getThreadParent:\n            documentation: Gets the parent of the target (or running) thread. The parent thread must be part of the sandbox and may not exist on a lower ring otherwise nil will be returned.\n            function:\n              parameters:\n                - name: thread\n                  nullable-type: thread\n              returns:\n                - nullable-type: thread\n          saveRing:\n            documentation: Creates a function which elevates the caller to the specified (or current) ring regardless of its privilege. You can use this to de-escalate, spawn a new thread, and then re-escalate your thread after. Requires ring 0 or lower.\n            function:\n              parameters:\n                - name: ring\n                  nullable-type: number\n              returns:\n                - function: {}\n    Microcontroller:\n      Microcontroller:\n        documentation: The microcontroller object the program is running in.\n        type: Microcontroller\n      SandboxID:\n        documentation: The GUID of the microcontroller the program is running in.\n        type: string\n      SandboxRunID:\n        documentation: A GUID for the current running program, it is (re)generated when the microcontroller is turned on.\n        type: string\n    FileSystem:\n      FileSystem:\n        type: FileSystem\n      RawFileSystem:\n        type: RawFileSystem\n\nclasses:\n  PilotObject:\n    documentation: The base object that all other objects inherit from.\n    hydrator:\n      name: wos-object\n      abstract: true\n      events:\n        Destroying:\n          documentation: Fires when the object is destroyed.\n      methods:\n        CanInstallComponent:\n          parameters:\n            - name: componentName\n              nullable-type: ComponentName\n          returns:\n            - name: canInstall\n              type: boolean\n        CanUninstallComponent:\n          parameters:\n            - name: componentName\n              nullable-type: ComponentName\n          returns:\n            - name: canUninstall\n              type: boolean\n        Click:\n          documentation: Emulates a user clicking on the object, seems dysfunctional in some cases, (i.e., <code>ClickButton</code> components do not get triggered).\n        GetComponent:\n          parameters:\n            - name: componentName\n              type: ComponentName\n          returns:\n            - name: component\n              nullable-type: Component\n        GetConfigurables:\n          documentation: Gets information about the configurables of the object.\n          returns:\n            - name: configurables\n              type:\n                [string]:\n                  type: ConfigurableData\n        GetEvents:\n          documentation: Gets information about the events of the object.\n          returns:\n            - name: events\n              array-type: string\n              documentation: An array of event names.\n        GetMethods:\n          documentation: Gets information about the methods of the object.\n          returns:\n            - name: methods\n              type:\n                [string]:\n                  type: MethodData\n        GetNameOfOwnerAsync:\n          documentation:\n            deprecated: Use <code>require("player"):GetNameFromUserIdAsync</code> instead.\n          returns:\n            - name: ownerUsername\n              nullable-type: string\n        GetOwnerId:\n          documentation: Returns who locked the part if the part is locked, otherwise returns who created the part.\n          returns:\n            - name: ownerId\n              nullable-type: number\n        GetShape:\n          documentation: Gets the shape of the part, if the part is a block, it will return <code>nil</code>.\n          returns:\n            - name: shape\n              nullable-type: string\n        GetDurability:\n          documentation:\n            description: Gets the <i>maximum</i> (not current) durability of the object.\n            deprecated: Use <code>PilotObject.Durability</code> instead.\n          returns:\n            - name: durability\n              type: number\n        GetColor:\n          documentation:\n            description: Gets the color of the object.\n            deprecated: Use <code>PilotObject.Color</code> instead.\n          returns:\n            - name: color\n              type: Color3\n        GetSize:\n          documentation:\n            description: Gets the size of the object.\n            deprecated: Use <code>PilotObject.Size</code> instead.\n          returns:\n            - name: size\n              type: Vector3\n        GetTemperature:\n          documentation:\n            description: Gets the temperature of the object.\n            deprecated: Use <code>PilotObject.Temperature</code> instead.\n          returns:\n            - name: temperature\n              type: number\n        HasComponent:\n          returns:\n            - name: hasComponent\n              type: boolean\n        HasPermission:\n          documentation: Returns a boolean as to whether or not the microcontroller has permission to do the specified action.\n          parameters:\n            - name: permission\n              type: Permission\n          returns:\n            - name: hasPermission\n              type: boolean\n        IsDestroyed:\n          documentation: Returns a boolean as to whether or not the object is destroyed.\n          returns:\n            - name: isDestroyed\n              type: boolean\n        IsGrounded:\n          documentation: Tells you if the part is grounded, meaning it does it have physics. If it is attached to terrain or an anchor for example, it will be grounded.\n          returns:\n            - name: isGrounded\n              type: boolean\n        ListComponents:\n          returns:\n            - name: components\n              array-type: string\n        Trigger:\n          documentation: Triggers the object.\n      properties:\n        ClassName:\n          documentation: A string representing the type of the object.\n          type: string\n        GUID:\n          type: string\n        CFrame:\n          documentation:\n            description: The current <code>CFrame</code> of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#CFrame\n          type: CFrame\n        Position:\n          documentation:\n            description: The current position of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Position\n          type: Vector3\n        Orientation:\n          documentation:\n            description: The current orientation of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Orientation\n          type: Vector3\n        AssemblyCenterOfMass:\n          documentation:\n            description: The center of mass of the object\'s assembly.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyCenterOfMass\n          type: Vector3\n        AssemblyLinearVelocity:\n          documentation:\n            description: The velocity of the object\'s assembly.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyLinearVelocity\n          type: Vector3\n        AssemblyMass:\n          documentation:\n            description: The total mass of the object\'s assembly.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#AssemblyMas\n          type: number\n        Mass:\n          documentation:\n            description: The mass of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Mass\n          type: number\n        Anchored:\n          documentation:\n            description: Whether or not the object is anchored.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Anchored\n          type: boolean\n        Health:\n          documentation:\n            description: The health of the object as a <i>percentage</i> (between 0 and 1) of the total durability.\n            range: [0, 1]\n          type: number\n        Durability:\n          documentation:\n            description: The <i>total</i> durability of the object.\n            code-sample: |-\n              -- It can alternatively be calculated like so:\n              local partdata = require("partdata")\n              local partInfo = assert(partdata.Parts[part.ClassName], "unknown part")\n\n              local baseVolume = partInfo.BaseSize[1] * partInfo.BaseSize[2] * partInfo.BaseSize[3]\n              local volume = part.Size.X * part.Size.Y * part.Size.Z\n\n              local durability = ( volume / baseVolume ) ^ ( 1 / 3 ) * partInfo.BaseDurability\n          type: number\n        Temperature:\n          documentation: The current [<i>temperature</i>](https://en.wikipedia.org/wiki/Temperature) of the object, this is different from the <i>heat</i>.\n          type: number\n        Heat:\n          documentation: The current [<i>heat</i>](https://en.wikipedia.org/wiki/Heat) of the object, this is different from the <i>temperature</i>.\n          type: number\n        Color:\n          documentation:\n            description: The current color of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Color\n          type: Color3\n        Size:\n          documentation:\n            description: The current size of the object.\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Size\n          type: Vector3\n        Material:\n          documentation:\n            description: The current material of the object as an [<code>Enum.Material</code>](https://create.roblox.com/docs/reference/engine/enums/Material).\n            source: https://create.roblox.com/docs/reference/engine/classes/BasePart#Material\n          type: Enum.Material\n        PartLocked:\n          documentation: The <code>UserId</code> of the user who <i>locked</i> the part. Will be <code>nil</code> if the part is unlocked.\n          nullable-type: number\n        CreatedBy:\n          documentation: The <code>UserId</code> of the user who <i>created</i> the part. Will be <code>nil</code> if the part was created by a constructor.\n          nullable-type: number\n\n  ARController:\n    documentation:\n      description: |-\n        Like a TouchScreen, but for your actual screen.\n        Has the capability to display augmented 3D objects and visuals in a virtualized world.\n        Click to equip/unequip. Output may only be displayed from one ARController at a time.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetCanvas:\n          overloads:\n            - documentation: Returns the parent container of all the AR controller\'s 2D content.\n              parameters:\n                - name: context\n                  nullable-string-type: 2D\n              returns:\n                - name: canvas\n                  type: Folder\n            - documentation: Returns the parent container of all the AR controller\'s 3D content.\n              parameters:\n                - name: context\n                  string-type: 3D\n              returns:\n                - name: canvas\n                  type: WorldModel\n        ClearElements:\n          documentation: Clears all objects that are descendants of the screen.\n          parameters:\n            - name: context\n              type: CanvasContext\n        ClearElements3D:\n          documentation: Clears 3D elements.\n        CreateElement:\n          documentation:\n            description: Creates an element of the specified class name with the specified properties.\n            code-sample: |-\n              -- Try and get the ar controller, throw an error if we don\'t find it using `assert`.\n              local screen = assert(GetPart("ARController"), "no ar controller connected")\n\n              -- Clear the left over screen elements from the last time GUIs were loaded onto it.\n              -- Note: If you utilise the `Instance.new` API instead, you do not need to do this,\n              --       as objects created through said API are *automatically* deleted when the\n              --       microcontroller stops running.\n              screen:ClearElements()\n\n              -- We\'re going to spawn 32 randomly sized/coloured/positioned cubes.\n              for index = 1, 32 do\n                  -- Generate a random `Vector3` in a -16 to 16 cube region.\n                  local position = Vector3.new(\n                      math.random(-16, 16),\n                      math.random(-16, 16),\n                      math.random(-16, 16)\n                  )\n\n                  -- This may be confusing if you\'ve never worked with `CFrame`s, \'why is pi here?\'\n                  -- the reason is that pi is 180 degrees when working in \'radians\' (the angle system\n                  -- used by `CFrame`s). `math.random` with *no* parameters returns a random decimal\n                  -- number between 0 and 1, so each parameter is just a number between 0 and pi.\n                  local orientation = CFrame.Angles(\n                      math.random() * math.pi,\n                      math.random() * math.pi,\n                      math.random() * math.pi\n                  )\n\n                  -- Select a size between 0 and 4 for all axes, `Vector3.one` is shorthand for\n                  -- `Vector3.new(1, 1, 1)`, we multiply it by a number between 1 and 4 and this\n                  -- gives us a vector with a side length of 1 to 4 on all axes.\n                  local size = Vector3.one * (1 + math.random() * 3)\n\n                  -- Pick a random colour with 3 `math.random` calls\n                  local color = Color3.new(math.random(), math.random(), math.random())\n\n                  -- Call the `CreateElement` method with the `ClassName` of the object you want to create,\n                  -- and a dictionary of the properties to apply (you cannot specify the `Parent` property).\n                  -- Note the `"3D"` context parameter, this says we want to use the instance viewport, you\n                  -- could alternatively use `CreateElement3D` to avoid this third parameter.\n                  local object = screen:CreateElement("Part", {\n                      CFrame = orientation + position + Microcontroller.Position,\n                      Size = size,\n                      Color = color,\n                      TopSurface = Enum.SurfaceType.Smooth,    -- The `Top` and `Bottom` surfaces\n                      BottomSurface = Enum.SurfaceType.Smooth, -- have a stud pattern by default.\n                  }, "3D")\n              end\n\n              -- Keep the microcontroller on by permanently \'yielding\' the code (making it wait).\n              coroutine.yield()\n          parameters:\n            - name: className\n              type: string\n            - name: properties\n              type:\n                [string]:\n                  type: any\n            - name: context\n              type: CanvasContext\n          returns:\n            - name: element\n              type: Instance\n        CreateElement3D:\n          documentation: Creates a 3D part instance in the player\'s viewport.\n          parameters:\n            - name: shape\n              string-union:\n                - Ball\n                - Block\n                - Cylinder\n                - Wedge\n                - CornerWedge\n            - name: properties\n              type:\n                [string]:\n                  type: any\n          returns:\n            - name: part\n              type: Part\n        GetCursors:\n          documentation: Gets a dictionary of player usernames to their cursors.\n          returns:\n            - name: cursors\n              type:\n                [string]:\n                  type: ARCursor\n        GetCursor:\n          documentation: Returns the part owner\'s cursor, or, alternatively, any other player\'s cursor if the owner does not have a cursor (this is considered the primary user).\n          returns:\n            - name: cursor\n              type: ARCursor\n      configurables:\n        Transparency:\n          type: number\n          documentation:\n            description: The transparency of the AR display.\n            range: [0, 1]\n            inrement: 0.1\n      events:\n        CursorPressed:\n          documentation: Fired when a player left clicks.\n          parameters:\n            - name: cursor\n              type: ARCursor\n        OnClick:\n          documentation: Fires when the object is clicked.\n          parameters:\n            - name: clickerId\n              type: number\n        CursorMoved:\n          documentation: Fired when a player\'s cursor updates.\n          parameters:\n            - name: cursor\n              type: ARCursor\n        UserInput: *UserInputEvent\n        CursorReleased:\n          documentation: Fired when a player releases the left click button.\n          parameters:\n            - name: cursor\n              type: ARCursor\n        KeyPressed: *KeyPressedEvent\n        Configured: *ConfiguredEvent\n  ARGlasses:\n    documentation:\n      description: |-\n        Like a handheld Microcontroller, with a TouchScreen for your actual screen.\n        Has the capability to display augmented 3D objects and visuals in a virtualized world.\n      categories: [Tools, Electrical, Craftable, Spawnable]\n    hydrator:\n      name: wos-object\n      extends: [TouchScreen, Microcontroller, Antenna, Router, Tool]\n\n  # Has both methods and events, is configurable, and is both craftable and spawnable\n  Assembler:\n    documentation:\n      description: Assembles items as configured when the structure is supplied with the required power and resources.\n      categories: [Starter, Electrical, Spawnable, Craftable]\n      sources:\n        - https://discord.com/channels/616089055532417036/1066536049876148414/1067544760052617327\n    hydrator:\n      name: wos-object\n      methods:\n        CalculateCraftingRecipe:\n          documentation: Returns the ingredients (including <code>Power</code>), products, and time cost of a specified crafting operation.\n          parameters:\n            - name: items\n              union:\n                - array-type: string\n                - type:\n                    [string]:\n                      type: number\n              documentation: A list of parts <em>or</em> a dictionary of each part with how many of said part to craft.\n          returns:\n            - name: recipe\n              type:\n                Power:\n                  type: number\n                [string]:\n                  type: number\n              documentation: Information relating to the crafting recipe.\n        CraftItems:\n          documentation:\n            description: Will craft the specified set of items.\n            deprecated: true\n          parameters:\n            - name: items\n              union:\n                - array-type: string\n                - type:\n                    [string]:\n                      type: number\n        GetInventory:\n          documentation:\n            deprecated: Returns an empty, frozen table.\n          returns:\n            - name: inventory\n              type:\n                [string]:\n                  type: number\n        GetRecipe:\n          documentation: Returns the resource(s) required to craft the given item, or nil if the item doesn\'t have a recipe/doesn\'t exist.\n          parameters:\n            - name: itemName\n              type: string\n          returns:\n            - name: recipe\n              type:\n                [string]:\n                  type: number\n        GetCraftCooldown:\n          documentation: How long until the assembler can craft again.\n          returns:\n            - name: craftCooldown\n              type: number\n        Craft:\n          documentation: |-\n            Will pause and craft the desired item at the next available point, returning a boolean representing whether or not the item was successfully crafted.\n\n            This uses a queue under the hood, the first thing to call it gets to craft first, and then finally the assembler performs its configured craft if nothing else is queued.\n          parameters:\n            - name: itemName\n              type: string\n          returns:\n            - name: success\n              type: boolean\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        Assemble:\n          documentation: The name of the object to be assembled.\n          type: string\n  Constructor:\n    documentation:\n      description: |-\n        Similar to an assembler, but constructs a model when triggered. However, the <code>Constructor</code> must be supplied with the correct materials for a model.\n        For example, a car model requiring 50 iron and 30 wires will need a bin attached with 50 iron, a bin attached with 30 wires and 100 power.\n        You can find out how many materials you need through the <code>CalculateModelRecipe</code> method.\n        Has a 60 second cooldown to prevent model spamming.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        CalculateModelRecipe: {}\n      events:\n        Configured: *ConfiguredEvent\n        Triggered: *TriggeredEvent\n      configurables:\n        ModelCode:\n          documentation: The model data of the model to be created by the Constructor.\n          type: string\n        Autolock:\n          documentation: Determines if the created model should be locked by the owner of the Constructor.\n          type: boolean\n        RelativeToConstructor:\n          documentation: Determines if the created model should be loaded in relative to the orientation of the Constructor.\n          type: boolean\n  Coupler:\n    documentation:\n      description: Will connect to nearby couplers with matching CouplerIDs when activated by Polysilicon. Deactivating via Polysilicon will detach two couplers. Repeatedly emits trigger signals when it is able to connect with another coupler of the same ID.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        IsCoupled:\n          documentation: Returns whether or not the coupler is currently attached to another coupler.\n          returns:\n            - name: isCoupled\n              type: boolean\n        GetAttachedCoupler:\n          documentation: Returns a reference to the current connected coupler, will return <code>nil</code> if no other coupler is connected.\n          returns:\n            - name: otherCoupler\n              nullable-type: Coupler\n      events:\n        Couple: {}\n        Decouple: {}\n      configurables:\n        CouplerID:\n          documentation:\n            description: The ID of this coupler.\n            default: C1\n            max-length: 64\n          type: string\n        AutoTrigger:\n          documentation: Whether or not the coupler should emit trigger signals while in range of another valid coupler.\n          type: boolean\n  Dispenser:\n    documentation:\n      description: Releases items from attached bins.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        Dispense:\n          documentation: Dispenses a single item instantly.\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        Filter:\n          documentation:\n            description: Which kinds of resources to drop, separated by commas.\n            max-length: 256\n          type: string\n  EnergyShield:\n    documentation:\n      description: |-\n        Generates a forcefield protecting its interior from energy-based weapons such as <code>Lasers</code> and <code>PlasmaCannons</code>, and offers full protection from Warhead explosions.\n        An EnergyShield has a few sets of properties that you can fine tune to create a balanced shield.\n\n        <code>ShieldRadius</code> - The size of the entire shield. This will exponentially consume more power the higher the radius is.\n        <code>RegenerationSpeed</code> - Scale from 1 to 10 on how fast the shield will regenerate. The shield will not regenerate while unpowered.\n        <code>ShieldStrength</code> - Scale from 1 to 10 on how much the shield can endure.\n\n        <code>RegenerationSpeed</code> and <code>ShieldStrength</code> combined must not exceed 11.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetShieldHealth:\n          documentation: Gets the current health of the shield as a percentage between <code>0</code> and <code>1</code>.\n          returns:\n            - name: health\n              type: number\n              documentation:\n                range: [0, 1]\n        CalculateCost:\n          parameters:\n            - name: radius\n              nullable-type: number\n              documentation: |-\n                The radius of the theoretical energy shield you want to calculate the power cost for.\n                If <code>nil</code>, will default to the <code>EnergyShield.Radius</code> configuration.\n                The parameter is not bound by the constraints of <code>EnergyShield.Radius</code> and will accept any input.\n          returns:\n            - name: cost\n              type: number\n              documentation: The <code>Power</code> cost per game tick to keep the <code>EnergyShield</code> running.\n        SetColor: *SetColorMethod\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        ShieldRadius:\n          documentation:\n            description: The size of the entire shield. The shield exponentially consumes more power the higher this is.\n            default: 100\n            range: [50, 1000]\n          type: number\n        RegenerationSpeed:\n          documentation:\n            description: Determines how fast the shield regenerates after being hit.\n            default: 5\n            range: [1, 10]\n          type: number\n        ShieldStrength:\n          documentation:\n            description: Determines the shield\'s resistance to damage.\n            default: 5\n            range: [1, 10]\n          type: number\n  Faucet:\n    documentation:\n      description: Releases liquids and gases from Tanks.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      extends: Dispenser\n  Gyro:\n    documentation:\n      description: |-\n        Stabilizes vehicles and structures by pointing upwards. Useful for mechs or orientating structures to the correct rotation. Has a maximum range of 75000 studss. The gyro can also be configured to seek objects and players.\n\n        When powered, the gyro will follow its seek commands that can be configured using hammer.\n        The gyro has commands that allow it to find and seek objects and players.\n\n        An example of gyro\'s seek configuration includes "Player1 Player2" which will seek and aim towards the nearest player.\n\n        Putting "Radar" at the beginning of the seek configuration will make it target parts instead. For example, "Radar Gold Copper" will find the nearest Gold or Copper deposit.\n\n        Putting "AllExcept" will make the seeker target everything except the given list, basically inverting it. For example, "AllExcept Player1 Player2" will target "Player3" or "Player"4 but not "Player1".\n\n        The commands "Min" and "Max" set the minimum or maximum distance the seeker will target. For example, "Min20 Max500" will make the seeker only target objects within 500 studs and more than 20 studs away.\n\n        TriggerWhenSeeked will trigger all connected parts every second when the Seek configurable is satisfied\n\n        "TrigMin" and "TrigMax" work the same as "Min" and "Max" but it\'s for the trigger signal, trigger signal will only be sent if the above property is true.\n\n        ExceptOwnedBy accepts a list with no spaces, targeting parts that are NOT owned by the people in the supplied list.\n\n        Putting "Sun" as part of the list will make the seeker automatically target the main stellar body in the system.\n\n        Gyros also have a property called MaxTorque. This allows you to control the max force on the gyro to stabilize it.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        PointAlong:\n          documentation: Points the gyro along the specified vector. Pass <code>nil</code> or configure the gyro to stop pointing.\n          parameters:\n            - name: direction\n              type: Vector3\n              documentation: The vector for the gyro to point along.\n            - name: up\n              nullable-type: Vector3\n              documentation: The <code>UpVector</code> of the gyro with a default of <code>(0, 1, 0)</code>.\n        PointAt:\n          documentation: Points the gyro towards the specified position. Pass <code>nil</code> or configure the gyro to stop pointing.\n          parameters:\n            - name: position\n              type: Vector3\n              documentation: The position for the gyro to look at.\n            - name: up\n              nullable-type: Vector3\n              documentation: The <code>UpVector</code> of the gyro with a default of <code>(0, 1, 0)</code>.\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        Seek:\n          documentation:\n            description: The seek commands.\n            max-length: 512\n          type: string\n        DisableWhenUnpowered:\n          documentation: Determines whether this gyro should be disabled while it does not have power.\n          type: boolean\n        MaxTorque:\n          documentation:\n            description: The maximum force in each axis the gyro can exert.\n            default: 10000000000\n            range: [0, 10000000000]\n          type: number\n        TriggerWhenSeeked:\n          documentation: Determines whether to send out a trigger signal when the gyro detects something to seek as determined by the Seek configurable.\n          type: boolean\n  HyperDrive:\n    documentation:\n      description: |-\n        A device used to travel at faster than light speeds to other regions of the universe.\n\n        Simply input the coordinates to your destination and have a sufficient amount of fuel, and you\'ll be on your way to your destination.\n        To initiate warping, power the hyperdrive and trigger it. When warping, the hyperdrive will be anchored to prevent any movement.\n\n        The power required for warping will be dependent on the distance travelled, as well as the size of the object being transported.\n        The amount of power required will be displayed in the hyper drive, shown in the red text.\n\n        All of the parts connected to the hyperdrive and every player sitting will be teleported, however any free floating parts or standing up players will be sucked into the vaccum of space, so be careful.\n        Make sure the numbers on the hyperdrive is facing up to ensure correct stud alignment.\n      categories: [Propulsion, Starter, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetRequiredPower:\n          documentation: Returns the amount of power required for the warp.\n      events:\n        Configured: *ConfiguredEvent\n        Triggered: *TriggeredEvent\n      configurables:\n        Coordinates:\n          documentation: The coordinates to warp to.\n          type: Coordinates\n  Instrument:\n    documentation:\n      description: |-\n        A part that measures information about the world.\n\n        You can set it to measure one of:\n        - <code>Power</code> is the total amount of power connected to the instrument.\n        - <code>Position</code> is the position of the instrument in the world.\n        - <code>Orientation</code> is the orientation of the instrument in the world.\n        - <code>Size</code> is the size of the part attached to the instrument.\n        - <code>Speed</code> is the speed of the instrument.\n        - <code>AngularSpeed</code> is the angular speed of the instrument.\n        - <code>Temperature</code> is the temperature of the instrument in Kelvin\n        - <code>TemperatureF</code> is the temperature of the instrument in Fahrenheit.\n        - <code>TemperatureC</code> is the temperature of the instrument in Celsius.\n        - <code>AirTemperature</code> is the air temperature around the instrument in <code>Kelvin</code>.\n        - <code>AirTemperatureF</code> is the air temperature around the instrument in <code>Fahrenheit</code>.\n        - <code>AirTemperatureC</code> is the air temperature around the instrument in <code>Celsius</code>.\n        - <code>Time</code> is the current region time.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetReading:\n          documentation: Passing a number to <code>GetReading</code> is deprecated. Use the string name of the reading instead.\n          parameters:\n            - name: type\n              nullable-union:\n                - type: InstrumentType\n                - type: number\n          returns:\n            - name: reading\n              union:\n                - type: number\n                - type: Vector3\n                - type: string\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Type:\n          documentation: The type of instrument readout to display on the instrument.\n          type: InstrumentType\n  Light:\n    documentation:\n      description: Emits light when powered with electricity. Can be colored in different ways, changing the light color.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetColor: *SetColorMethod\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Brightness:\n          documentation:\n            description: The brightness of the light.\n            default: 1\n            range: [0, 2]\n          type: number\n        LightRange:\n          documentation:\n            description: The range of the light.\n            default: 60\n            range: [1, 60]\n          type: number\n        Shadows:\n          documentation: Whether or not the light will cast shadows.\n          type: boolean\n  Microcontroller:\n    documentation:\n      description: |-\n        Runs limited Roblox luau code in an environment called "pilot.lua".\n        Triggering it with a polysillicon will either start, stop, or restart (FlipFlop mode) your code.\n        You can also click it to turn it on/off.\n\n        Microcontrollers consume power depending on the amount of CPU time you use, which is the number of milliseconds your code spends doing stuff.\n        Pauses and waits don\'t count towards your CPU time since they allow the game to continue on to go do other work.\n        One CPU unit costs 1 units of power.\n        If you don\'t have enough power your Microcontroller will pause.\n\n        Your code has a CPU limit, it can only spend up to 100 milliseconds every game tick. If you go over this limit it will pause until the next game tick.\n\n        You can press F9 to view WoS\'s client-side output. Any logs or errors from your Microcontrollers will appear there.\n\n        If you want to know about various globals you can use from Roblox\'s engine, you can take a look at Roblox\'s Developer Documentation and search for Roblox Globals and Lua Globals.\n        For more info, check the game\'s wiki, or look at one of the game\'s social platforms if it\'s linked at the bottom of the game page.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        Send:\n          documentation: Sends the data you provide to a remote microcontroller. Parts you pass will be based on your microcontroller\'s context.\n          parameters:\n            - name: ...\n              type: any\n              documentation: The parameters to send to the other microcontroller.\n        Receive:\n          documentation: Waits for data to be received.\n          returns:\n            - name: sender\n              type: Microcontroller\n              documentation: The microcontroller sending the data.\n            - name: ...\n              type: any\n              documentation: The parameters sent through by the other microcontroller.\n        Shutdown:\n          documentation: Kills the microcontroller.\n      events:\n        Loop: *LoopEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Code:\n          documentation: The code to be executed on this microcontroller.\n          type: string\n        StartOnSpawn:\n          documentation: Whether or not to start the Microcontroller when it spawns.\n          type: boolean\n  Modem:\n    documentation:\n      description: A part that allows you to send messages cross-region and make HTTP requests to the web.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetAsync:\n          documentation: Identical to <code>HttpService:GetAsync</code>.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#GetAsync\n          parameters:\n            - name: url\n              type: string\n            - name: nocache\n              nullable-type: boolean\n            - name: headers\n              nullable-type:\n                [string]:\n                  type: any\n          returns:\n            - name: response\n              type: string\n        PostAsync:\n          documentation: Identical to <code>HttpService:PostAsync</code>.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#PostAsync\n          parameters:\n            - name: url\n              type: string\n            - name: data\n              type: string\n            - name: contentType\n              nullable-type: Enum.HttpContentType\n            - name: compress\n              nullable-type: boolean\n            - name: headers\n              nullable-type:\n                [string]:\n                  type: any\n          returns:\n            - name: response\n              type: string\n        SendLocalMessage:\n          parameters:\n            - name: ...\n              type: any\n              documentation: Unknown.\n        PostRequest:\n          parameters:\n            - name: domain\n              type: string\n            - name: data\n              type: string\n        UrlEncode:\n          documentation: |-\n            The <code>UrlEncode</code> function [percent-encodes](https://en.wikipedia.org/wiki/Percent-encoding) a given string so that reserved characters properly encoded with \'%\' and two hexadecimal characters.\n            Identical to <code>HttpService:UrlEncode</code>.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#UrlEncode\n          parameters:\n            - name: input\n              type: string\n          returns:\n            - name: encodedUrl\n              type: string\n        GetRequest:\n          parameters:\n            - name: domain\n              type: string\n          returns:\n            - name: response\n              type: string\n        RealPostRequest:\n          parameters:\n            - name: domain\n              type: string\n            - name: data\n              type: string\n            - name: asyncBool\n              type: boolean\n            - name: transformFunction\n              function:\n                parameters:\n                  - name: ...\n                    type: any\n            - name: optionalHeaders\n              nullable-type:\n                [string]:\n                  type: any\n          returns:\n            - name: response\n              type:\n                success:\n                  type: boolean\n                response:\n                  type: string\n        SendMessage:\n          parameters:\n            - name: data\n              type: string\n            - name: id\n              nullable-type: string\n        RequestAsync:\n          documentation: Identical to <code>HttpService:RequestAsync</code>.\n          source: https://create.roblox.com/docs/reference/engine/classes/HttpService#RequestAsync\n          parameters:\n            - name: options\n              type: ModemRequest\n          returns:\n            - name: response\n              type: ModemRequestResponse\n      events:\n        Loop: *LoopEvent\n        MessageSent: {}\n      configurables:\n        NetworkID:\n          documentation:\n            description: The ID of the network this modem should connect to.\n            default: M1\n            max-length: 64\n          type: string\n  Piston:\n    documentation:\n      description: More accurately a linear actuator. There is a rail among us.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetPosition: {}\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Position1:\n          documentation:\n            description: Determines the position of the first state of the piston.\n            default: 0\n            range: [0, 100]\n          type: number\n        Position2:\n          documentation:\n            description: Determines the position of the second state of the piston.\n            default: 100\n            range: [0, 100]\n          type: number\n        Speed:\n          documentation:\n            description: Determines the speed of the piston.\n            default: 10\n            range: [0, 50]\n          type: number\n  Reactor:\n    documentation:\n      description: |-\n        Generates steam using water and heat from radiation.\n        Up to 4 pieces of uranium can be inserted into the reactor as fuel.\n        If the temperature is above 400, it will begin to turn water into steam (rate dependent on temperature).\n        If the temperature exceeds 1200 F, a meltdown will occur.\n        The Reactor fuel status can be acquired through the :GetFuel() method with a microcontroller.\n        Polysilicon is used to control a reactor, and fuel must be ejected manually:\n\n        Activation lowers the control rods, decreasing reaction rate.\n        Deactivation raises the control rods, allowing fuel to react.\n        FlipFlop will eject fuel or waste from the fuel rod with the least fuel.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetEfficiency:\n          returns:\n            - name: efficiency\n              type: number\n        GetFuel:\n          documentation: Returns an array with four numeric values each representative of their fuel rod. The order is strict and goes from the first to the fourth fuel rod.\n          returns:\n            - name: fuelState\n              array-type: number\n        GetTemp:\n          documentation: Returns a numeric value representing the current temperature of the reactor in degrees fahrenheit.\n          returns:\n            - name: temperature\n              type: number\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Alarm:\n          documentation: Determines whether the reactor alarm system is enabled for when the reactor is near meltdown temperature.\n          type: boolean\n        TriggerWhenEmpty:\n          documentation: Determines whether or not the reactor will emit a trigger signal when its fuel is empty.\n          type: boolean\n  Screen:\n    documentation:\n      description: |-\n        Allows for the programmatic creation of GUI elements.\n\n        Internally, it utilises a [<code>SurfaceGUI</code>](https://create.roblox.com/docs/reference/engine/classes/SurfaceGui), and is therefore no different from normal roblox GUIs.\n\n        There are some limitations with <code>Screen</code>s in Waste of Space, such as an inability to use <code>[ViewportFrame](https://create.roblox.com/docs/reference/engine/classes/SurfaceGui)</code>s\n      categories: [Logic, Electrical, Spawnable, Craftable]\n      code-sample: |-\n        -- Try and get the screen part, throw an error if we don\'t find it using `assert`.\n        local screen = assert(GetPart("Screen"), "no screen connected")\n\n        -- Create a text label with the text \'Hello, world!\' which takes up the entire screen.\n        local textLabel = Instance.new("TextLabel")\n        textLabel.Text = "Hello, world!"\n        textLabel.Size = UDim2.fromScale(1, 1)\n        textLabel.BorderSizePixel = 0\n        textLabel.BackgroundColor = Color3.fromRGB(255, 255, 255)\n\n        -- Parent it to the \'canvas\' of the screen.\n        textLabel.Parent = screen:GetCanvas()\n\n        -- Keep the microcontroller on by permanently \'yielding\' the code (making it wait).\n        coroutine.yield()\n    hydrator:\n      name: wos-object\n      methods:\n        GetCanvas:\n          documentation: Returns the parent container of all the screen\'s content.\n          returns:\n            - name: canvas\n              type: Frame\n        ClearElements:\n          documentation: Clears all objects that are descendants of the screen.\n        CreateElement:\n          documentation:\n            description: Creates an element of the specified class name with the specified properties.\n            code-sample: |-\n              -- Try and get the screen part, throw an error if we don\'t find it using `assert`.\n              local screen = assert(GetPart("Screen"), "no screen connected")\n\n              -- Clear the left over screen elements from the last time GUIs were loaded onto it.\n              -- Note: If you utilise the `Instance.new` API instead, you do not need to do this,\n              --       as objects created through said API are *automatically* deleted when the\n              --       microcontroller stops running.\n              screen:ClearElements()\n\n              -- Call the `CreateElement` method with the `ClassName` of the object you want to create,\n              -- and a dictionary of the properties to apply (you cannot specify the `Parent` property).\n              local textLabel = screen:CreateElement("TextLabel", {\n                  Text = "Hello, world!",\n                  Size = UDim2.fromScale(1, 1),\n                  BorderSizePixel = 0,\n                  BackgroundColor = Color3.fromRGB(255, 255, 255),\n              })\n\n              -- Keep the microcontroller on by permanently \'yielding\' the code (making it wait).\n              coroutine.yield()\n          parameters:\n            - name: className\n              type: string\n            - name: properties\n              type:\n                [string]:\n                  type: any\n          returns:\n            - name: element\n              type: Instance\n        GetDimensions:\n          documentation:\n            description: Gets the size of the screen in pixels in the form of a <code>Vector2</code>.\n            code-sample: |-\n              -- Try and get the screen part, throw an error if we don\'t find it using `assert`.\n              local screen = assert(GetPart("Screen"), "no screen connected")\n\n              -- Store the current screen size.\n              local previousScreenSize = screen:GetDimensions()\n\n              -- Connect to the `Loop` event of the `Microcontroller` that is running the code,\n              -- this will make the code within run precisely every game tick.\n              Microcontroller.Loop:Connect(function()\n                  -- Get the new current screen dimensions.\n                  local screenSize = screen:GetDimensions()\n\n                  -- Compare these new dimensions with the previously recorded dimensions, if\n                  -- they are equal, cancel this running code with \'return\'.\n                  if screenSize == previousScreenSize then return end\n\n                  -- Do something with the information about the screen dimensions changing,\n                  -- in this case, it triggers a print statement.\n                  print(`The screen size changed! It used to be {previousScreenSize}, but is now {screenSize}!`)\n\n                  -- Update the stored current dimensions as to make them accurately reflect reality.\n                  previousScreenSize = screenSize\n              end)\n          returns:\n            - name: dimensions\n              type: Vector2\n              documentation: The size of the screen in pixels.\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        VideoID:\n          documentation:\n            description: The ID of the camera feed being to be viewed, or 0 for none.\n            default: 0\n            range: [0, 10000000000]\n            increment: 1\n          type: number\n  Servo:\n    documentation:\n      description: |-\n        Spins objects attached to the hinge at the front when powered, to set angles.\n\n        <code>Polysilicon</code> can be used to control its angle.\n         - <code>Activate</code> will increment the goal angle by the configured angle step (clockwise looking at its face).\n         - <code>Deactivate</code> will decrement the goal angle (counter-clockwise).\n         - <code>FlipFlop</code> will reset the angle to 0.\n\n        <code>Microcontroller</code>s can also set a servo\'s angle with <code>:SetAngle(targetAngle)</code>\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetAngle:\n          documentation: Sets the target angle of a servo just as would if you were configuring it.\n          parameters:\n            - name: angle\n              type: number\n              documentation: The angle of the servo in angular degrees.\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        ServoSpeed:\n          documentation:\n            description: Determines the speed at which the servo is driven.\n            default: 10\n            range: [0, 20]\n          type: number\n        AngleStep:\n          documentation:\n            description: Determines the change in angle when a pulse is received by Polysilicon.\n            default: 5\n            range: [-180, 180]\n          type: number\n        Responsiveness:\n          documentation:\n            description: Determines how fast the servo attempts to correct its angle.\n            default: 45\n            range: [0, 90]\n          type: number\n  Speaker:\n    documentation:\n      description: |-\n        Plays audio of length up to 5 seconds, unless it is powered in which case it can play a full audio.\n        When clicked or triggered, it will toggle playing music and will play the song id you give it.\n        Speaker:LoadSound(SoundId) will return a Sound object\n        A Sound object can be modified using properties SoundId, Looped, PlaybackSpeed, Pitch, TimePositionand the methods Play, Pause, Stop, Destroy\n      categories: [Electrical, Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        LoadSound:\n          documentation: Returns a roblox [<code>Sound</code>](https://create.roblox.com/docs/reference/engine/classes/Sound) object with the given <code>soundId</code>.\n          parameters:\n            - name: soundId\n              type: string\n          returns:\n            - name: loadedSound\n              type: Sound\n        ClearSounds:\n          documentation: Stops and clears all sounds the speaker is currently playing.\n        Chat:\n          documentation: Displays the <code>message</code> in a chat bubble just like if a player said it.\n          parameters:\n            - name: message\n              type: string\n        PlaySound:\n          documentation: Plays a sound with the given <code>soundId</code>. If no <code>soundId</code> is provided it will default to the <code>Audio</code> configuration of the speaker.\n          parameters:\n            - name: soundId\n              nullable-type: string\n      events:\n        Configured: *ConfiguredEvent\n        Triggered: *TriggeredEvent\n      configurables:\n        Audio:\n          documentation:\n            description: The audio asset ID to be played.\n            default: "5289642056"\n            max-length: 64\n          type: string\n        Pitch:\n          documentation:\n            description: The pitch at which to play the audio.\n            default: 1\n            range: [0, 3]\n          type: number\n        Volume:\n          documentation:\n            description: The volume the audio plays at. The maximum volume is determined by the size of the speaker.\n            default: 1\n            range: [0, 1]\n          type: number\n  Telescope:\n    documentation:\n      description: |-\n        A device that allows you to see and query information about other regions and planets in space while powered.\n        Click on the <code>Telescope</code> to open up a menu that will display information about any location within 100 units of your location.\n        To view a specific coordinate, configure the <code>Telescope</code> and set to the desired coordinates. This has a one minute cooldown.\n\n        The <code>Telescope</code> provides the following information:\n        - Resources on the planet\n        - The planet\'s temperature\n        - The planet\'s distance from its star\n        - The type of planet\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        WhenRegionLoads:\n          parameters:\n            - name: callback\n              function:\n                parameters:\n                  - name: regionInfo\n                    type: CompleteRegionInfo\n        GetCoordinate:\n          documentation: Gets information about the configured region.\n          returns:\n            - name: regionInfo\n              type: RegionInfo\n        GetCurrentCoordinate:\n          documentation: Returns the current region coordinates. If you are within a region with a <code>RegionCloaker</code> active, only the owner of the <code>RegionCloaker</code> can call this method.\n          returns:\n            - name: currentCoordinate\n              type: Coordinates\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        ViewCoordinates:\n          documentation: The coordinates to view.\n          type: Coordinates\n  TemperatureGate:\n    documentation:\n      description: |-\n        The gate will allow power to pass through it while the temperature is in a certain range.\n        It can be used in conjunction with a <code>Transistor</code> part to control the flow of generated trigger signals based on its temperature.\n\n        Like the <code>TemperatureSensor</code> part, it will also use the attached Reactor temperature if there is one.\n        Though, unlike the <code>TemperatureSensor</code> part, this one updates at a much faster 20 tps instead of 0.5 tps.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetTemp:\n          returns:\n            - name: temperature\n              type: number\n        GetState: {}\n        GetTemperature:\n          returns:\n            - name: temperature\n              type: number\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        TemperatureRange:\n          documentation: The range of temperatures (\xb0F) within which the gate will be open.\n          type: NumberRange\n        Inverted:\n          documentation: Whether or not the state will be inverted.\n          type: boolean\n        SwitchValue: *SwitchValueConfigurable\n  TemperatureSensor:\n    documentation:\n      description: |-\n        When the surrounding temperature is within the defined range, it will emit a trigger signal every two seconds.\n        When connected to a Reactor part, will use the Reactor\'s internal temperature.\n\n        The more advanced twin of this part, the TemperatureGate part may be more useful in many cases.\n        It updates at a quicker rate and is more versatile, due to it controlling power flow.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetTemp:\n          returns:\n            - name: temperature\n              type: number\n      events:\n        Loop: *LoopEvent\n      configurables:\n        TemperatureRange:\n          documentation: The range of temperatures (\xb0F) which this sensor will trigger at.\n          type: NumberRange\n  TouchScreen:\n    documentation:\n      description: |-\n        A <code>Screen</code>, but can handle player mouse input.\n        This is to be used with programming.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      extends: Screen\n      methods:\n        GetCursors:\n          documentation: Gets a dictionary of player usernames to their cursors if their cursors are on the screen.\n          returns:\n            - name: cursors\n              type:\n                [string]:\n                  type: Cursor\n              documentation: A dictionary of player usernames to their cursors.\n        GetCursor:\n          documentation: Gets the specified player\'s cursor.\n          parameters:\n            - name: username\n              type: string\n              documentation: The username of the player\'s cursor you want to get.\n          returns:\n            - name: cursor\n              type: Cursor\n      events:\n        Configured: *ConfiguredEvent\n        CursorMoved: {}\n        CursorPressed: {}\n        CursorReleased: {}\n      configurables:\n        VideoID:\n          documentation:\n            description: The ID of the camera feed being to be viewed, or 0 for none.\n            default: 0\n            range: [0, 10000000000]\n            increment: 1\n          type: number\n  VehicleSeat:\n    documentation:\n      description: |-\n        Allows players to control vehicles by rotating when sat on.\n        It is incredibly important to have when creating vehicles.\n\n        Attaching buttons to the vehicleseat will allow the player sitting on it to trigger the button by pressing a key.\n        Simply attach the button to the vehicle seat, configure it to the keybind you would like, and it will allow you to trigger that button by pressing the key when sitting down in the seat.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetOccupant:\n          documentation: Retrieves the <code>UserId</code> of the seat\'s occupant, it will be <code>nil</code> if there is no occupant.\n          returns:\n            - name: currentOccupant\n              nullable-type: number\n        EjectOccupant:\n          documentation: Ejects the seat occupant.\n      events:\n        Configured: *ConfiguredEvent\n        OccupantChanged: {}\n      configurables:\n        Speed:\n          documentation:\n            description: The speed at which the seat will rotate.\n            default: 1\n            range: [0, 10]\n          type: number\n        Mode:\n          documentation: "The control mode of the seat. Horizontal: Rotate horizontally with A/D. Full: Rotate horizontally and vertically with W/A/S/D. Mouse: point towards the player\'s mouse when holding click."\n          type: VehicleSeatMode\n        Enabled:\n          documentation: Determines whether this seat should control its rotation. Turning this off results in a regular seat.\n          type: boolean\n\n  # Has both methods and events, is configurable, and is only spawnable\n  DevSink:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetAmountConsumed:\n          # Undocumented - requires rewriting\n          parameters:\n            - name: ...\n              type: any\n              documentation: Unknown.\n          returns:\n            - name: ...\n              type: any\n              documentation: Unknown.\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        Configured: *ConfiguredEvent\n        ContainerChanged: *ContainerChangedEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Resource:\n          documentation: The name of the object to produce a sink for.\n          type: ResourceString\n  DevSource:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetAmountGenerated:\n          # Undocumented - requires rewriting\n          parameters:\n            - name: ...\n              type: any\n              documentation: Unknown.\n          returns:\n            - name: ...\n              type: any\n              documentation: Unknown.\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Resource:\n          documentation: The name of the object to produce a source for.\n          type: ResourceString\n\n  # Has both methods and events and is both craftable and spawnable\n  BlackBox:\n    documentation:\n      description: |-\n        Records all activity in the region using very delicate instruments.\n        Activates when locked and anchors to ensure accurate readings.\n        ONLINE = Listening for event/Sharing event data, DATA = New data the owner hasn\'t seen.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetLogs:\n          returns:\n            - name: regionLogs\n              array-type: RegionLog\n      events:\n        Loop: *LoopEvent\n        OnClick: *OnClickEvent\n  Disk:\n    documentation:\n      description: |-\n        A programmable object capable of storing complex data.\n        <b>Be aware, while disks can store userdata & function values, it cannot save them.</b>\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        Clear:\n          documentation: Clears all the contents of the disk.\n        Write:\n          documentation: Write the specified key with the specified value to the disk.\n          parameters:\n            - name: key\n              type: any\n            - name: value\n              type: any\n        Compress: {}\n        ReadAll:\n          documentation: Reads the entire content of the disk and outputs it as a dictionary.\n          returns:\n            - name: content\n              type:\n                [any]:\n                  type: any\n        WriteAll: {}\n        Read:\n          documentation: Reads the specified key from the disk and returns the value.\n          parameters:\n            - name: key\n              type: any\n          returns:\n            - name: value\n              type: any\n        Decompress: {}\n        ReadEntireDisk:\n          documentation:\n            deprecated: Superseded by <code>Disk:ReadAll()</code>.\n          returns:\n            - name: content\n              type:\n                [any]:\n                  type: any\n        ClearDisk: {}\n      events:\n        Loop: *LoopEvent\n  Keyboard:\n    documentation:\n      description: |-\n        Similar to a button, except is programmable to take more than one key input.\n        Can be attached to a vehicle seat or clicked by a player.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SimulateUserInput: {}\n        SimulateKeyPress:\n          documentation: Simulates a key press just like you would press a key on the keyboard.\n          parameters:\n            - name: key\n              nullable-type: string\n            - name: player\n              type: string\n        SimulateTextInput:\n          documentation: Simulates text input just like you would type in the keyboard and enter.\n          parameters:\n            - name: input\n              nullable-type: string\n            - name: player\n              type: string\n      events:\n        KeyPressed: *KeyPressedEvent\n        TextInputted: {}\n        UserInput: *UserInputEvent\n  Seat:\n    documentation:\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetOccupant:\n          documentation: Retrieves the <code>UserId</code> of the seat\'s occupant, it will be <code>nil</code> if there is no occupant.\n          returns:\n            - name: currentOccupant\n              nullable-type: number\n        EjectOccupant:\n          documentation: Ejects the seat occupant.\n      events:\n        OccupantChanged: {}\n  SteamTurbine:\n    documentation:\n      description: Produces power from steam at a base rate of 100 power each. Improves up to 250 per steam if consecutively ran at max speed. All bonuses are capped to the real consumption rate, so more steam equals better efficiency, but faster consumption rates. It may consume +0.5/s^2 steam, up to a maximum rate of 10 steam per second (for a total of 2500 power per second). Has a 10% chance to recover water for every steam consumed, improving up to 20%. Maximum efficiency can be reached in no less than 18 seconds if fed an optimal amount of steam.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetEfficiency:\n          returns:\n            - name: efficiency\n              type: number\n        GetProductionRate:\n          documentation: The multiplier for the amount of steam consumption each tick, ranges between 1 and 10.\n          returns:\n            - name: productionRate\n              type: number\n      events:\n        Loop: *LoopEvent\n\n  # Has methods, is configurable, and is both craftable and spawnable\n  ObjectDetector:\n    documentation:\n      description: |-\n        Casts a ray on the face with the hole on it, returning data of the object the ray hits.\n\n        Microcontroller function <code>GetLastHitData</code> returns a table with data about the last object hit.\n\n        The "last hit" part updates with a frequency of 1 frame.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetLastHitPart:\n          returns:\n            - name: object\n              type: PilotObject\n              documentation: A reference to the most recently hit part.\n        GetLastHitData:\n          returns:\n            - name: data\n              type: ObjectDetectorHitData\n              documentation: The hit data provided by the <code>ObjectDetector</code>.\n      configurables:\n        MaxDistance:\n          documentation:\n            description: The range that it can detect an object. Must be between 0 and 1000.\n            default: 1000\n            range: [0, 1000]\n          type: number\n        TriggerAtDistance:\n          documentation: The range that it will trigger if it detect an object.\n          type: Vector2\n  Rail:\n    documentation:\n      description: |-\n        Slides and moves objects along its surface when powered and triggered.\n        Useful for creating retractable pistons and actuators, for turrets or other retractable devices.\n        Rails will only move objects connected on the relative top surface of the rail.\n\n        Rails have 2 configurations, <code>Position1</code> and <code>Position2</code>.\n        Both configurations should be between 0 and 100. These are percents of where the attached objects should slide to.\n        For example, if a rail was 50 studs long and <code>Position2</code> was 50 or 50%, the attached objects will slide to the middle or at 25 studs.\n\n        The rail can only be activated through the use of polysilicons.\n        - <code>Activating</code> polysilicons will set the rail to <code>Position1</code>.\n        - <code>Deactivating</code> polysilicons will set the rail to <code>Position2</code>.\n        - <code>FlipFlop</code> polysilicons will act like a switch, setting to <code>Position2</code> if <code>Position1</code> and vice versa.\n\n        Due to roblox physics, rails may act weirdly. To prevent this from happening, you should always place your rails first before anything else.\n        It is recommended to attach objects on the rail after the rail is safely placed down.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetPosition:\n          documentation: Sets the position of the rail.\n          parameters:\n            - name: depth\n              type: number\n      configurables:\n        Position1:\n          documentation:\n            description: Determines the position of the first state of the rail.\n            default: 0\n            range: [0, 100]\n          type: number\n        Position2:\n          documentation:\n            description: Determines the position of the second state of the rail.\n            default: 100\n            range: [0, 100]\n          type: number\n        TweenTime:\n          documentation:\n            description: Determines the time it takes for the rail to change positions.\n            default: 1\n            range: [0.5, 60]\n          type: number\n  Scanner:\n    documentation:\n      description: An end-game part which can remotely retrieve Microcontroller references to parts, providing information and control. Can also triangulate the positions of enemy parts given enough well placed scanners.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        CalculateCost:\n          documentation: Calculates the cost of performing a scan with the given range.\n          parameters:\n            - name: range\n              nullable-type: number\n          returns:\n            - name: cost\n              type: number\n        Locate:\n          documentation: Uses GPS to locate a part (uses :GetDistance() internally). The scanners you provide should be on different axes and stuff. You need at least 3 to correctly identify a position.\n          parameters:\n            - name: part\n              type: PilotObject\n            - name: scanners\n              array-type: Scanner\n          returns:\n            - name: approximatePosition\n              type: Vector3\n        GetPartsInRange:\n          documentation: Does a (power hungry) query for all parts in the configured (or specified) range up to 1024 studs. Can optionally filter for a class name, but many use cases will prefer to store part objects in a set.\n          parameters:\n            - name: range\n              nullable-type: number\n            - name: className\n              nullable-type: string\n          returns:\n            - name: objects\n              array-type: PilotObject\n        GetDistance:\n          documentation: Gets the approximate distance to the part. Accuracy falls off exponentially.\n          parameters:\n            - name: part\n              type: PilotObject\n          returns:\n            - name: approximateDistance\n              type: number\n      configurables:\n        Range:\n          documentation:\n            description: The default range to scan for parts within.\n            default: 64\n            range: [0, 1024]\n          type: number\n  Winch:\n    documentation:\n      description: |-\n        A special device used to control the length of constraints attached to it.\n        When attaching a constraint to the Winch, click the Winch first.\n        When triggered with polysilicon, it will increase (Activate) or decrease (Deactivate).\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        AdjustLength:\n          parameters:\n            - name: adjustment\n              type: number\n        SetLength:\n          parameters:\n            - name: length\n              type: number\n      configurables:\n        DeltaLength:\n          documentation:\n            description: The length change in studs when triggered by Polysilicon.\n            default: 1\n            range: [0, 100]\n          type: number\n        MinLength:\n          documentation:\n            description: The minimum length in studs of the rope.\n            default: 0\n            range: [0, 100]\n          type: number\n        MaxLength:\n          documentation:\n            description: The maximum length in studs of the rope.\n            default: 100\n            range: [0, 100]\n          type: number\n\n  # Has methods, is configurable, and is only spawnable\n  HyperspaceRadar:\n    documentation:\n      description: A device that images areas of hyperspace, allowing one to view hyperspace disturbances and track where HyperDrives have warped.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator:\n      name: wos-object\n      configurables:\n        ViewCoordinates:\n          type: Coordinates\n\n  # Has methods and is both craftable and spawnable\n  LifeSensor:\n    documentation:\n      description: |-\n        Senses and detects organic life up to a distance of 2000 studs. It only has a purpose within programming.\n        It is used in alien technology to hunt down organisms such as players.\n      categories: [Logic, Spawnable, Craftable]\n      code-sample: |-\n        -- Get access to the Waste of Space provided \'module\' that lets us access player usernames if\n        -- we provide it a `UserId`.\n        local players = require("players")\n\n        -- Create a whitelist of `UserId`s, it uses a \'dictionary\' format, where the keys are the `UserId`s\n        -- and the values are `true` so we can access whether someone is whitelisted by doing `WHITELIST[userId]`\n        -- rather than `table.find(WHITELIST, userId)`, which is both cleaner and "faster" (faster is in quotes\n        -- because the performance difference is minimal if you only have a few people in your whitelist)\n        local WHITELIST = {\n            [1178125707] = true,\n        }\n\n        -- Try and get the life sensor, throw an informative error if we don\'t find it using `assert`.\n        local lifeSensor = assert(GetPart("LifeSensor"), "no life sensor connected")\n\n        -- Create a \'function\' that we\'ll run whenever we find a player outside of the whitelist.\n        -- You may notice the `: number` and `: CFrame`, these are \'types\', they tell luau what types\n        -- of values variables are storing (the `CFrame?` just means `CFrame` or `nil`), which helps\n        -- with autofill and linting (linting is the squiggly lines that show up when you do bad things)\n        local function foundThreat(threatUserId: number, position: CFrame?)\n            -- Get the player\'s username from their `UserId` using the `players` module that is\n            -- provided by Waste of Space via `require("players")`.\n            local threatUsername = players:GetUsername(threatUserId)\n\n            -- If we have been given the position (and therefore the player is within the life sensor range)\n            -- then we can utilise the player\'s position in our operations.\n            if position then\n                -- What we do here is get the position of the target player *relative* to the life sensor,\n                -- then get the \'magnitude\' of the resulting value, which is the fancy way of saying \'length\'.\n                local distance = (position.Position - lifeSensor.Position).Magnitude\n\n                -- Output the player\'s username and their distance.\n                print(`There is a threat! Their name is {threatUsername} and they are {math.floor(distance)} studs away!`)\n            else\n                -- Output just the player\'s username, and add a note about how they\'re too far away to know their distance.\n                print(`There is a threat! Their name is {threatUsername}! They are too far away to tell their distance.`)\n            end\n        end\n\n        -- Connect to the `Loop` event of the `Microcontroller` that is running the code,\n        -- this will make the code within run precisely every game tick.\n        Microcontroller.Loop:Connect(function()\n            -- Get an \'array\' of the player `UserId`s, this function ignores the range limit.\n            local presenceReading = lifeSensor:ListPlayers()\n\n            -- This one returns a \'dictionary\' where the keys are the player `UserId\'s`, and\n            -- the values are the positions of the specific players, but it only includes\n            -- players within 2,000 studs of the `LifeSensor`, which is why we need\n            -- the result of `ListPlayers`.\n            local positionalReading = lifeSensor:GetPlayers()\n\n            -- Iterate over each of the players returned by `ListPlayers`, the \'index\' variable is\n            -- called `_` as is customary when defining a variable that is not ever used.\n            for _, userId in presenceReading do\n                -- If the user is whitelisted, skip to the next player using a `continue` statement.\n                if WHITELIST[userId] then continue end\n\n                -- Here, we try and get the player\'s position from the `GetPlayers` dictionary, if the\n                -- player is outside of the `LifeSensor`\'s range, this will be `nil` and *won\'t* throw\n                -- any sort of error.\n                local playerPosition = positionalReading[userId]\n\n                -- Merely call the `foundThread` function, giving it the user who we\'re talking about,\n                -- along with their position (their position *may* or *may not* be specified.)]\n\n                -- Note: If you were to do some computation within `foundThread` that takes a lot of\n                --       time (or maybe has a `task.wait` or two), you would want to do something\n                --       like `task.spawn(foundThread, userId, playerPosition)` instead, as this\n                --       will allow this function to keep looking for other players whilst the\n                --       `foundThreat` function is running (rather than waiting for it to finish).\n                --       Look into the roblox task scheduler if you want to know more.\n                foundThreat(userId, playerPosition)\n            end\n        end\n    hydrator:\n      name: wos-object\n      methods:\n        GetReading:\n          documentation: Returns a table where the keys are <i>humanoid</i> names and the values are <i>humanoid</i> positions. Only has a 2,000 stud range.\n          returns:\n            - name: reading\n              type:\n                [number]:\n                  type: Vector3\n              documentation: A dictionary of humanoid names to their world positions.\n        ListPlayers:\n          documentation:\n            description: Returns an array of player <code>UserId</code>s. Ignores the 2,000 stud range limit.\n          returns:\n            - name: players\n              array-type: number\n        GetPlayers:\n          documentation: Returns a table where the keys are <i>player</i> <code>UserId</code>s and the values are <i>player</i> CFrames. Only has a 2,000 stud range.\n          returns:\n            - name: players\n              type:\n                [number]:\n                  type: CFrame\n              documentation: A dictionary of player <code>UserId</code>s to their world CFrames.\n  LightTube:\n    documentation:\n      description: Emits light when powered with electricity. Can be colored in different ways, changing the light color.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetColor: *SetColorMethod\n  Spotlight:\n    documentation:\n      description: Emits light in a cone when powered with electricity. Color emition can be changed by coloring it.\n      categories: [Electrical, Decoration, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        SetColor: *SetColorMethod\n  StarMap:\n    documentation:\n      description: |-\n        Shows your current location in the universe and other nearby stars and celestial bodies.\n        It also has unique icons for every celestial body type. Clicking on a icon will set a all connected <code>HyperDrive</code>s/<code>Telescope</code>s to those coordinates.\n        Requires power in order to function.\n\n        It has 2 modes, universe and solar.\n        - Universe mode shows your location in the universe.\n        - Solar mode shows your location in the solar system if you are in one.\n\n        It can be triggered with polysilicon:\n        - <code>Activate</code> will set it to universe mode.\n        - <code>Deactivate</code> will set it to solar mode.\n        - <code>FlipFlop</code> will toggle between the two modes.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetSystems:\n          returns:\n            - name: systems\n              array-type: string\n        GetBodies:\n          returns:\n            # Complex type - requires rewriting\n            - name: bodies\n              type:\n                [string]:\n                  type:\n                    PlanetType:\n                      type: PlanetType\n\n  # Has events, is configurable, and is both craftable and spawnable\n  Anchor:\n    documentation:\n      description: When triggered or clicked, it is able to be anchored, a state in which it is immovable by physics, and applies to parts connected to it.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Anchored:\n          documentation: Determines whether the anchor is active or not.\n          type: boolean\n  Apparel:\n    documentation:\n      description: |-\n        A piece of clothing that can be worn by other players. Parts can also be attached to the apparel, meaning you can create your own suits with the apprel.\n        It is similar to the prosthetic, except it can be taken off and does not cause damage. However, electricity does not trasmit throughout the apparel unlike prosthetics.\n\n        Apparel can also holds less parts than the prosthetic. It can only hold 100 parts, while Prosthetics can hold 150.\n\n        Apparel has another configuration to it called Transparency, which dictates how transparent it will become when worn. Ranges from 0-1 from non-transparent to transparent.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Limb:\n          documentation: The name of the limb that this Apparel is for.\n          type: PlayerLimb\n        Transparency:\n          documentation:\n            description: The transparency of this Apparel.\n            default: 1\n            range: [0, 1]\n          type: number\n  BallastTank:\n    documentation:\n      description: Allows for variable ballast to be added to sea vehicles. Also prevents corrosion to attached parts underwater.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Buoyancy:\n          documentation:\n            description: The buoyancy of this BallastTank, 0 being neutral.\n            default: 0\n            range: [-10, 10]\n          type: number\n  Balloon:\n    documentation:\n      description: |-\n        Levitates parts attached to it to a certain configurable height.\n        However, it is easily poppable.\n        Does not work in space, or no-atmosphere planets.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Buoyancy:\n          documentation:\n            description: The buoyancy of this Balloon, 0 being neutral.\n            default: 0\n            range: [-10, 10]\n          type: number\n  Beacon:\n    documentation:\n      description: |-\n        Creates a small beacon of light when powered.\n        When <code>ShowOnMap</code> is enabled, it broadcasts a signal into the universe.\n        <code>BeaconName</code> changes the name of the beacon shown on the <code>StarMap</code>.\n        It has a 30 second cooldown for changing the configurables.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        BeaconName:\n          documentation:\n            description: The name of the beacon.\n            max-length: 20\n          type: string\n        ShowOnMap:\n          documentation: Whether this beacon should be shown on <code>StarMap</code>s.\n          type: boolean\n  Bin:\n    documentation:\n      description: |-\n        Stores solid items such as <code>Aluminum</code>, <code>Iron</code>, <code>Faucet</code>s, etc.\n        Can store up to 1,000 items. When destroyed, every item inside will also be destroyed.\n        The value increases as more items are added to it.\n\n        Bins can also be used as crafting recipes, with the resources inside being used.\n        You can also configure a bin to prevent items from being crafted from it, allowing for bins to be strictly for machine storage.\n      categories: [Starter, Storage, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Resource:\n          documentation:\n            description: The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything.\n            max-length: 24\n          type: string\n        CanBeCraftedFrom:\n          documentation: Determines whether this bin can be used by nearby players to craft objects.\n          type: boolean\n  Boombox:\n    documentation:\n      description: Must be powered in order to play music. When clicked, it will toggle playing music and will play the song id you give it.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Audio:\n          documentation: The audio asset ID to be played.\n          type: number\n  Camera:\n    documentation:\n      description: |-\n        It\'s a camera.\n        When a camera and Screen have the same ID, that screen will be used to display the camera view.\n        Clicking on a screen that is displaying the view of a camera will allow you to directly view what the camera is seeing.\n        No power is necessary.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        VideoID:\n          documentation:\n            description: The ID to transmit the camera feed over, received by screens of the same ID.\n            default: 0\n            range: [0, 10000000000]\n            increment: 1\n          type: number\n  CloningBay:\n    documentation:\n      description: Allows you to respawn at it from a remote location.\n      categories: [Starter, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Name:\n          documentation:\n            description: The name of the cloning bay.\n            default: CloningBay\n            max-length: 40\n          type: string\n  DriveBox:\n    documentation:\n      description: |-\n        When connected to a motor or engine with a rod, it will spin the same speed the engine or motor is going.\n        (You must click the drivebox first when creating a rod.)\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Reversal:\n          documentation: Determines whether the output should be reversed.\n          type: boolean\n        Ratio:\n          documentation:\n            description: The ratio of speed from 1 (1:100) to 100 (100:100) between this DriveBox and the source motor.\n            default: 100\n            range: [1, 100]\n            increment: 1\n          type: number\n  Engine:\n    documentation:\n      description: It acts similar to a motor, but is powered by gasoline instead of electricity.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        EngineSpeed:\n          documentation:\n            description: Determines the speed at which the engine is driven.\n            default: 10\n            range: [-20, 20]\n          type: number\n  Extractor:\n    documentation:\n      description: |-\n        Harvests or mines materials from the world. It can extract things like grass, snow, wood, ores, etc depending on what terrain it is attached to.\n\n        Small resource-rich mountains can be found in the world, and these produce a number of unique resources such as Oil, Quartz, Silicon, and more.\n        You may want to configure the extractor to extract a specific resource, which you can do by setting the MaterialToExtract config, otherwise, it will select a random resource to mine.\n      categories: [Starter, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        MaterialToExtract:\n          documentation: Determines the material to extract from connected natural surfaces. Disables the extractor if blank.\n          type: string\n  GravityGenerator:\n    documentation:\n      description: Generates an artificial gravity field when powered on. The gravity field only affects players, not individual parts. The amount of gravity can also be configureed, but the more gravity the higher amount of power needed. Only works in space, not inside planets.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Gravity:\n          documentation:\n            description: The amount of gravity within the influence of the GravityGenerator, measured in Gs.\n            default: 1\n            range: [0.15, 1.5]\n          type: number\n  Hatch:\n    documentation:\n      description: Acts as a chute when active/gray, but when black or inactive it acts as a normal object.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n  HeatPump:\n    documentation:\n      description: Pumps Heat between two points. Pumps a maximum of <b>4 MW</b> of heat energy.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        TransferRate:\n          documentation:\n            description: How many kW of heat energy to pump.\n            default: 4000\n            range: [0, 4000]\n          type: number\n  HeatValve:\n    documentation:\n      description: Acts as a HeatPipe when active/red, but when black or inactive it acts as a normal object.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n  Hologram:\n    documentation:\n      description: Using our brand new Multi-Dimensional Holographic Projection Technology\u2122 you are able to create a stationary clone with only the ID of the user provided!.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        UserId:\n          documentation:\n            description: The UserId of the player for the Hologram to display.\n            default: 1\n            range: [1, 10000000000]\n            increment: 1\n          type: number\n  Hydroponic:\n    documentation:\n      description: Grows grass and wood from water, turning attached water bins into either wood, sticks or grass. Incredibly useful for space bases or bases in areas devoid of life.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Grow:\n          documentation:\n            description: The material to grow from the Hydroponic.\n            default: Wood\n            max-length: 64\n          type: string\n  IonRocket:\n    documentation:\n      description: |-\n        A simple, fast propulsion device which consumes power to produce thrust. Moves in the direction of the arrow.\n        Can travel up to 100s/s at maximum propulsion.\n      categories: [Starter, Propulsion, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Propulsion:\n          documentation:\n            description: Determines the speed traveled at, 0 being standstill. Affects fuel consumption.\n            default: 50\n            range: [0, 100]\n          type: number\n  Laser:\n    documentation:\n      description: |-\n        Fires a concentraded beam of energy when powered, which can be used to damage and set objects on fire.\n        Has a Range of 1000 studs.\n        Primarily used as a weapon in space combat situations.\n        While it can damage objects effectively, it cannot damage energy shields.\n      categories: [Weapons, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        DamageOnlyPlayers:\n          documentation: Determines if this laser is only allowed to damage players and not materials.\n          type: boolean\n  LightBridge:\n    documentation:\n      description: Fires a beam of solid light that can be walked on.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        BeamColor:\n          documentation: The color of the bridge\'s beam.\n          type: Color3\n  MiningLaser:\n    documentation:\n      description: |-\n        Fires a beam at resource deposits that will mine them just like an Extractor can, allowing for mining while mobile.\n        The MiningLaser produces 2x the resources, but costs 5x more power to run.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        MaterialToExtract:\n          documentation: Determines the material to extract from the laser beam. Disables the laser if blank.\n          type: string\n  Motor:\n    documentation:\n      description: Spins objects attached to the hinge at the front when powered.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Power:\n          documentation:\n            description: Determines the amount of power used to drive the motor. This affects the torque and power consumption. Negative values are reverse.\n            default: 0.5\n            range: [-1, 1]\n          type: number\n        Ratio:\n          documentation:\n            description: Determines the gear ratio applied to the motor in terms of the multiplier on the RPM. A value of 0.1 indicates a 10:1 ratio, where RPM is 1/10th and torque is 10x when compared to the default setting of 1.\n            default: 1\n            range: [0.001, 10]\n          type: number\n  Polysilicon:\n    documentation:\n      description: |-\n        An electronic material which transforms a trigger signal into special on/off/toggle signals.\n\n        Has a configuration called Frequency which dictates how many times the polysilicon will repeat a trigger.\n        For example, if a polysilicon was attached to a pulley, having a frequency of 5 and triggered, the pulley will be activated 5 times.\n      categories: [Logic, Starter, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        PolysiliconMode:\n          documentation: The mode of the Polysilicon. Each mode results in different behaviors for objects.\n          type: PolysiliconMode\n        Frequency:\n          documentation:\n            description: The amount of times to activate the Polysilicon from a single trigger.\n            default: 1\n            range: [1, 10]\n            increment: 1\n          type: number\n  Port:\n    documentation:\n      description: |-\n        Only used in programming. Allows a <code>Microcontroller</code> to interface with <code>PilotObject</code>s.\n        To do so, the Port must be between the <code>Microcontroller</code> and the <code>PilotObject</code> or <code>Microcontroller</code> and the <code>EthernetCable</code> (to interface with objects further away from the <code>Microcontroller</code>).\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Triggered: *TriggeredEvent\n      configurables:\n        PortID:\n          documentation:\n            description: The ID of this port used to utilize this port by connected <code>Microcontroller</code>s.\n            default: 1\n            range: [0, 10000000000]\n            increment: 1\n          type: number\n  Prosthetic:\n    documentation:\n      description: |-\n        An artificial part that can be attached to players in exchange for a limb.\n        The limb configuration can be configureed to be the limb you want to have for a prosthetic, for example configuring it to be "Right Leg" will have the prosthetic attach itself to your character.\n        Simply touch the prosthetic, and it will automatically be attached to your body. This process is extremely unhealthy, however, and may result in short-term complications.\n\n        Parts can be attached to the prosthetic, allowing many uses for the prosthetic limb.\n\n        Prosthetic limbs are also electrically conductable, acting as a wire.\n\n        Heavily damages the character once attached.\n        Prosthetics can\'t have more than 50 parts attached to them.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Limb:\n          documentation: The name of the limb that this Prosthetic is for.\n          type: PlayerLimb\n  ProximityButton:\n    documentation:\n      description: Sends trigger signals when interacted via its ProximityPrompt.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        PromptButtonHoldBegan: {}\n        PromptButtonHoldEnded: {}\n        PromptTriggerEnded: {}\n        PromptTriggered: {}\n      configurables:\n        KeyboardKeyCode:\n          documentation: The name of the key that will trigger the proximity prompt on a keyboard.\n          type: string\n        GamepadKeyCode:\n          documentation: The name of the key that will trigger the proximity prompt on a gamepad.\n          type: string\n        ObjectText:\n          documentation:\n            description: The text of the proximity prompt.\n            max-length: 64\n          type: string\n        HoldDuration:\n          documentation: The length of time that the proximity prompt has to be held down for.\n          type: number\n        MaxActivationDistance:\n          documentation:\n            description: The range of the prompt, from 0 - 50.\n            default: 5\n            range: [0, 50]\n          type: number\n        RequiresLineOfSight:\n          documentation: Whether a line of sight to the center of the part is required for the prompt to become visible.\n          type: boolean\n  Pump:\n    documentation:\n      description: Pumps liquid from the environment into attached Tanks. For example, a pump located in the ocean will pump water when powered.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        LiquidToPump:\n          documentation:\n            description: The name of the liquid to extract using the pump.\n            default: Water\n            max-length: 24\n          type: string\n  Rocket:\n    documentation:\n      description: A propulsion device that consumes gasoline.\n      categories: [Propulsion, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        Propulsion:\n          documentation:\n            description: Determines the speed traveled at, 0 being standstill. Affects fuel consumption.\n            default: 30\n            range: [0, 100]\n          type: number\n  Sign:\n    documentation:\n      description: Displays text or images. To display an image, configure it to id:imageid.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        SignText:\n          documentation:\n            description: The text to display on the front of the sign. Rich text is allowed.\n            default: Text\n            max-length: 256\n          type: string\n        TextColor:\n          documentation: The color of the text on the sign.\n          type: Color3\n        TextFont:\n          documentation: The font of the text on the sign.\n          type: string\n  Solenoid:\n    documentation:\n      description: Controls the switch state of any switches attached to its output face based on whether or not it has power in the configured range.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Inverted:\n          documentation: Whether or not the state will be inverted.\n          type: boolean\n        PowerRange:\n          documentation: The power range the state will be active for.\n          type: NumberRange\n  Sorter:\n    documentation:\n      description: Moves a type of resource through it, depending on the input and output faces as indicated by the arrow. Behaves just like the old Diode part when set to insert 100 Power.\n      categories: [Electrical, Storage, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Resource:\n          documentation:\n            description: The kind of resource to push. May be a special or generic type like Gas, Solid, etc.\n            default: Power\n            max-length: 24\n          type: string\n        Rate:\n          documentation:\n            description: How much of the resource to push per second. May be inf (or math.huge in a Microcontroller).\n            minimum: 0\n            increment: 1\n          type: number\n  SteamEngine:\n    documentation:\n      description: It acts similar to a motor, but is powered by Steam instead of electricity.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        EngineSpeed:\n          documentation:\n            description: Determines the speed at which the engine is driven.\n            default: 10\n            range: [-20, 20]\n          type: number\n  StorageSensor:\n    documentation:\n      description: |-\n        When the number of contents within connected storage objects is within a defined range, it will send trigger signals similar to a button.\n        This can be used to automate production of certain products when the stored quantity is low.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        QuantityRange:\n          documentation: The range of item quantities within which this sensor will trigger.\n          type: NumberRange\n  Switch:\n    documentation:\n      description: Acts as a wire when active/green, but when black or inactive it acts as a normal object. Must use a polysilicon to switch for trigger events.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n  Tank:\n    documentation:\n      description: Stores liquids and gases. When a liquid or gas touches the Tank, the Tank will automatically store it. Will not conduct heat when containing a fluid, making it a good heat storage part.\n      categories: [Starter, Storage, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Resource:\n          documentation:\n            description: The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything.\n            max-length: 24\n          type: string\n        CanBeCraftedFrom:\n          documentation: Determines whether this Tank can be used by nearby players to craft objects.\n          type: boolean\n  Teleporter:\n    documentation:\n      description: |-\n        A device used to transport players across regions.\n        When powered and triggered, it will teleport all players in the beam to the given coordinates and teleporter id.\n        It will warp the player to a teleporter in the region with the given teleporter id.\n\n        When warping to a teleporter inside of a planet, set the last value to true. For example,\n        50, -50, 85, -75, true\n\n        Make sure you set the correct coordinates OR YOU WILL BE STRANDED!\n\n        Costs 1000 energy per teleport. Teleporter uses Energy regardless if a player is on the Teleporter at the moment it gets triggered.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Triggered: *TriggeredEvent\n      configurables:\n        Coordinates:\n          documentation: The coordinates to your Destination.\n          type: Coordinates\n        TeleporterID:\n          documentation:\n            description: The ID of the teleporter at the goal coordinates to teleport directly to.\n            default: 1\n            range: [1, 999]\n            increment: 1\n          type: number\n        ForceLocalTeleport:\n          documentation: Whether to only attempt to teleport to teleporters within the same region, ignoring the "Coordinates" configuration.\n          type: boolean\n  Thruster:\n    documentation:\n      description: |-\n        A high powered propulsion device. The larger the thruster, the faster it can go, up to 500s/s, but it will consume more power.\n        The thruster will not operate below -30, or above 200 degrees fahrenheit.\n      categories: [Starter, Propulsion, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n      configurables:\n        Propulsion:\n          documentation:\n            description: Determines the percentage of thrust (speed). Affects fuel consumption.\n            default: 50\n            range: [0, 100]\n          type: number\n  Transformer:\n    documentation:\n      description: Sends a constant trigger signal when powered. By default, it will send a trigger signal every tick, but can be configured up to every 360 seconds. If the transformer\'s loop time matches the game\'s internal tick rate (the default,  1/s), it will synchronize with the game loop.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n        Triggered: *TriggeredEvent\n      configurables:\n        LoopTime:\n          documentation:\n            description: The time in seconds between triggers.\n            default: 1\n            range: [0, 360]\n          type: number\n  Transistor:\n    documentation:\n      description: Carries trigger signals in the direction of the arrow if any power source is attached. Can be inverted by clicking or configuring.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        Inverted:\n          documentation: Whether or not the state will be inverted.\n          type: boolean\n  TriggerSwitch:\n    documentation:\n      description: Acts as a <code>TriggerWrite</code> when active/green, but when black or inactive it acts as a normal object. It <i>will</i> toggle when exposed to <code>Polysilicon</code> signals.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n  TriggerRelay:\n    documentation:\n      description: Acts as a <code>TriggerWrite</code> when active/green, but when black or inactive it acts as a normal object, it <i>will not</i> toggle when exposed to <code>Polysilicon</code> signals, rather, it will pass them through if it is active, as if it were a normal signal.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n  Valve:\n    documentation:\n      description: Acts as a pipe when active/gray, but when black or inactive it acts as a normal object.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n      configurables:\n        SwitchValue: *SwitchValueConfigurable\n\n  # Has events, is configurable, and is only spawnable\n  Blade:\n    documentation:\n      description: A legacy pre-component part. A sharp object that can pierce through objects if the material is durable and strong.\n      categories: [Unused, Templates, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        ComponentsUpdated: *ComponentsUpdatedEvent\n      configurables:\n        Shape:\n          documentation: The shape of the blade.\n          type: BladeShape\n  FluidProjector:\n    documentation:\n      description: |-\n        A device which projects a field of gas or liquid in front of it which you can swim in.\n        Host the universe\'s greatest pool party!\n        The fluid area can be configureed in size and type.\n\n        The FluidProjector requires power in order to work, and must be supplied with the correct fluid to work.\n        Significantly more power is required on planets with high gravity.\n        As an example, if the fluid is water, it will need a supplied Tank of water attached to work.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        Loop: *LoopEvent\n      configurables:\n        Size:\n          documentation: The size in studs of the projected fluid field.\n          type: Vector3\n        Fluid:\n          documentation:\n            description: The name of the fluid being projected.\n            default: Water\n            max-length: 64\n          type: string\n  Turbofan:\n    documentation:\n      description: |-\n        Generates thrust from crude Oil, similar to a Thruster.\n        If a motor is attached to the front, it instead acts like an engine and rotates it.\n      categories: [Unused, Propulsion, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        TurboFanSpeed:\n          documentation:\n            description: Determines the speed at which the turbofan is driven, or the speed at which it travels.\n            default: 5\n            range: [0, 100]\n          type: number\n\n  # Has events and is configurable\n  DevGravityGenerator:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n      configurables:\n        Enabled:\n          documentation: Whether or not the gravity generator is enabled.\n          type: boolean\n        Gravity:\n          documentation:\n            description: The amount of gravity within the influence of the GravityGenerator as a force.\n            default: 196.2\n          type: number\n        Radius:\n          documentation:\n            description: The radius of the generated gravity field.\n            default: 588.6\n          type: number\n\n  # Has events and is both craftable and spawnable\n  Asphalt:\n    documentation:\n      description: |-\n        A modern material useful for smooth road surfaces.\n        Its durability triples when anchored.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  AutomaticLaser:\n    documentation:\n      description: Fires a continous set of lasers when powered. Like most other energy/thermal weapons, it generates heat when powered. It generates up to 65 degrees of heat, meaning you will need atleast 2 or 3 coolers.\n      categories: [Weapons, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Battery:\n    documentation:\n      description: A light part that contains 400 energy and is prefilled. Cannot be recharged.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n  Boiler:\n    documentation:\n      description: Consumes Coal and Water and produces Steam.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Brick:\n    documentation:\n      description: A cheap, malleable material with special durability properties. The durability is 4, and becomes 18 when it is anchored or attached to terrain (grounded).\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  BurnerGenerator:\n    documentation:\n      description: Creates electricity when fueled with coal.\n      categories: [Starter, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  CombustionTurbine:\n    documentation:\n      description: Creates electricity when fueled by gasoline.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Controller:\n    documentation:\n      description: |-\n        Alters the speed of attached controllable objects which include:\n        - <code>Engine</code>\n        - <code>Motor</code>\n        - <code>BallastTank</code>\n        - <code>IonDrive</code>\n        - <code>IonRocket</code>\n        - <code>Thruster</code>\n        - <code>Rocket</code>\n\n        You must use a polysilicon between this controller and an object that emits a trigger signal (such as a button) to use the same events as clicking the interface.\n        For example, <code>FlipFlop</code> will set the speed of the controllable objects to 0, <code>Deactivate</code> will subtract 5 from the current speed, etc.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n        Triggered: *TriggeredEvent\n  CrudeWing:\n    documentation:\n      description: |-\n        Creates lift from being pushed forward.\n        A worse version of a Wing.\n        Does not work in space or in non atmospheric planets.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  DarkConverter:\n    documentation:\n      description: Converts attached dark matter bins into energy. 1 unit of dark matter is equal to 1000 watts of power. However, this generates a ton of heat in the process, nearly up to 200 degrees when activated. This means you will need about 10 coolers to avoid combustion.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  DarkReactor:\n    documentation:\n      description: |-\n        Generates Dark Matter when powered and near a black hole.\n        The reactor is very unstable, and if the reactor overheats it will cause a huge explosion.\n\n        The DarkReactor generates up to 500 degrees of temperature, meaing you will need atleast 25 coolers to cool the reactor to make sure it does not overheat.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Decoupler:\n    documentation:\n      description: |-\n        When triggered, it breaks welds and falls off of anything attached.\n        Can be used to separate things.\n        The trigger signals will pass through the decoupler as it is decoupled.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Triggered: *TriggeredEvent\n  DeleteSwitch:\n    documentation:\n      description: An object that deletes itself when triggered.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Triggered: *TriggeredEvent\n  ElectricFence:\n    documentation:\n      description: A special version of the fence which damages upon contact as long as it is powered. Conducts electricity like a wire.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Electromagnet:\n    documentation:\n      description: A powerful magnet.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  EnergyBomb:\n    documentation:\n      description: Causes a powerful explosion when triggered. Often used in space combat as a means of a powerful missile or torpedo.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Triggered: *TriggeredEvent\n  Explosive:\n    documentation:\n      description: Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Triggered: *TriggeredEvent\n  Fireworks:\n    documentation:\n      description: Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Triggered: *TriggeredEvent\n  Flamethrower:\n    documentation:\n      description: Shoots a stream of flaming gasoline to ignite your foes.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Food:\n    documentation:\n      description: |-\n        A consumable item.\n        <i>Appears</i> to be meat.\n        Upon clicking it, it will heal the user\'s health depending on the size.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        OnClick: *OnClickEvent\n  Freezer:\n    documentation:\n      description: Turns liquid Water into solid Ice, expelling heat energy in the process. Requires some power.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Furnace:\n    documentation:\n      description: Burns resources at 16x speed to produce Heat energy directly. Has a low thermal conductivity.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Igniter:\n    documentation:\n      description: Sets alight unlocked parts within the immediate vicinity when triggered. Range depends on the size.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Triggered: *TriggeredEvent\n  Kiln:\n    documentation:\n      description: Turns attached sand bins into glass.\n      categories: [Starter, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Melter:\n    documentation:\n      description: Melts Ice into liquid Water by consuming Power.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Microphone:\n    documentation:\n      description: Used in programming. Takes user\'s input from chat.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Chatted:\n          parameters:\n            - name: player\n              type: number\n            - name: message\n              type: string\n  Obelisk:\n    documentation:\n      description: |-\n        An object designed to attract aliens to the region. Emits an ominous noise when powered.\n        Must be anchored and powered in order to function. Must also be open to the sky. Only one obelisk in a region can be powered at a time.\n        When active, it will summon aliens every 300 seconds.\n        <b>Use at your own risk.</b>\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Plastic:\n    documentation:\n      description: A cheap material made from petroleum and Coal through polymerisation inside assemblers.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  PowerCell:\n    documentation:\n      description: |-\n        Stores electricity, and is used to power many devices using wires or by directly attaching it.\n        Has a maximum capacity of 200000.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n  Propeller:\n    documentation:\n      description: |-\n        Propellers propel forward when spun.\n        Forward direction indicated by white spot.\n        Does not work in space or non atmospheric planets.\n      categories: [Propulsion, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Radar:\n    documentation:\n      description: An instrument that shows a 2D top-down representation of Earth.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Railgun:\n    documentation:\n      description: |-\n        Fires a piercing <code>Rail</code> at high speeds. A long range weapon. Requires <code>Rail</code>s and electricity for ammo. The damage increases for every 10 studs of length.\n        It will pierce if the hit part is destroyed. Must be at least have a width and height of 6 and at least a length of 30 to function.\n        While the <code>Railgun</code> is similar to the <code>Artillery</code>, the <code>Railgun</code> is nearly instant while <code>Artillery</code> is a projectile weapon.\n\n        Requires to charge for one minute before it can fire. While charging and when charged, it creates large amount of heat. The charging status resets when this part is damaged.\n        When it is finished charging, it will stop creating a sound. At that point, it must be triggered and supplied by a <code>Rail</code> bin in order to fire.\n      categories: [Weapons, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Loop: *LoopEvent\n        Triggered: *TriggeredEvent\n  Refinery:\n    documentation:\n      description: Turns oil into Petroleum and Gasoline.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  RepairLaser:\n    documentation:\n      description: Fires a beam that repairs objects. Repairs <b>1</b> HP/s.\n      categories: [Weapons, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Rotor:\n    documentation:\n      description: |-\n        Provides vertical height when spun, and only works in oxygen planets.\n        The spin speed determines the height, and the tilt of the rotor determines the forward propulsion of the rotor.\n      categories: [Propulsion, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Sail:\n    documentation:\n      description: Utilizes the wind to move forward.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Scrapper:\n    documentation:\n      description: Scraps unlocked solid items into their crafting components (with some loss) on contact when powered, else destroys them if unpowered. Will send locked single raw parts such as Iron or AlienCore into connected bins.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  SolarPanel:\n    documentation:\n      description: |-\n        Generates electricity using solar energy from a local star.\n        The closer it is to a star, the more energy it generates.\n        The type of star also affects its energy generation, as well as the size of the <code>SolarPanel</code>.\n        If the <code>SolarPanel</code> is blocked by a part, it will not generate any energy, <i>glass</i> however will work.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  StasisField:\n    documentation:\n      description: |-\n        Creates a 500 stud radius field that prevents any parts or objects around it from being dragged.\n        This can be used alongside with a RegionCloaker to create public infrastructure to avoid trolling and such.\n        However, in order to function, the shield must be anchored/grounded, and nothing must be blocking above it. The shield is also extremely fragile.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  TouchSensor:\n    documentation:\n      description: Sends trigger signals upon contact.. with anything.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Touched:\n          parameters:\n            - name: object\n              nullable-union:\n                - type: number\n                - type: PilotObject\n  Treads:\n    documentation:\n      description: |-\n        Moves against surfaces it contacts. In order for the treads to function, you need to use a Motor, Engine, or DriveBox to spin up a part which will act as the driver part. The driver part should be connected to the treads via a rod, and should spin with the same orientation as a wheel would to achieve maximum speed.\n\n        Multiple driver parts can be attached to the treads at once, and their speeds will be added together. The treads will move depending on the direction & speed that the driver part spins.\n\n        The speed the treads move depends entirely on the speed of rotation on the axis perpendicular to the treads, so rotating the driver part off-axis will reduce (or invert) the speed. For example, 45 degrees off-axis = 50% speed, 90 degrees off-axis = 0% speed, 135 degrees off-axis = -50% speed, and 180 degrees off-axis = -100% speed.\n      categories: [Propulsion, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Wing:\n    documentation:\n      description: |-\n        Creates lift from being pushed forward.\n        Works at higher altitudes and at better angles than a CrudeWing.\n        Does not work in space or in non atmospheric planets.\n      categories: [Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  WirelessButton:\n    documentation:\n      description: Similar to a button, but can be clicked from infinite distances and cannot be used for keybinds.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        OnClick: *OnClickEvent\n\n  # Has events and is only craftable\n  SolarScoop:\n    documentation:\n      description: |-\n        Extracts materials from a star when powered and pointed at a star.\n        Depending on the class of the star, it will extract more materials.\n\n        Generates around 240 degrees of heat, meaning you will need atleast 12 coolers to cool it down.\n\n        Red stars generate 25 helium, 5 plasma and 10 hydrogen per second.\n        Orange stars generate 30 helium, 5 plasma and and 15 hydrogen per second.\n        Yellow stars generate 35 helium, 5 plasma and and 20 hydrogen per second.\n        Light blue stars generate 40 helium, 25 hydrogen, 10 plasma and and 10 iron per second.\n        Neutron stars generate 60 helium, 45 hydrogen, 15 plasma and and 20 iron per second. It also generates 1-2 neutronium every 2 minutes.\n\n        It is recommended to use a Filter to seperate the materials extracted by a solar scoop.\n      categories: [Electrical, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  Warhead:\n    documentation:\n      description: |-\n        Causes a powerful explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.\n        The only down-side of the warhead is that it is blocked completely by energy shields.\n      categories: [Weapons, Craftable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Triggered: *TriggeredEvent\n\n  # Has events and is only spawnable\n  Part100k:\n    documentation:\n      description: 100k visits special item.\n      categories: [Spawnable]\n    hydrator:\n      name: wos-object\n      class-name: 100k\n      events:\n        OnClick: *OnClickEvent\n        Triggered: *TriggeredEvent\n  DevBattery:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n  DevHeatStorage:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n  Door:\n    documentation:\n      description: A legacy pre-component part. When triggered, it will open, and if triggered again will close.\n      categories: [Unused, Templates, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        ComponentsUpdated: *ComponentsUpdatedEvent\n  FourthOfJuly:\n    documentation:\n      description: Causes an explosion when triggered along with a Fourth Of July message. You can use a delay wire to make it explode after a few seconds and not immediately.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Damaged: *DamagedEvent\n        Triggered: *TriggeredEvent\n  HeatCell:\n    documentation:\n      description: |-\n        Legacy test item. Stores heat energy.\n        Has a limit of 400 kJ.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      methods:\n        GetResource: *GetResourceMethod\n        GetResourceAmount: *GetResourceAmountMethod\n        GetAmount: *GetAmountMethod\n      events:\n        ContainerChanged: *ContainerChangedEvent\n  Hull:\n    documentation:\n      description: A legacy pre-component part. Is able to float in the water, as well as carry objects attached to it. Primarily used for creating boats and other water craft.\n      categories: [Unused, Templates, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        ComponentsUpdated: *ComponentsUpdatedEvent\n  RepairPlate:\n    documentation:\n      description: |-\n        EXPERIMENTAL - While at least <b>90%</b> charged (<b>27</b> power), distributes repaired health between itself and damaged parts attached to its top surface.\n\n        Charges at a fixed rate of <b>1</b> power per second, up to a total capacity of <b>30</b>. Once charged, it consumes <b>2.5</b> power per second.\n        Can be chained with other <code>RepairPlate</code>s.\n        Power cannot be inserted or extracted.\n        Cannot be resized below 1x1x1.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  WindTurbine:\n    documentation:\n      description: |-\n        Creates rotation using the wind.\n        Unreliable and large motor.\n        Does not work in space or no-atmosphere planets.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n  tinnitus:\n    documentation:\n      description: An interesting spring which does strange things.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      events:\n        Loop: *LoopEvent\n\n  # Has events\n  Component:\n    documentation:\n      description: A portable component. May be installed on parts to add unique behaviours.\n      categories: [Tool, Tools]\n    hydrator:\n      name: wos-object\n      events:\n        ComponentsUpdated: *ComponentsUpdatedEvent\n  FactionHub:\n    documentation:\n      description: |-\n        Configures faction settings, view members, invite players, accept invites, save resources/models and view controlled regions.\n        This is not a form of claiming a region.\n      categories: [Unused]\n    hydrator:\n      name: wos-object\n      events:\n        Configured: *ConfiguredEvent\n        OnClick: *OnClickEvent\n\n  # Is configurable and is both craftable and spawnable\n  Antenna:\n    documentation:\n      description: A wireless transmitter that can transmit electricity from wires and trigger signals from trigger wires and buttons.\n      categories: [Logic, Starter, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        AntennaID:\n          documentation:\n            description: The ID of this antenna, to transmit to others with the same ID.\n            default: A1\n            max-length: 64\n          type: string\n  ConveyorBelt:\n    documentation:\n      description: Moves objects ontop of it towards the front of the conveyor belt. Only moves when powered and anchored or attached to the ground.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        ConveyorBeltSpeed:\n          documentation:\n            description: Determines the speed at which the conveyor will move items on top of it.\n            default: 10\n            range: [-30, 30]\n          type: number\n  DelayWire:\n    documentation:\n      description: Similar to a regular trigger wire, but depending on the configuration will wait x seconds before the trigger signal passes through.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        DelayTime:\n          documentation:\n            description: The time in seconds that it takes for signals to pass through this wire.\n            default: 1\n            range: [0, 360]\n          type: number\n  Filter:\n    documentation:\n      description: Similar to a chute and a pipe, but only allows the configured material to pass through.\n      categories: [Storage, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        Filter:\n          documentation:\n            description: The name of the material allowed to pass through.\n            max-length: 24\n          type: string\n        Invert:\n          documentation: Whether or not to invert the filter.\n          type: boolean\n  Handle:\n    documentation:\n      description: A handle which can be equipped when a player touches it, turning all connected parts into an equipable tool.\n      categories: [Tools, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        Swing:\n          documentation: What the tool should do when clicking. Point mode will aim the handle at the mouse cursor.\n          type: HandleSwingMode\n        TriggerMode:\n          documentation: Determines when this Handle should send trigger signals.\n          type: HandleTriggerMode\n        ToolName:\n          documentation:\n            description: The name of the tool.\n            default: Handle\n            max-length: 64\n          type: string\n  RemoteControl:\n    documentation:\n      description: Sends trigger signals forward wirelessly when triggered. Supports all variants of trigger signals including from Polysilicon.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        RemoteControlRange:\n          documentation:\n            description: The range in studs at which signals will be transmitted.\n            default: 120\n            range: [1, 500]\n          type: number\n        RemoteControlMode:\n          documentation: The way in which trigger signals should be transmitted. This setting only affects parts that are connective to trigger signals (e.g. TriggerWire).\n          type: RemoteControlMode\n  Router:\n    documentation:\n      description: A wireless transmitter that can transmit an ethernet connection.\n      categories: [Logic, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        RouterID:\n          documentation:\n            description: The ID of this router, to transmit to others with the same ID.\n            default: R1\n            max-length: 64\n          type: string\n  TimeSensor:\n    documentation:\n      description: |-\n        When the current time matches the time configured in the TimeSensor, it will send a trigger signal.\n\n        For example, if the world turns 7:15 it will send a trigger signal.\n\n        This is useful for creating dynamic lights that turn on only during the night, saving energy.\n\n        The format should be hour:minute\n      categories: [Logic, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        Time:\n          documentation:\n            description: The time at which this sensor will trigger.\n            default: 7:30\n            max-length: 5\n          type: string\n  TractorBeam:\n    documentation:\n      description: Fires a beam that exerts force on the object it hits. More effective in space due to low gravity, but still decently strong when affected by gravity. Force is affected by size and configuration.\n      categories: [Weapons, Propulsion, Electrical, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        PowerPercent:\n          documentation:\n            description: Determines the percentage of total available force (depending on size) used by the beam.\n            default: 100\n            range: [0, 100]\n          type: number\n  Transporter:\n    documentation:\n      description: |-\n        Acts as an antenna but for bins and objects containing materials such as liquids and solids.\n        Useful for creating large factory bases with many extractors without using long chutes.\n      categories: [Logic, Starter, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      configurables:\n        TransporterID:\n          documentation:\n            description: The ID of this transporter, to transmit to others with the same ID.\n            default: T1\n            max-length: 64\n          type: string\n\n  # Is configurable and is only spawnable\n  Relay:\n    documentation:\n      description: |-\n        A powerful transmitter capable of transmitting trigger signals and resources/power between different regions.\n        It is a more powerful version of the antenna and transporter.\n\n        Unlike the antenna, the relay has 2 modes, mode 0 and mode 1.\n        Mode 0 sends resources/power and trigger signals, while mode 1 receives it.\n\n        Unlike the antenna, it can also transfer power in inactive regions or regions without players in them.\n        This means that you can connect a relay to your main base, warp away without anyone in the base, and still have the relay get the sufficient amount of power.\n\n        However, you should have only one sending relay per coordinate, as conflicts can occur if there are 2 or more relays in the region/coordinates sending power or signals with the same ID.\n        On the other hand, there can be an infinite number of receivers but the power/resources will be distributed evenly among them.\n\n        For example, let\'s say a relay network has a total output of 500 power and 25 iron. If there are 5 active receivers, each of them will get 100 power and 5 iron.\n\n        When the relay is red, it means it not functioning. When it turns green, it is properly linked up to another relay or is sending signals.\n      categories: [Unused, Spawnable]\n    hydrator:\n      name: wos-object\n      configurables:\n        Mode:\n          documentation: The mode of the relay. Send outputs materials to other receiving relays; Receive receives materials from sending relays.\n          type: RelayMode\n        LinkerID:\n          documentation:\n            description: The ID of the relay, to send or take materials to or from other relays with the same ID.\n            default: 1\n            range: [1, 10000000000]\n            increment: 1\n          type: number\n\n  # Is configurable\n  DevTeleporter:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused]\n    hydrator:\n      name: wos-object\n      configurables:\n        TeleporterID:\n          documentation:\n            description: The ID of the teleporter at the goal coordinates to teleport directly to.\n            max-length: 64\n          type: string\n\n  # Is both craftable and spawnable\n  Aerogel:\n    documentation:\n      description: An incredibly light and fragile material.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  AirSupply:\n    documentation:\n      description: Generates a 300 stud radius oxygen bubble when powered on. Very important part for space ships, as it acts as the oxygen supply for the ship.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  Artillery:\n    documentation:\n      description: |-\n        Fires a fast-moving metal shell upon being triggered.\n        This metal shell generates a small explosion upon impact.\n        Costs 15 iron per shot.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  Ball:\n    documentation:\n      description: A ball shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  BeamRifle:\n    documentation:\n      description: A deadly long-range energy sniper. Able to pick off targets at a long range with exceptional accuracy.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  BlastingCap:\n    documentation:\n      description: A component used in crafting recipes for more advanced explosive devices.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Block:\n    documentation:\n      description: A block shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  BurstLaser:\n    documentation:\n      description: |-\n        Fires 5 rapid sets of concentrated laser beams. Each beam does a mediate amount of damage.\n        Costs 100 power for each beam fired, meaning the total power cost is 500 power.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  Button:\n    documentation:\n      description: |-\n        Sends trigger signals when clicked by a player.\n        When connected to a seat and the input key is configured/configureed, the player sitting in the seat can activate the button by pressing the corresponding key.\n        TriggerMode 0: Trigger on key down\n        TriggerMode 1: Trigger on key up\n        TriggerMode 2: Trigger on key down and key up\n      categories: [Logic, Spawnable, Craftable]\n    hydrator: wos-object\n  Cannon:\n    documentation:\n      description: |-\n        Fires a cannon ball when triggered or clicked.\n        Must be supplied with an ammo material.\n        Iron is prioritized, and results in one large cannonball being shot.\n        Copper results in grapeshot.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  Cement:\n    documentation:\n      description: A modern material useful for pavement.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Chute:\n    documentation:\n      description: |-\n        Used to transfer solid resources between objects such as bins and extractors.\n        Chutes may also transport multiple resources at the same time, allowing for an entire factory to be connected through one chute system.\n      categories: [Starter, Storage, Spawnable, Craftable]\n    hydrator: wos-object\n  Claymore:\n    documentation:\n      description: A classic medieval sword used to cut down your enemies.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Cleat:\n    documentation:\n      description: A textile resource similar to Rubber, except it has a high amount of friction and low bounciness. It can be used in physical machines such as the feet of mechs.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Cloth:\n    documentation:\n      description: A soft thin fabric that can soak up liquids.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Cone:\n    documentation:\n      description: A cone shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  Cooler:\n    documentation:\n      description: |-\n        Cools down the heat around a space when supplied with power.\n        Glows blue while functioning. Can be used to provide a cool environment in hot areas.\n        Is also useful for cooling down objects such as iondrives and engines.\n        Cooling amount is based on size -20 <i>X</i> Y * Z / 16\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  CornerRoundWedge2:\n    documentation:\n      description: A corner shaped template object rounded inwards.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  CornerRoundWedge:\n    documentation:\n      description: A rounded corner shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  CornerTetra:\n    documentation:\n      description: A template which is a tetrahedron subtracted from a cube.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  CornerWedge:\n    documentation:\n      description: A corner wedge shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  CrossBow:\n    documentation:\n      description: A cheap primitive ranged weapon.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Cylinder:\n    documentation:\n      description: A cylinder shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  Diode:\n    documentation:\n      description: Acts as a wire/chute/pipe/etc, but only works one way, through the diode\'s input and output faces as indicated by the arrow.\n      categories: [Electrical, Storage, Spawnable, Craftable]\n    hydrator: wos-object\n  EnergyGun:\n    documentation:\n      description: Fires a powerful shot of energy when provided power and triggered.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  EnergySword:\n    documentation:\n      description: A short ranged melee weapon which forms its own gravitational field when lunged. Forged with incarnated \u0336m\u0336a\u0336g\u0336i\u0336c science!\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  EthernetCable:\n    documentation:\n      description: Allows for the transfer of data between ports. Mostly utilized in programming.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator: wos-object\n  Extinguisher:\n    documentation:\n      description: A handy container with a spray nozzle to extinguish fires.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Fence:\n    documentation:\n      description: A metal fence. Can be used to set up walls and guard structures and bases.\n      categories: [Decoration, Spawnable, Craftable]\n    hydrator: wos-object\n  FireWood:\n    documentation:\n      description: A version of wood that is able to burn longer, allowing it to be an efficient fire burning device.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Flashlight:\n    documentation:\n      description: A flashlight which can be used to provide light.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  FloatDevice:\n    documentation:\n      description: Produces a force which counteracts gravity and keeps the device floating. The device will additionally resist upwards and downwards vertical motion.\n      categories: [Propulsion, Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  Framewire:\n    documentation:\n      description: Enter the matrix.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Gear:\n    documentation:\n      description: A mechanical component commonly used in crafting recipes for many objects.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  GeigerCounter:\n    documentation:\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Goo:\n    documentation:\n      description: A sticky substance that binds things together like glue. The effect lasts for for two minutes, but it can be washed off with Water. It will also melt off at 95 \xb0F.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Gun:\n    documentation:\n      description: |-\n        Fires a harmful bullet when triggered.\n        Must be supplied with ammo in order to function.\n        For example, you need an iron bin with 1 or more iron directly attached to it to work.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  HalfSphere:\n    documentation:\n      description: A half sphere shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  HeatPipe:\n    documentation:\n      description: Allows for the transfer of heat. Use a HeatPump to direct the heat.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Heater:\n    documentation:\n      description: Heats the air to `60 + volume / 16 * 10`\xb0F.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  Hotdog:\n    documentation:\n      description: sandwich.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  ImpulseCannon:\n    documentation:\n      description: Blasts a harmless burst of energy which sends anything nearby soaring at a high velocity.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  Insulation:\n    documentation:\n      description: A flammable material with a low thermal conductivity.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Katana:\n    documentation:\n      description: A weeaboo sword used to cut down your enemies.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Lantern:\n    documentation:\n      description: A handheld lantern which can be used to provide light.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Marble:\n    documentation:\n      description: A compact, durable material. Primarily decorative.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  MonsterMashPotion:\n    documentation:\n      description: You\'ll be a graveyard smash with this thrilling dance potion.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  MustardGas:\n    documentation:\n      description: A heavy chemical warfare weapon used to damage organisms. Gas Masks nullify the effects of this gas.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Neon:\n    documentation:\n      description: A building decoration material that glows by itself without requiring power.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  NightVisionGoggles:\n    documentation:\n      description: A set of goggles which can be used to see in the dark.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  PDWX44:\n    documentation:\n      description: A versatile automatic pulse based PDW capable of dishing incredible amounts of damage in a small amount of time. Equipped with 3 barrels for an unparalleled firerate.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator:\n      name: wos-object\n      class-name: PDW-X44\n  Pipe:\n    documentation:\n      description: Provides a medium for the transfer of liquids and gases between Tanks and other objects.\n      categories: [Storage, Spawnable, Craftable]\n    hydrator: wos-object\n  Pistol:\n    documentation:\n      description: A simple repeating firearm.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  PlasmaCannon:\n    documentation:\n      description: |-\n        Fires an orb of unstable plasma out of the barrel exploding on impact.\n        Needs to be fueled with 500 power and 50 helium or 1 plasma to fire.\n      categories: [Weapons, Spawnable, Craftable]\n    hydrator: wos-object\n  Plutonium:\n    documentation:\n      description: A highly radioactive compound used in manufacturing nuclear explosives.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  PlutoniumCore:\n    documentation:\n      description: A volatile core close to going supercritical used in recipes for Nuclear explosives.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Primer:\n    documentation:\n      description: A component used in crafting recipes for a few objects.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Pulverizer:\n    documentation:\n      description: |-\n        Pulverizes resources into powdered forms. Power cost: 3/s.\n\n        Recipes:\n        - 1x <b>Quartz</b>,1x <b>Stone</b> \u2192 2x <b>Sand</b>\n        - 1x <b>Ice</b> \u2192 1x <b>Snow</b>\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  RTG:\n    documentation:\n      description: Creates electricity from decaying radioactive elements.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  RegionCloaker:\n    documentation:\n      description: |-\n        Hides a certain region from players, making the coordinates not appear on their screen.\n        Region can only be (un)cloaked every 25 seconds. So if you unpower the <code>RegionCloaker</code>, you must wait 25 seconds before powering it again to ensure the region gets cloaked.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  ReinforcedGlass:\n    documentation:\n      description: A stronger, slightly less malleable version of glass. Blocks radiation.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  RepairKit:\n    documentation:\n      description: A useful kit of tools that can be used to repair objects which have been damaged. Keep away from biters.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Rice:\n    documentation:\n      description: Rice is nice.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  Rifle:\n    documentation:\n      description: A powerful long-range bolt action weapon. Q to scope.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  RoundWedge2:\n    documentation:\n      description: A block rounded inwards on one edge.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  RoundWedge:\n    documentation:\n      description: A block rounded on one edge, or 1/4 of a cylinder.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  Rubber:\n    documentation:\n      description: A textile resource used in manufacturing many industrial objects.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  RustedMetal:\n    documentation:\n      description: A weathered piece of metal.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  SMG:\n    documentation:\n      description: A fast firing, fully automatic gun able to pump out lots of rounds down range.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  ScubaMask:\n    documentation:\n      description: A set of goggles which can be used to help vision while underwater.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  SmoothGlass:\n    documentation:\n      description: A version of Glass using the Roblox Glass material. Additionally can be templated.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  SmoothReinforcedGlass:\n    documentation:\n      description: A version of ReinforcedGlass using the Roblox Glass material.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  SoundMuffler:\n    documentation:\n      description: A SoundMuffler will silences the sounds of machinery around it.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  SpawnPoint:\n    documentation:\n      description: Acts as a spawn location for the player who locked it.\n      categories: [Starter, Spawnable, Craftable]\n    hydrator: wos-object\n  Spheroid:\n    documentation:\n      description: A stretchable sphere shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  StudAligner:\n    documentation:\n      description: Snaps the entire assembly its attached to to the grid.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Tetrahedron:\n    documentation:\n      description: A tetrahedron template made of 3 perpendicular right triangles.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  Tile:\n    documentation:\n      description: A cheap material made from baked clay useful for building houses.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  TintedGlass:\n    documentation:\n      description: A material similar to Glass, but is tinted black on the front..\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Tire:\n    documentation:\n      description: A cylindrical shaped object used commonly in vehicles such as cars.\n      categories: [Spawnable, Craftable]\n    hydrator: wos-object\n  Torch:\n    documentation:\n      description: A torch which can be used to provide light.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  TriggerWire:\n    documentation:\n      description: Allows trigger objects to interact with each other when connected by triggerwires.\n      categories: [Logic, Spawnable, Craftable]\n    hydrator: wos-object\n  Truss:\n    documentation:\n      description: Used as a ladder.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  VintagePlasmaPistol:\n    documentation:\n      description: They don\'t make em like they used to.\n      categories: [Tool, Spawnable, Craftable]\n    hydrator: wos-object\n  WaterCooler:\n    documentation:\n      description: Removes -100 heat from the surrounding area, when supplied with power. Performs the same amount of cooling that five coolers would, give or take.\n      categories: [Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n  Wedge:\n    documentation:\n      description: A triangular shaped template object.\n      categories: [Templates, Spawnable, Craftable]\n    hydrator: wos-object\n  Wire:\n    documentation:\n      description: Allows electrical objects to interact with each other when connected by wires. For example, attaching a wire between a powercell and a light will allow electricity to move through the wire, allowing the light to function causing a source of light to be created.\n      categories: [Electrical, Starter, Spawnable, Craftable]\n    hydrator: wos-object\n  ZapWire:\n    documentation:\n      description: Electrocutes players when touched. Can be used to set flammable objects on fire.\n      categories: [Logic, Weapons, Decoration, Electrical, Spawnable, Craftable]\n    hydrator: wos-object\n\n  # Is only spawnable\n  AlienCore:\n    documentation:\n      description: |-\n        A mysterious piece of technology found within many robotic aliens.\n        Although its precise function is unknown, it manages to be extremely useful in advanced technologies.\n        It seems to emanate raw power on its own, but only these robotic constructions seem to know .\n        Generally, more powerful aliens will utilize more alien cores.\n      categories: [Natural, Electrical, Resources, Spawnable]\n    hydrator: wos-object\n  Aluminum:\n    documentation:\n      description: A light, non-durable material. Has a good thermal conductivity, but is lower than most other metals.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Beaker:\n    documentation:\n      description: A container for holding mixed chemicals.\n      categories: [Tool, Spawnable]\n    hydrator: wos-object\n  Beryllium:\n    documentation:\n      description: A lightweight metal only found on Barren planets used for preventing plutonium cores from going supercritical until detonated.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Billboardium:\n    documentation:\n      description: A super strong alloy made of Robux and pure refined ad.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  ChemicalSynthiser:\n    documentation:\n      description: |-\n        Synthesizes and mixes chemical compounds. Consumes matter out of attached bins in order to fuel the material synthesis.\n        - 1 Nitrogen + 3 Hydrogen = 2 Ammonia\n        - 1 Ammonia + 1 Ethanol = Diethylamine\n        - 2 Hydrogen + 2 Oxygen = Hydrogen Peroxide\n        - 2 Hydrogen + 1 Oxygen = Watern\n        - 1 Sodium + 1 Chlorine = Salt\n        - 2 Oxygen + 1 Carbon = Carbon Dioxide\n        - 2 Nitrogen + 1 Oxygen = Laughing gas/N2O\n        - 3 Chlorine + 1 Ethanol + 1 Water = Chloral Hydrate\n        - 1 Potassium + 1 Water = Explosion\n        - 1 Sodium + 1 Oxygen + 1 Hydrogen = 1 Sodium-Hydroxide\n        - 2 Oil + 1 Sodium-Hydroxide = Napalm\n        - 1 Diethylamine + 1 Ammonia + 1 Lithium + 1 Phosphorus = Hallucinogenic Compound\n        - 1 Salt + 1 Lithium + 1 Silicon + 1 Hydrogen = Hallucinogenic Toxin\n        - 1 Ammonia + 1 Oil + 1 Oxygen = Cyanide\n        - 1 Chlorine + 1 Ammonia = Mustard gas\n        - 1 Lithium + 1 Mercury = Toxin\n        - 1 Fluorine + 1 Hydrogen + 1 Potassium + 1 Sulphuric Acid = Fluorosulfuric Acid\n        - 1 Fluorosulfuric Acid + 1 Hydrogen Peroxide + 1 Nitrogen = Nitric Acid\n      categories: [Unused, Electrical, Spawnable]\n    hydrator: wos-object\n  Coal:\n    documentation:\n      description: A natural resources commonly used as a source of generating heat and energy. Can be placed in a BurnerGenerator to generate simple and fast energy.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Copper:\n    documentation:\n      description: A brown, shiny metal used heavily in electronics, a great conductor of both heat and electricity. Has a very high thermal conductivity, easily the best for common metals.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  DarkMatter:\n    documentation:\n      description: A very valuable material extracted from black holes and a few empty regions in space. Can be used to generate energy when supplied to a <code>DarkConverter</code>.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  DevGenerator:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator: wos-object\n  Diamond:\n    documentation:\n      description: A rare, carbon-dense, and very durable gem. Takes 2x energy damage & allows lasers to pass.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Egg:\n    documentation:\n      description: The perfect consumable item.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  ExoticMatter:\n    documentation:\n      description: "???"\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  FactionSpawn:\n    documentation:\n      description: Acts as a spawn location for the faction of the player who locked it.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  Flint:\n    documentation:\n      description: |-\n        Useful for lighting up flammable materials.\n        Simply rub it against a flammable material and it will set it on fire.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Gasoline:\n    documentation:\n      description: A liquid used for fueling many devices such as rockets and engines.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Generator:\n    documentation:\n      description: Creates energy from rotation.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator: wos-object\n  Glass:\n    documentation:\n      description: Created when sand is burned, set on fire, or fed into a Kiln. Can be broken by heavy impacts or by fist.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Gold:\n    documentation:\n      description: A very valuable and stretchable material. Has a thermal conductivity less than copper, and higher than aluminum.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Grass:\n    documentation:\n      description: An organic substance found in terra and forest planets. Often green, but can be other colors. Useful for planting seeds for agriculture.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  HeatSink:\n    documentation:\n      description: LEGACY. Reduces the air temperature by <b>10 \xb0F</b> (Produces <b>13.018197023481843 kW</b> of heat energy).\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  Heatshield:\n    documentation:\n      description: Generates a 300 stud radius area that protects all players and <b>only players</b> within the vicinity from temperature damage.\n      categories: [Unused, Electrical, Spawnable]\n    hydrator: wos-object\n  Helium:\n    documentation:\n      description: A light invisible odorless gas, floats up.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Hydrogen:\n    documentation:\n      description: A gas commonly found in stars and gas giants.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Ice:\n    documentation:\n      description: A compact natural resource found in tundra planets and the top of a few mountains. It is a slippery material, and has very low friction which can be useful in some devices.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  ImpactPlate:\n    documentation:\n      description: |-\n        EXPERIMENTAL - Distributes the damage it takes between itself and parts attached to its top surface, with higher health parts absorbing the most damage.\n        <b>25%</b> resistance to kinetic damage (guns, blades, cannons, explosions).\n        Cannot be chained with other <code>ImpactPlate</code>s.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  Iron:\n    documentation:\n      description: A compact and durable material, commonly found in planets. It is used often in crafting, and is a very important resource to have. Has poor thermal conductivity compared to most metals.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Jade:\n    documentation:\n      description: Reduces damage taken by 1.5 to a minimum of 0.2, but takes 25% additional damage.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Lava:\n    documentation:\n      description: A liquid used for fueling many devices such as rockets and engines.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Lead:\n    documentation:\n      description: An uncommon material used in protection against radiation and weapon manufacturing. Has one of the lowest thermal conductivities of all elemental metals in the game, next to Titanium.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Magnesium:\n    documentation:\n      description: A shiny gray solid that is flammable, randomly ignites when touching stone.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Neutronium:\n    documentation:\n      description: The most durable obtainable material in the game. It is a strange form of matter found from the crusts of neutron stars. Due to the nature of neutron stars, neutronium is the hardest known material as well as the densest known material in the universe.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  NitrogenOxide:\n    documentation:\n      description: A light gas emitted from machines such as extractors and rockets. Inhaling can cause severe lung damage.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  NuclearWaste:\n    documentation:\n      description: A highly radioactive material produced from spent Uranium in a reactor.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Obamium:\n    documentation:\n      description: An ancient artifact left behind from an alternate reality.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  Oil:\n    documentation:\n      description: A liquid used in refineries to produce Gasoline which can be used for fueling engines and rockets and Petroleum which can be used to make plastic.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Perfectium:\n    documentation:\n      description: The perfect material. Unbreakable, very stretchable, but is impossibly rare. The very sight of it makes you wonder the imperfections of human beings.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Petroleum:\n    documentation:\n      description: A gas used for creating plastic.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Plasma:\n    documentation:\n      description: A gas found abundant in stars, and can be harvested from them. Used primarily for weapons, as well as electrical components.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Quartz:\n    documentation:\n      description: A translucent and malleable crystal useful for making durable windows.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Radiator:\n    documentation:\n      description: LEGACY. Emits heat by releasing photons, making it ideal for discarding heat, and cooling things down. Will raise the temperature of surrounding air by <b>2.25 \xb0F/s</b> (<b>85%</b> of the input heat will be permanently discarded). Effectively gets rid of <b>16.6 kW</b> (1 kW is 1 kJ/s) of heat energy. In total, only <b>2.93 kW</b> of the heat energy it releases will re-enter any surrounding air. In space, all <b>19.53 kW</b> of the Radiator\'s throughput will be expelled.\n      categories: [Unused, Spawnable]\n    hydrator: wos-object\n  Ruby:\n    documentation:\n      description: A shiny red gem which can be found in mountain deposits. Exceptionally durable for how easily it can be obtained. Takes 2x energy damage & allows lasers to pass.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Sand:\n    documentation:\n      description: An abundant resource that can be found in the shores of terra and forest planets, the sea floors of ocean planets and in the dunes of desert planets. When burnt, the sand becomes glass.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Shotgun:\n    documentation:\n      description: |-\n        Fires a shot of harmful pellets when triggered.\n        Must be supplied with ammo in order to function.\n        For example, you need an iron bin with 1 or more iron directly attached to it to work.\n      categories: [Unused, Weapons, Spawnable]\n    hydrator: wos-object\n  Silicon:\n    documentation:\n      description: A metalloid that is very useful for electronics. Can commonly be found in cliffs and rocks.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Snow:\n    documentation:\n      description: An abundant resource that can be found in terra biomes and tundra planets. Can be melted into water.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Stanlium:\n    documentation:\n      description: Its love quivers, like it yearns for something within you; an eerie siren song that penetrates souls and tells of the destruction.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Steam:\n    documentation:\n      description: A result of water being heated up to high temperatures.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Stick:\n    documentation:\n      description: A natural resource found in trees and flora, often accompanied by wood. It is used for creating vital tools.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Stone:\n    documentation:\n      description: A resource found in nearly all planets. It is not recommended to use for structures, but is often used in crafting simple objects.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Sulfur:\n    documentation:\n      description: A yellow flammable solid which can be found in Stone deposits. Being set on fire gives it a special blue fire.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  TestStarMap:\n    documentation:\n      description: |-\n        A developer version of the starmap.\n\n        Showcases the entire universe. Lag maybe?? :topkek:\n      categories: [Unused, Electrical, Spawnable]\n    hydrator: wos-object\n  Titanium:\n    documentation:\n      description: A strong heavy material that is very useful for small scale constructs. Has a very low thermal conductivity, the lowest of all metals in the game.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Uranium:\n    documentation:\n      description: |-\n        A radioactive material often found in deposits in planets, especially ones near stars.\n        Useful for energy generation from reactors or radiation generators.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  VitalScanner:\n    documentation:\n      description: Displays chemicals another player has absorbed.\n      categories: [Tool, Spawnable]\n    hydrator: wos-object\n  Water:\n    documentation:\n      description: |-\n        The basis of all life, and is a liquid found in terra, forest, ocean and certain tundras and rogue planets.\n        At 212 degrees, the water evaporates into steam.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n  Wood:\n    documentation:\n      description: <b>A natural resource found in trees and flora.</b> It is a simple and yet effective material that is used for simple objects and structures. These can be mainly found in terra and forest planets, but can occasionally be found in temperate tundra and desert planets.\n      categories: [Natural, Resources, Spawnable]\n    hydrator: wos-object\n\n  # Worthless\n  AdBoard:\n    documentation:\n      description: Allows the creation of Ad elements, automatically. Very useful for making money.\n      categories: [Unused, Logic]\n    hydrator: wos-object\n  AdminTool:\n    documentation:\n      description: A debug item meant for developers.\n      categories: [Unused, Tools]\n    hydrator: wos-object\n  Mandrillium:\n    documentation:\n      description: An ancient artifact left behind from an alternate reality.\n      categories: [Unused]\n    hydrator: wos-object\n  StanSword:\n    documentation:\n      description: "..."\n      categories: [Tool, Tools]\n    hydrator: wos-object\n  SubspaceTripmine:\n    documentation:\n      description: |-\n        WARNING: HIGH EXPLOSIVE DEVICE. When triggered, this devastating weapon rips a gashing hole in the fabric of reality - subsequent spacetime reification results in a large explosion. USE: Drop mine. Once the mine stops moving, it will enter subspace and become invisible. At this point the mine is armed. Touching the mine will set it off... (Disabled in Testing Zone)\n      categories: [Unused, Tools]\n    hydrator: wos-object\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);