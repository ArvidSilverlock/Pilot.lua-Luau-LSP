"use strict";(self.webpackChunkwaste_of_space_wiki=self.webpackChunkwaste_of_space_wiki||[]).push([[7474],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(96540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},94875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"help/types","title":"Types","description":"You may see things like \\\\{ string \\\\} or \\\\{ \\\\string\\\\]: number \\\\} and be rather confused, these are [luau types (you can see how to read them by following that link).","source":"@site/docs/help/types.md","sourceDirName":"help","slug":"/help/types","permalink":"/Pilot.lua-Luau-LSP/help/types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"helpSidebar","previous":{"title":"Overloads","permalink":"/Pilot.lua-Luau-LSP/help/overloads"}}');var a=n(74848),o=n(28453);const r={},i="Types",l={},u=[];function c(e){const t={a:"a",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"types",children:"Types"})}),"\n",(0,a.jsxs)(t.p,{children:["You may see things like ",(0,a.jsx)("code",{children:"{ string }"})," or ",(0,a.jsx)("code",{children:"{ [string]: number }"})," and be rather confused, these are ",(0,a.jsx)(t.a,{href:"https://luau.org/typecheck",children:"luau types"})," (you can see how to read them by following that link)."]}),"\n",(0,a.jsx)(t.p,{children:"If you don't know already, roblox uses a different version of Lua, which is called 'Luau'. Pilot.lua is the exact same language as Luau (but with some extra functions!)."}),"\n",(0,a.jsx)(t.p,{children:"These types are ways of saying how a value is formatted in a manner your LSP (the thing that gives you all the squiggles and autocompletion)."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);